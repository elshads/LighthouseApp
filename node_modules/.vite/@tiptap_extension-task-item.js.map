{
  "version": 3,
  "sources": ["../@tiptap/extension-task-item/src/task-item.ts", "dep:@tiptap_extension-task-item"],
  "sourcesContent": ["import { Node, mergeAttributes, wrappingInputRule } from '@tiptap/core'\n\nexport interface TaskItemOptions {\n  nested: boolean,\n  HTMLAttributes: Record<string, any>,\n}\n\nexport const inputRegex = /^\\s*(\\[([ |x])\\])\\s$/\n\nexport const TaskItem = Node.create<TaskItemOptions>({\n  name: 'taskItem',\n\n  addOptions() {\n    return {\n      nested: false,\n      HTMLAttributes: {},\n    }\n  },\n\n  content() {\n    return this.options.nested ? 'paragraph block*' : 'paragraph+'\n  },\n\n  defining: true,\n\n  addAttributes() {\n    return {\n      checked: {\n        default: false,\n        keepOnSplit: false,\n        parseHTML: element => element.getAttribute('data-checked') === 'true',\n        renderHTML: attributes => ({\n          'data-checked': attributes.checked,\n        }),\n      },\n    }\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: `li[data-type=\"${this.name}\"]`,\n        priority: 51,\n      },\n    ]\n  },\n\n  renderHTML({ node, HTMLAttributes }) {\n    return [\n      'li',\n      mergeAttributes(\n        this.options.HTMLAttributes,\n        HTMLAttributes,\n        { 'data-type': this.name },\n      ),\n      [\n        'label',\n        [\n          'input',\n          {\n            type: 'checkbox',\n            checked: node.attrs.checked\n              ? 'checked'\n              : null,\n          },\n        ],\n        ['span'],\n      ],\n      [\n        'div',\n        0,\n      ],\n    ]\n  },\n\n  addKeyboardShortcuts() {\n    const shortcuts = {\n      Enter: () => this.editor.commands.splitListItem(this.name),\n      'Shift-Tab': () => this.editor.commands.liftListItem(this.name),\n    }\n\n    if (!this.options.nested) {\n      return shortcuts\n    }\n\n    return {\n      ...shortcuts,\n      Tab: () => this.editor.commands.sinkListItem(this.name),\n    }\n  },\n\n  addNodeView() {\n    return ({\n      node,\n      HTMLAttributes,\n      getPos,\n      editor,\n    }) => {\n      const listItem = document.createElement('li')\n      const checkboxWrapper = document.createElement('label')\n      const checkboxStyler = document.createElement('span')\n      const checkbox = document.createElement('input')\n      const content = document.createElement('div')\n\n      checkboxWrapper.contentEditable = 'false'\n      checkbox.type = 'checkbox'\n      checkbox.addEventListener('change', event => {\n        // if the editor isn\u2019t editable\n        // we have to undo the latest change\n        if (!editor.isEditable) {\n          checkbox.checked = !checkbox.checked\n\n          return\n        }\n\n        const { checked } = event.target as any\n\n        if (editor.isEditable && typeof getPos === 'function') {\n          editor\n            .chain()\n            .focus(undefined, { scrollIntoView: false })\n            .command(({ tr }) => {\n              const position = getPos()\n              const currentNode = tr.doc.nodeAt(position)\n\n              tr.setNodeMarkup(position, undefined, {\n                ...currentNode?.attrs,\n                checked,\n              })\n\n              return true\n            })\n            .run()\n        }\n      })\n\n      Object.entries(this.options.HTMLAttributes).forEach(([key, value]) => {\n        listItem.setAttribute(key, value)\n      })\n\n      listItem.dataset.checked = node.attrs.checked\n      if (node.attrs.checked) {\n        checkbox.setAttribute('checked', 'checked')\n      }\n\n      checkboxWrapper.append(checkbox, checkboxStyler)\n      listItem.append(checkboxWrapper, content)\n\n      Object\n        .entries(HTMLAttributes)\n        .forEach(([key, value]) => {\n          listItem.setAttribute(key, value)\n        })\n\n      return {\n        dom: listItem,\n        contentDOM: content,\n        update: updatedNode => {\n          if (updatedNode.type !== this.type) {\n            return false\n          }\n\n          listItem.dataset.checked = updatedNode.attrs.checked\n          if (updatedNode.attrs.checked) {\n            checkbox.setAttribute('checked', 'checked')\n          } else {\n            checkbox.removeAttribute('checked')\n          }\n\n          return true\n        },\n      }\n    }\n  },\n\n  addInputRules() {\n    return [\n      wrappingInputRule({\n        find: inputRegex,\n        type: this.type,\n        getAttributes: match => ({\n          checked: match[match.length - 1] === 'x',\n        }),\n      }),\n    ]\n  },\n})\n", "import d from \"./node_modules/@tiptap/extension-task-item/dist/tiptap-extension-task-item.esm.js\";export default d;\nexport * from \"./node_modules/@tiptap/extension-task-item/dist/tiptap-extension-task-item.esm.js\""],
  "mappings": ";;;;;;;;;;;IAOa,aAAa;IAEb,WAAW,KAAK,OAAwB;EACnD,MAAM;EAEN,aAAU;AACR,WAAO;MACL,QAAQ;MACR,gBAAgB;;;EAIpB,UAAO;AACL,WAAO,KAAK,QAAQ,SAAS,qBAAqB;;EAGpD,UAAU;EAEV,gBAAa;AACX,WAAO;MACL,SAAS;QACP,SAAS;QACT,aAAa;QACb,WAAW,aAAW,QAAQ,aAAa,oBAAoB;QAC/D,YAAY,gBAAe;UACzB,gBAAgB,WAAW;;;;;EAMnC,YAAS;AACP,WAAO;MACL;QACE,KAAK,iBAAiB,KAAK;QAC3B,UAAU;;;;EAKhB,WAAW,EAAE,MAAM,kBAAgB;AACjC,WAAO;MACL;MACA,gBACE,KAAK,QAAQ,gBACb,gBACA,EAAE,aAAa,KAAK;MAEtB;QACE;QACA;UACE;UACA;YACE,MAAM;YACN,SAAS,KAAK,MAAM,UAChB,YACA;;;QAGR,CAAC;;MAEH;QACE;QACA;;;;EAKN,uBAAoB;AAClB,UAAM,YAAY;MAChB,OAAO,MAAM,KAAK,OAAO,SAAS,cAAc,KAAK;MACrD,aAAa,MAAM,KAAK,OAAO,SAAS,aAAa,KAAK;;AAG5D,QAAI,CAAC,KAAK,QAAQ,QAAQ;AACxB,aAAO;;AAGT,WAAO,iCACF,YADE;MAEL,KAAK,MAAM,KAAK,OAAO,SAAS,aAAa,KAAK;;;EAItD,cAAW;AACT,WAAO,CAAC,EACN,MACA,gBACA,QACA,aACD;AACC,YAAM,WAAW,SAAS,cAAc;AACxC,YAAM,kBAAkB,SAAS,cAAc;AAC/C,YAAM,iBAAiB,SAAS,cAAc;AAC9C,YAAM,WAAW,SAAS,cAAc;AACxC,YAAM,UAAU,SAAS,cAAc;AAEvC,sBAAgB,kBAAkB;AAClC,eAAS,OAAO;AAChB,eAAS,iBAAiB,UAAU,WAAK;AAGvC,YAAI,CAAC,OAAO,YAAY;AACtB,mBAAS,UAAU,CAAC,SAAS;AAE7B;;AAGF,cAAM,EAAE,YAAY,MAAM;AAE1B,YAAI,OAAO,cAAc,OAAO,WAAW,YAAY;AACrD,iBACG,QACA,MAAM,QAAW,EAAE,gBAAgB,SACnC,QAAQ,CAAC,EAAE,SAAI;AACd,kBAAM,WAAW;AACjB,kBAAM,cAAc,GAAG,IAAI,OAAO;AAElC,eAAG,cAAc,UAAU,QAAW,iCACjC,gBAAW,QAAX,gBAAW,SAAA,SAAX,YAAa,QADoB;cAEpC;;AAGF,mBAAO;aAER;;;AAIP,aAAO,QAAQ,KAAK,QAAQ,gBAAgB,QAAQ,CAAC,CAAC,KAAK,WAAM;AAC/D,iBAAS,aAAa,KAAK;;AAG7B,eAAS,QAAQ,UAAU,KAAK,MAAM;AACtC,UAAI,KAAK,MAAM,SAAS;AACtB,iBAAS,aAAa,WAAW;;AAGnC,sBAAgB,OAAO,UAAU;AACjC,eAAS,OAAO,iBAAiB;AAEjC,aACG,QAAQ,gBACR,QAAQ,CAAC,CAAC,KAAK,WAAM;AACpB,iBAAS,aAAa,KAAK;;AAG/B,aAAO;QACL,KAAK;QACL,YAAY;QACZ,QAAQ,iBAAW;AACjB,cAAI,YAAY,SAAS,KAAK,MAAM;AAClC,mBAAO;;AAGT,mBAAS,QAAQ,UAAU,YAAY,MAAM;AAC7C,cAAI,YAAY,MAAM,SAAS;AAC7B,qBAAS,aAAa,WAAW;iBAC5B;AACL,qBAAS,gBAAgB;;AAG3B,iBAAO;;;;;EAMf,gBAAa;AACX,WAAO;MACL,kBAAkB;QAChB,MAAM;QACN,MAAM,KAAK;QACX,eAAe,WAAU;UACvB,SAAS,MAAM,MAAM,SAAS,OAAO;;;;;;;;ACrLmD,IAAO,qCAAQ;",
  "names": []
}
