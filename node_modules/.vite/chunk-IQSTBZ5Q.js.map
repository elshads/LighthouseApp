{
  "version": 3,
  "sources": ["../orderedmap/index.es.js", "../prosemirror-model/src/diff.js", "../prosemirror-model/src/fragment.js", "../prosemirror-model/src/comparedeep.js", "../prosemirror-model/src/mark.js", "../prosemirror-model/src/replace.js", "../prosemirror-model/src/resolvedpos.js", "../prosemirror-model/src/node.js", "../prosemirror-model/src/content.js", "../prosemirror-model/src/schema.js", "../prosemirror-model/src/from_dom.js", "../prosemirror-model/src/to_dom.js", "../prosemirror-transform/src/map.js", "../prosemirror-transform/src/transform.js", "../prosemirror-transform/src/step.js", "../prosemirror-transform/src/replace_step.js", "../prosemirror-transform/src/structure.js", "../prosemirror-transform/src/mark_step.js", "../prosemirror-transform/src/mark.js", "../prosemirror-transform/src/replace.js", "../prosemirror-state/src/selection.js", "../prosemirror-state/src/transaction.js", "../prosemirror-state/src/state.js", "../prosemirror-state/src/plugin.js", "../prosemirror-commands/src/commands.js", "../prosemirror-schema-list/src/schema-list.js", "../prosemirror-view/src/browser.js", "../prosemirror-view/src/dom.js", "../prosemirror-view/src/domcoords.js", "../prosemirror-view/src/viewdesc.js", "../prosemirror-view/src/selection.js", "../prosemirror-view/src/capturekeys.js", "../prosemirror-view/src/domchange.js", "../prosemirror-view/src/clipboard.js", "../prosemirror-view/src/domobserver.js", "../prosemirror-view/src/input.js", "../prosemirror-view/src/decoration.js", "../prosemirror-view/src/index.js", "../w3c-keyname/index.es.js", "../prosemirror-keymap/src/keymap.js", "../@tiptap/core/src/utilities/isPlainObject.ts", "../@tiptap/core/src/utilities/mergeDeep.ts", "../@tiptap/core/src/utilities/isFunction.ts", "../@tiptap/core/src/utilities/callOrReturn.ts", "../@tiptap/core/src/helpers/getExtensionField.ts", "../@tiptap/core/src/Extension.ts", "../@tiptap/core/src/helpers/getTextBetween.ts", "../@tiptap/core/src/helpers/getTextSeralizersFromSchema.ts", "../@tiptap/core/src/extensions/clipboardTextSerializer.ts", "../@tiptap/core/src/commands/blur.ts", "../@tiptap/core/src/commands/clearContent.ts", "../@tiptap/core/src/commands/clearNodes.ts", "../@tiptap/core/src/commands/command.ts", "../@tiptap/core/src/commands/createParagraphNear.ts", "../@tiptap/core/src/helpers/getNodeType.ts", "../@tiptap/core/src/commands/deleteNode.ts", "../@tiptap/core/src/commands/deleteRange.ts", "../@tiptap/core/src/commands/deleteSelection.ts", "../@tiptap/core/src/commands/enter.ts", "../@tiptap/core/src/commands/exitCode.ts", "../@tiptap/core/src/helpers/getMarkType.ts", "../@tiptap/core/src/utilities/isRegExp.ts", "../@tiptap/core/src/utilities/objectIncludes.ts", "../@tiptap/core/src/helpers/getMarkRange.ts", "../@tiptap/core/src/commands/extendMarkRange.ts", "../@tiptap/core/src/commands/first.ts", "../@tiptap/core/src/utilities/isClass.ts", "../@tiptap/core/src/utilities/isObject.ts", "../@tiptap/core/src/helpers/isTextSelection.ts", "../@tiptap/core/src/utilities/isiOS.ts", "../@tiptap/core/src/utilities/minMax.ts", "../@tiptap/core/src/helpers/resolveFocusPosition.ts", "../@tiptap/core/src/commands/focus.ts", "../@tiptap/core/src/commands/forEach.ts", "../@tiptap/core/src/commands/insertContent.ts", "../@tiptap/core/src/utilities/elementFromString.ts", "../@tiptap/core/src/helpers/createNodeFromContent.ts", "../@tiptap/core/src/helpers/selectionToInsertionEnd.ts", "../@tiptap/core/src/commands/insertContentAt.ts", "../@tiptap/core/src/commands/joinBackward.ts", "../@tiptap/core/src/commands/joinForward.ts", "../@tiptap/core/src/utilities/isMacOS.ts", "../@tiptap/core/src/commands/keyboardShortcut.ts", "../@tiptap/core/src/helpers/isNodeActive.ts", "../@tiptap/core/src/commands/lift.ts", "../@tiptap/core/src/commands/liftEmptyBlock.ts", "../@tiptap/core/src/commands/liftListItem.ts", "../@tiptap/core/src/commands/newlineInCode.ts", "../@tiptap/core/src/helpers/getSchemaTypeNameByName.ts", "../@tiptap/core/src/utilities/deleteProps.ts", "../@tiptap/core/src/commands/resetAttributes.ts", "../@tiptap/core/src/commands/scrollIntoView.ts", "../@tiptap/core/src/commands/selectAll.ts", "../@tiptap/core/src/commands/selectNodeBackward.ts", "../@tiptap/core/src/commands/selectNodeForward.ts", "../@tiptap/core/src/commands/selectParentNode.ts", "../@tiptap/core/src/commands/selectTextblockEnd.ts", "../@tiptap/core/src/commands/selectTextblockStart.ts", "../@tiptap/core/src/helpers/createDocument.ts", "../@tiptap/core/src/commands/setContent.ts", "../@tiptap/core/src/helpers/getMarkAttributes.ts", "../@tiptap/core/src/commands/setMark.ts", "../@tiptap/core/src/commands/setMeta.ts", "../@tiptap/core/src/commands/setNode.ts", "../@tiptap/core/src/commands/setNodeSelection.ts", "../@tiptap/core/src/commands/setTextSelection.ts", "../@tiptap/core/src/commands/sinkListItem.ts", "../@tiptap/core/src/helpers/getSplittedAttributes.ts", "../@tiptap/core/src/commands/splitBlock.ts", "../@tiptap/core/src/commands/splitListItem.ts", "../@tiptap/core/src/helpers/findParentNodeClosestToPos.ts", "../@tiptap/core/src/helpers/findParentNode.ts", "../@tiptap/core/src/helpers/splitExtensions.ts", "../@tiptap/core/src/helpers/isList.ts", "../@tiptap/core/src/commands/toggleList.ts", "../@tiptap/core/src/helpers/isMarkActive.ts", "../@tiptap/core/src/commands/toggleMark.ts", "../@tiptap/core/src/commands/toggleNode.ts", "../@tiptap/core/src/commands/toggleWrap.ts", "../@tiptap/core/src/commands/undoInputRule.ts", "../@tiptap/core/src/commands/unsetAllMarks.ts", "../@tiptap/core/src/commands/unsetMark.ts", "../@tiptap/core/src/commands/updateAttributes.ts", "../@tiptap/core/src/commands/wrapIn.ts", "../@tiptap/core/src/commands/wrapInList.ts", "../@tiptap/core/src/extensions/commands.ts", "../@tiptap/core/src/extensions/editable.ts", "../@tiptap/core/src/extensions/focusEvents.ts", "../@tiptap/core/src/helpers/createChainableState.ts", "../@tiptap/core/src/CommandManager.ts", "../@tiptap/core/src/extensions/keymap.ts", "../@tiptap/core/src/extensions/tabindex.ts", "../@tiptap/core/src/helpers/getNodeAttributes.ts", "../@tiptap/core/src/helpers/getAttributes.ts", "../@tiptap/core/src/helpers/isActive.ts", "../@tiptap/core/src/helpers/getHTMLFromFragment.ts", "../@tiptap/core/src/helpers/getText.ts", "../@tiptap/core/src/helpers/isNodeEmpty.ts", "../@tiptap/core/src/utilities/createStyleTag.ts", "../@tiptap/core/src/InputRule.ts", "../@tiptap/core/src/utilities/isNumber.ts", "../@tiptap/core/src/PasteRule.ts", "../@tiptap/core/src/helpers/getAttributesFromExtensions.ts", "../@tiptap/core/src/utilities/mergeAttributes.ts", "../@tiptap/core/src/helpers/getRenderedAttributes.ts", "../@tiptap/core/src/utilities/isEmptyObject.ts", "../@tiptap/core/src/utilities/fromString.ts", "../@tiptap/core/src/helpers/injectExtensionAttributesToParseRule.ts", "../@tiptap/core/src/helpers/getSchemaByResolvedExtensions.ts", "../@tiptap/core/src/helpers/getSchemaTypeByName.ts", "../@tiptap/core/src/helpers/isExtensionRulesEnabled.ts", "../@tiptap/core/src/utilities/findDuplicates.ts", "../@tiptap/core/src/ExtensionManager.ts", "../@tiptap/core/src/EventEmitter.ts", "../@tiptap/core/src/style.ts", "../@tiptap/core/src/Editor.ts", "../@tiptap/core/src/Node.ts", "../@tiptap/core/src/Mark.ts", "../@tiptap/core/src/NodeView.ts", "../@tiptap/core/src/Tracker.ts", "../@tiptap/core/src/inputRules/nodeInputRule.ts", "../@tiptap/core/src/helpers/getMarksBetween.ts", "../@tiptap/core/src/inputRules/markInputRule.ts", "../@tiptap/core/src/inputRules/textblockTypeInputRule.ts", "../@tiptap/core/src/inputRules/textInputRule.ts", "../@tiptap/core/src/inputRules/wrappingInputRule.ts", "../@tiptap/core/src/pasteRules/markPasteRule.ts", "../@tiptap/core/src/pasteRules/textPasteRule.ts", "../@tiptap/core/src/utilities/escapeForRegEx.ts", "../@tiptap/core/src/helpers/combineTransactionSteps.ts", "../@tiptap/core/src/helpers/defaultBlockAt.ts", "../@tiptap/core/src/helpers/findChildren.ts", "../@tiptap/core/src/helpers/findChildrenInRange.ts", "../@tiptap/core/src/helpers/getSchema.ts", "../@tiptap/core/src/helpers/generateHTML.ts", "../@tiptap/core/src/helpers/generateJSON.ts", "../@tiptap/core/src/helpers/generateText.ts", "../@tiptap/core/src/utilities/removeDuplicates.ts", "../@tiptap/core/src/helpers/getChangedRanges.ts", "../@tiptap/core/src/helpers/getDebugJSON.ts", "../@tiptap/core/src/helpers/isNodeSelection.ts", "../@tiptap/core/src/helpers/posToDOMRect.ts"],
  "sourcesContent": ["// ::- Persistent data structure representing an ordered mapping from\n// strings to values, with some convenient update methods.\nfunction OrderedMap(content) {\n  this.content = content;\n}\n\nOrderedMap.prototype = {\n  constructor: OrderedMap,\n\n  find: function(key) {\n    for (var i = 0; i < this.content.length; i += 2)\n      if (this.content[i] === key) return i\n    return -1\n  },\n\n  // :: (string) \u2192 ?any\n  // Retrieve the value stored under `key`, or return undefined when\n  // no such key exists.\n  get: function(key) {\n    var found = this.find(key);\n    return found == -1 ? undefined : this.content[found + 1]\n  },\n\n  // :: (string, any, ?string) \u2192 OrderedMap\n  // Create a new map by replacing the value of `key` with a new\n  // value, or adding a binding to the end of the map. If `newKey` is\n  // given, the key of the binding will be replaced with that key.\n  update: function(key, value, newKey) {\n    var self = newKey && newKey != key ? this.remove(newKey) : this;\n    var found = self.find(key), content = self.content.slice();\n    if (found == -1) {\n      content.push(newKey || key, value);\n    } else {\n      content[found + 1] = value;\n      if (newKey) content[found] = newKey;\n    }\n    return new OrderedMap(content)\n  },\n\n  // :: (string) \u2192 OrderedMap\n  // Return a map with the given key removed, if it existed.\n  remove: function(key) {\n    var found = this.find(key);\n    if (found == -1) return this\n    var content = this.content.slice();\n    content.splice(found, 2);\n    return new OrderedMap(content)\n  },\n\n  // :: (string, any) \u2192 OrderedMap\n  // Add a new key to the start of the map.\n  addToStart: function(key, value) {\n    return new OrderedMap([key, value].concat(this.remove(key).content))\n  },\n\n  // :: (string, any) \u2192 OrderedMap\n  // Add a new key to the end of the map.\n  addToEnd: function(key, value) {\n    var content = this.remove(key).content.slice();\n    content.push(key, value);\n    return new OrderedMap(content)\n  },\n\n  // :: (string, string, any) \u2192 OrderedMap\n  // Add a key after the given key. If `place` is not found, the new\n  // key is added to the end.\n  addBefore: function(place, key, value) {\n    var without = this.remove(key), content = without.content.slice();\n    var found = without.find(place);\n    content.splice(found == -1 ? content.length : found, 0, key, value);\n    return new OrderedMap(content)\n  },\n\n  // :: ((key: string, value: any))\n  // Call the given function for each key/value pair in the map, in\n  // order.\n  forEach: function(f) {\n    for (var i = 0; i < this.content.length; i += 2)\n      f(this.content[i], this.content[i + 1]);\n  },\n\n  // :: (union<Object, OrderedMap>) \u2192 OrderedMap\n  // Create a new map by prepending the keys in this map that don't\n  // appear in `map` before the keys in `map`.\n  prepend: function(map) {\n    map = OrderedMap.from(map);\n    if (!map.size) return this\n    return new OrderedMap(map.content.concat(this.subtract(map).content))\n  },\n\n  // :: (union<Object, OrderedMap>) \u2192 OrderedMap\n  // Create a new map by appending the keys in this map that don't\n  // appear in `map` after the keys in `map`.\n  append: function(map) {\n    map = OrderedMap.from(map);\n    if (!map.size) return this\n    return new OrderedMap(this.subtract(map).content.concat(map.content))\n  },\n\n  // :: (union<Object, OrderedMap>) \u2192 OrderedMap\n  // Create a map containing all the keys in this map that don't\n  // appear in `map`.\n  subtract: function(map) {\n    var result = this;\n    map = OrderedMap.from(map);\n    for (var i = 0; i < map.content.length; i += 2)\n      result = result.remove(map.content[i]);\n    return result\n  },\n\n  // :: number\n  // The amount of keys in this map.\n  get size() {\n    return this.content.length >> 1\n  }\n};\n\n// :: (?union<Object, OrderedMap>) \u2192 OrderedMap\n// Return a map with the given content. If null, create an empty\n// map. If given an ordered map, return that map itself. If given an\n// object, create a map from the object's properties.\nOrderedMap.from = function(value) {\n  if (value instanceof OrderedMap) return value\n  var content = [];\n  if (value) for (var prop in value) content.push(prop, value[prop]);\n  return new OrderedMap(content)\n};\n\nvar orderedmap = OrderedMap;\n\nexport default orderedmap;\n", "export function findDiffStart(a, b, pos) {\n  for (let i = 0;; i++) {\n    if (i == a.childCount || i == b.childCount)\n      return a.childCount == b.childCount ? null : pos\n\n    let childA = a.child(i), childB = b.child(i)\n    if (childA == childB) { pos += childA.nodeSize; continue }\n\n    if (!childA.sameMarkup(childB)) return pos\n\n    if (childA.isText && childA.text != childB.text) {\n      for (let j = 0; childA.text[j] == childB.text[j]; j++)\n        pos++\n      return pos\n    }\n    if (childA.content.size || childB.content.size) {\n      let inner = findDiffStart(childA.content, childB.content, pos + 1)\n      if (inner != null) return inner\n    }\n    pos += childA.nodeSize\n  }\n}\n\nexport function findDiffEnd(a, b, posA, posB) {\n  for (let iA = a.childCount, iB = b.childCount;;) {\n    if (iA == 0 || iB == 0)\n      return iA == iB ? null : {a: posA, b: posB}\n\n    let childA = a.child(--iA), childB = b.child(--iB), size = childA.nodeSize\n    if (childA == childB) {\n      posA -= size; posB -= size\n      continue\n    }\n\n    if (!childA.sameMarkup(childB)) return {a: posA, b: posB}\n\n    if (childA.isText && childA.text != childB.text) {\n      let same = 0, minSize = Math.min(childA.text.length, childB.text.length)\n      while (same < minSize && childA.text[childA.text.length - same - 1] == childB.text[childB.text.length - same - 1]) {\n        same++; posA--; posB--\n      }\n      return {a: posA, b: posB}\n    }\n    if (childA.content.size || childB.content.size) {\n      let inner = findDiffEnd(childA.content, childB.content, posA - 1, posB - 1)\n      if (inner) return inner\n    }\n    posA -= size; posB -= size\n  }\n}\n", "import {findDiffStart, findDiffEnd} from \"./diff\"\n\n// ::- A fragment represents a node's collection of child nodes.\n//\n// Like nodes, fragments are persistent data structures, and you\n// should not mutate them or their content. Rather, you create new\n// instances whenever needed. The API tries to make this easy.\nexport class Fragment {\n  constructor(content, size) {\n    this.content = content\n    // :: number\n    // The size of the fragment, which is the total of the size of its\n    // content nodes.\n    this.size = size || 0\n    if (size == null) for (let i = 0; i < content.length; i++)\n      this.size += content[i].nodeSize\n  }\n\n  // :: (number, number, (node: Node, start: number, parent: Node, index: number) \u2192 ?bool, ?number)\n  // Invoke a callback for all descendant nodes between the given two\n  // positions (relative to start of this fragment). Doesn't descend\n  // into a node when the callback returns `false`.\n  nodesBetween(from, to, f, nodeStart = 0, parent) {\n    for (let i = 0, pos = 0; pos < to; i++) {\n      let child = this.content[i], end = pos + child.nodeSize\n      if (end > from && f(child, nodeStart + pos, parent, i) !== false && child.content.size) {\n        let start = pos + 1\n        child.nodesBetween(Math.max(0, from - start),\n                           Math.min(child.content.size, to - start),\n                           f, nodeStart + start)\n      }\n      pos = end\n    }\n  }\n\n  // :: ((node: Node, pos: number, parent: Node) \u2192 ?bool)\n  // Call the given callback for every descendant node. The callback\n  // may return `false` to prevent traversal of a given node's children.\n  descendants(f) {\n    this.nodesBetween(0, this.size, f)\n  }\n\n  // :: (number, number, ?string, ?union<string, (leafNode: Node) \u2192 string>) \u2192 string\n  // Extract the text between `from` and `to`. See the same method on\n  // [`Node`](#model.Node.textBetween).\n  textBetween(from, to, blockSeparator, leafText) {\n    let text = \"\", separated = true\n    this.nodesBetween(from, to, (node, pos) => {\n      if (node.isText) {\n        text += node.text.slice(Math.max(from, pos) - pos, to - pos)\n        separated = !blockSeparator\n      } else if (node.isLeaf && leafText) {\n        text += typeof leafText === 'function' ? leafText(node): leafText\n        separated = !blockSeparator\n      } else if (!separated && node.isBlock) {\n        text += blockSeparator\n        separated = true\n      }\n    }, 0)\n    return text\n  }\n\n  // :: (Fragment) \u2192 Fragment\n  // Create a new fragment containing the combined content of this\n  // fragment and the other.\n  append(other) {\n    if (!other.size) return this\n    if (!this.size) return other\n    let last = this.lastChild, first = other.firstChild, content = this.content.slice(), i = 0\n    if (last.isText && last.sameMarkup(first)) {\n      content[content.length - 1] = last.withText(last.text + first.text)\n      i = 1\n    }\n    for (; i < other.content.length; i++) content.push(other.content[i])\n    return new Fragment(content, this.size + other.size)\n  }\n\n  // :: (number, ?number) \u2192 Fragment\n  // Cut out the sub-fragment between the two given positions.\n  cut(from, to) {\n    if (to == null) to = this.size\n    if (from == 0 && to == this.size) return this\n    let result = [], size = 0\n    if (to > from) for (let i = 0, pos = 0; pos < to; i++) {\n      let child = this.content[i], end = pos + child.nodeSize\n      if (end > from) {\n        if (pos < from || end > to) {\n          if (child.isText)\n            child = child.cut(Math.max(0, from - pos), Math.min(child.text.length, to - pos))\n          else\n            child = child.cut(Math.max(0, from - pos - 1), Math.min(child.content.size, to - pos - 1))\n        }\n        result.push(child)\n        size += child.nodeSize\n      }\n      pos = end\n    }\n    return new Fragment(result, size)\n  }\n\n  cutByIndex(from, to) {\n    if (from == to) return Fragment.empty\n    if (from == 0 && to == this.content.length) return this\n    return new Fragment(this.content.slice(from, to))\n  }\n\n  // :: (number, Node) \u2192 Fragment\n  // Create a new fragment in which the node at the given index is\n  // replaced by the given node.\n  replaceChild(index, node) {\n    let current = this.content[index]\n    if (current == node) return this\n    let copy = this.content.slice()\n    let size = this.size + node.nodeSize - current.nodeSize\n    copy[index] = node\n    return new Fragment(copy, size)\n  }\n\n  // : (Node) \u2192 Fragment\n  // Create a new fragment by prepending the given node to this\n  // fragment.\n  addToStart(node) {\n    return new Fragment([node].concat(this.content), this.size + node.nodeSize)\n  }\n\n  // : (Node) \u2192 Fragment\n  // Create a new fragment by appending the given node to this\n  // fragment.\n  addToEnd(node) {\n    return new Fragment(this.content.concat(node), this.size + node.nodeSize)\n  }\n\n  // :: (Fragment) \u2192 bool\n  // Compare this fragment to another one.\n  eq(other) {\n    if (this.content.length != other.content.length) return false\n    for (let i = 0; i < this.content.length; i++)\n      if (!this.content[i].eq(other.content[i])) return false\n    return true\n  }\n\n  // :: ?Node\n  // The first child of the fragment, or `null` if it is empty.\n  get firstChild() { return this.content.length ? this.content[0] : null }\n\n  // :: ?Node\n  // The last child of the fragment, or `null` if it is empty.\n  get lastChild() { return this.content.length ? this.content[this.content.length - 1] : null }\n\n  // :: number\n  // The number of child nodes in this fragment.\n  get childCount() { return this.content.length }\n\n  // :: (number) \u2192 Node\n  // Get the child node at the given index. Raise an error when the\n  // index is out of range.\n  child(index) {\n    let found = this.content[index]\n    if (!found) throw new RangeError(\"Index \" + index + \" out of range for \" + this)\n    return found\n  }\n\n  // :: (number) \u2192 ?Node\n  // Get the child node at the given index, if it exists.\n  maybeChild(index) {\n    return this.content[index]\n  }\n\n  // :: ((node: Node, offset: number, index: number))\n  // Call `f` for every child node, passing the node, its offset\n  // into this parent node, and its index.\n  forEach(f) {\n    for (let i = 0, p = 0; i < this.content.length; i++) {\n      let child = this.content[i]\n      f(child, p, i)\n      p += child.nodeSize\n    }\n  }\n\n  // :: (Fragment) \u2192 ?number\n  // Find the first position at which this fragment and another\n  // fragment differ, or `null` if they are the same.\n  findDiffStart(other, pos = 0) {\n    return findDiffStart(this, other, pos)\n  }\n\n  // :: (Fragment) \u2192 ?{a: number, b: number}\n  // Find the first position, searching from the end, at which this\n  // fragment and the given fragment differ, or `null` if they are the\n  // same. Since this position will not be the same in both nodes, an\n  // object with two separate positions is returned.\n  findDiffEnd(other, pos = this.size, otherPos = other.size) {\n    return findDiffEnd(this, other, pos, otherPos)\n  }\n\n  // : (number, ?number) \u2192 {index: number, offset: number}\n  // Find the index and inner offset corresponding to a given relative\n  // position in this fragment. The result object will be reused\n  // (overwritten) the next time the function is called. (Not public.)\n  findIndex(pos, round = -1) {\n    if (pos == 0) return retIndex(0, pos)\n    if (pos == this.size) return retIndex(this.content.length, pos)\n    if (pos > this.size || pos < 0) throw new RangeError(`Position ${pos} outside of fragment (${this})`)\n    for (let i = 0, curPos = 0;; i++) {\n      let cur = this.child(i), end = curPos + cur.nodeSize\n      if (end >= pos) {\n        if (end == pos || round > 0) return retIndex(i + 1, end)\n        return retIndex(i, curPos)\n      }\n      curPos = end\n    }\n  }\n\n  // :: () \u2192 string\n  // Return a debugging string that describes this fragment.\n  toString() { return \"<\" + this.toStringInner() + \">\" }\n\n  toStringInner() { return this.content.join(\", \") }\n\n  // :: () \u2192 ?Object\n  // Create a JSON-serializeable representation of this fragment.\n  toJSON() {\n    return this.content.length ? this.content.map(n => n.toJSON()) : null\n  }\n\n  // :: (Schema, ?Object) \u2192 Fragment\n  // Deserialize a fragment from its JSON representation.\n  static fromJSON(schema, value) {\n    if (!value) return Fragment.empty\n    if (!Array.isArray(value)) throw new RangeError(\"Invalid input for Fragment.fromJSON\")\n    return new Fragment(value.map(schema.nodeFromJSON))\n  }\n\n  // :: ([Node]) \u2192 Fragment\n  // Build a fragment from an array of nodes. Ensures that adjacent\n  // text nodes with the same marks are joined together.\n  static fromArray(array) {\n    if (!array.length) return Fragment.empty\n    let joined, size = 0\n    for (let i = 0; i < array.length; i++) {\n      let node = array[i]\n      size += node.nodeSize\n      if (i && node.isText && array[i - 1].sameMarkup(node)) {\n        if (!joined) joined = array.slice(0, i)\n        joined[joined.length - 1] = node.withText(joined[joined.length - 1].text + node.text)\n      } else if (joined) {\n        joined.push(node)\n      }\n    }\n    return new Fragment(joined || array, size)\n  }\n\n  // :: (?union<Fragment, Node, [Node]>) \u2192 Fragment\n  // Create a fragment from something that can be interpreted as a set\n  // of nodes. For `null`, it returns the empty fragment. For a\n  // fragment, the fragment itself. For a node or array of nodes, a\n  // fragment containing those nodes.\n  static from(nodes) {\n    if (!nodes) return Fragment.empty\n    if (nodes instanceof Fragment) return nodes\n    if (Array.isArray(nodes)) return this.fromArray(nodes)\n    if (nodes.attrs) return new Fragment([nodes], nodes.nodeSize)\n    throw new RangeError(\"Can not convert \" + nodes + \" to a Fragment\" +\n                         (nodes.nodesBetween ? \" (looks like multiple versions of prosemirror-model were loaded)\" : \"\"))\n  }\n}\n\nconst found = {index: 0, offset: 0}\nfunction retIndex(index, offset) {\n  found.index = index\n  found.offset = offset\n  return found\n}\n\n// :: Fragment\n// An empty fragment. Intended to be reused whenever a node doesn't\n// contain anything (rather than allocating a new empty fragment for\n// each leaf node).\nFragment.empty = new Fragment([], 0)\n", "export function compareDeep(a, b) {\n  if (a === b) return true\n  if (!(a && typeof a == \"object\") ||\n      !(b && typeof b == \"object\")) return false\n  let array = Array.isArray(a)\n  if (Array.isArray(b) != array) return false\n  if (array) {\n    if (a.length != b.length) return false\n    for (let i = 0; i < a.length; i++) if (!compareDeep(a[i], b[i])) return false\n  } else {\n    for (let p in a) if (!(p in b) || !compareDeep(a[p], b[p])) return false\n    for (let p in b) if (!(p in a)) return false\n  }\n  return true\n}\n", "import {compareDeep} from \"./comparedeep\"\n\n// ::- A mark is a piece of information that can be attached to a node,\n// such as it being emphasized, in code font, or a link. It has a type\n// and optionally a set of attributes that provide further information\n// (such as the target of the link). Marks are created through a\n// `Schema`, which controls which types exist and which\n// attributes they have.\nexport class Mark {\n  constructor(type, attrs) {\n    // :: MarkType\n    // The type of this mark.\n    this.type = type\n    // :: Object\n    // The attributes associated with this mark.\n    this.attrs = attrs\n  }\n\n  // :: ([Mark]) \u2192 [Mark]\n  // Given a set of marks, create a new set which contains this one as\n  // well, in the right position. If this mark is already in the set,\n  // the set itself is returned. If any marks that are set to be\n  // [exclusive](#model.MarkSpec.excludes) with this mark are present,\n  // those are replaced by this one.\n  addToSet(set) {\n    let copy, placed = false\n    for (let i = 0; i < set.length; i++) {\n      let other = set[i]\n      if (this.eq(other)) return set\n      if (this.type.excludes(other.type)) {\n        if (!copy) copy = set.slice(0, i)\n      } else if (other.type.excludes(this.type)) {\n        return set\n      } else {\n        if (!placed && other.type.rank > this.type.rank) {\n          if (!copy) copy = set.slice(0, i)\n          copy.push(this)\n          placed = true\n        }\n        if (copy) copy.push(other)\n      }\n    }\n    if (!copy) copy = set.slice()\n    if (!placed) copy.push(this)\n    return copy\n  }\n\n  // :: ([Mark]) \u2192 [Mark]\n  // Remove this mark from the given set, returning a new set. If this\n  // mark is not in the set, the set itself is returned.\n  removeFromSet(set) {\n    for (let i = 0; i < set.length; i++)\n      if (this.eq(set[i]))\n        return set.slice(0, i).concat(set.slice(i + 1))\n    return set\n  }\n\n  // :: ([Mark]) \u2192 bool\n  // Test whether this mark is in the given set of marks.\n  isInSet(set) {\n    for (let i = 0; i < set.length; i++)\n      if (this.eq(set[i])) return true\n    return false\n  }\n\n  // :: (Mark) \u2192 bool\n  // Test whether this mark has the same type and attributes as\n  // another mark.\n  eq(other) {\n    return this == other ||\n      (this.type == other.type && compareDeep(this.attrs, other.attrs))\n  }\n\n  // :: () \u2192 Object\n  // Convert this mark to a JSON-serializeable representation.\n  toJSON() {\n    let obj = {type: this.type.name}\n    for (let _ in this.attrs) {\n      obj.attrs = this.attrs\n      break\n    }\n    return obj\n  }\n\n  // :: (Schema, Object) \u2192 Mark\n  static fromJSON(schema, json) {\n    if (!json) throw new RangeError(\"Invalid input for Mark.fromJSON\")\n    let type = schema.marks[json.type]\n    if (!type) throw new RangeError(`There is no mark type ${json.type} in this schema`)\n    return type.create(json.attrs)\n  }\n\n  // :: ([Mark], [Mark]) \u2192 bool\n  // Test whether two sets of marks are identical.\n  static sameSet(a, b) {\n    if (a == b) return true\n    if (a.length != b.length) return false\n    for (let i = 0; i < a.length; i++)\n      if (!a[i].eq(b[i])) return false\n    return true\n  }\n\n  // :: (?union<Mark, [Mark]>) \u2192 [Mark]\n  // Create a properly sorted mark set from null, a single mark, or an\n  // unsorted array of marks.\n  static setFrom(marks) {\n    if (!marks || marks.length == 0) return Mark.none\n    if (marks instanceof Mark) return [marks]\n    let copy = marks.slice()\n    copy.sort((a, b) => a.type.rank - b.type.rank)\n    return copy\n  }\n}\n\n// :: [Mark] The empty set of marks.\nMark.none = []\n", "import {Fragment} from \"./fragment\"\n\n// ReplaceError:: class extends Error\n// Error type raised by [`Node.replace`](#model.Node.replace) when\n// given an invalid replacement.\n\nexport function ReplaceError(message) {\n  let err = Error.call(this, message)\n  err.__proto__ = ReplaceError.prototype\n  return err\n}\n\nReplaceError.prototype = Object.create(Error.prototype)\nReplaceError.prototype.constructor = ReplaceError\nReplaceError.prototype.name = \"ReplaceError\"\n\n// ::- A slice represents a piece cut out of a larger document. It\n// stores not only a fragment, but also the depth up to which nodes on\n// both side are \u2018open\u2019 (cut through).\nexport class Slice {\n  // :: (Fragment, number, number)\n  // Create a slice. When specifying a non-zero open depth, you must\n  // make sure that there are nodes of at least that depth at the\n  // appropriate side of the fragment\u2014i.e. if the fragment is an empty\n  // paragraph node, `openStart` and `openEnd` can't be greater than 1.\n  //\n  // It is not necessary for the content of open nodes to conform to\n  // the schema's content constraints, though it should be a valid\n  // start/end/middle for such a node, depending on which sides are\n  // open.\n  constructor(content, openStart, openEnd) {\n    // :: Fragment The slice's content.\n    this.content = content\n    // :: number The open depth at the start.\n    this.openStart = openStart\n    // :: number The open depth at the end.\n    this.openEnd = openEnd\n  }\n\n  // :: number\n  // The size this slice would add when inserted into a document.\n  get size() {\n    return this.content.size - this.openStart - this.openEnd\n  }\n\n  insertAt(pos, fragment) {\n    let content = insertInto(this.content, pos + this.openStart, fragment, null)\n    return content && new Slice(content, this.openStart, this.openEnd)\n  }\n\n  removeBetween(from, to) {\n    return new Slice(removeRange(this.content, from + this.openStart, to + this.openStart), this.openStart, this.openEnd)\n  }\n\n  // :: (Slice) \u2192 bool\n  // Tests whether this slice is equal to another slice.\n  eq(other) {\n    return this.content.eq(other.content) && this.openStart == other.openStart && this.openEnd == other.openEnd\n  }\n\n  toString() {\n    return this.content + \"(\" + this.openStart + \",\" + this.openEnd + \")\"\n  }\n\n  // :: () \u2192 ?Object\n  // Convert a slice to a JSON-serializable representation.\n  toJSON() {\n    if (!this.content.size) return null\n    let json = {content: this.content.toJSON()}\n    if (this.openStart > 0) json.openStart = this.openStart\n    if (this.openEnd > 0) json.openEnd = this.openEnd\n    return json\n  }\n\n  // :: (Schema, ?Object) \u2192 Slice\n  // Deserialize a slice from its JSON representation.\n  static fromJSON(schema, json) {\n    if (!json) return Slice.empty\n    let openStart = json.openStart || 0, openEnd = json.openEnd || 0\n    if (typeof openStart != \"number\" || typeof openEnd != \"number\")\n      throw new RangeError(\"Invalid input for Slice.fromJSON\")\n    return new Slice(Fragment.fromJSON(schema, json.content), openStart, openEnd)\n  }\n\n  // :: (Fragment, ?bool) \u2192 Slice\n  // Create a slice from a fragment by taking the maximum possible\n  // open value on both side of the fragment.\n  static maxOpen(fragment, openIsolating=true) {\n    let openStart = 0, openEnd = 0\n    for (let n = fragment.firstChild; n && !n.isLeaf && (openIsolating || !n.type.spec.isolating); n = n.firstChild) openStart++\n    for (let n = fragment.lastChild; n && !n.isLeaf && (openIsolating || !n.type.spec.isolating); n = n.lastChild) openEnd++\n    return new Slice(fragment, openStart, openEnd)\n  }\n}\n\nfunction removeRange(content, from, to) {\n  let {index, offset} = content.findIndex(from), child = content.maybeChild(index)\n  let {index: indexTo, offset: offsetTo} = content.findIndex(to)\n  if (offset == from || child.isText) {\n    if (offsetTo != to && !content.child(indexTo).isText) throw new RangeError(\"Removing non-flat range\")\n    return content.cut(0, from).append(content.cut(to))\n  }\n  if (index != indexTo) throw new RangeError(\"Removing non-flat range\")\n  return content.replaceChild(index, child.copy(removeRange(child.content, from - offset - 1, to - offset - 1)))\n}\n\nfunction insertInto(content, dist, insert, parent) {\n  let {index, offset} = content.findIndex(dist), child = content.maybeChild(index)\n  if (offset == dist || child.isText) {\n    if (parent && !parent.canReplace(index, index, insert)) return null\n    return content.cut(0, dist).append(insert).append(content.cut(dist))\n  }\n  let inner = insertInto(child.content, dist - offset - 1, insert)\n  return inner && content.replaceChild(index, child.copy(inner))\n}\n\n// :: Slice\n// The empty slice.\nSlice.empty = new Slice(Fragment.empty, 0, 0)\n\nexport function replace($from, $to, slice) {\n  if (slice.openStart > $from.depth)\n    throw new ReplaceError(\"Inserted content deeper than insertion position\")\n  if ($from.depth - slice.openStart != $to.depth - slice.openEnd)\n    throw new ReplaceError(\"Inconsistent open depths\")\n  return replaceOuter($from, $to, slice, 0)\n}\n\nfunction replaceOuter($from, $to, slice, depth) {\n  let index = $from.index(depth), node = $from.node(depth)\n  if (index == $to.index(depth) && depth < $from.depth - slice.openStart) {\n    let inner = replaceOuter($from, $to, slice, depth + 1)\n    return node.copy(node.content.replaceChild(index, inner))\n  } else if (!slice.content.size) {\n    return close(node, replaceTwoWay($from, $to, depth))\n  } else if (!slice.openStart && !slice.openEnd && $from.depth == depth && $to.depth == depth) { // Simple, flat case\n    let parent = $from.parent, content = parent.content\n    return close(parent, content.cut(0, $from.parentOffset).append(slice.content).append(content.cut($to.parentOffset)))\n  } else {\n    let {start, end} = prepareSliceForReplace(slice, $from)\n    return close(node, replaceThreeWay($from, start, end, $to, depth))\n  }\n}\n\nfunction checkJoin(main, sub) {\n  if (!sub.type.compatibleContent(main.type))\n    throw new ReplaceError(\"Cannot join \" + sub.type.name + \" onto \" + main.type.name)\n}\n\nfunction joinable($before, $after, depth) {\n  let node = $before.node(depth)\n  checkJoin(node, $after.node(depth))\n  return node\n}\n\nfunction addNode(child, target) {\n  let last = target.length - 1\n  if (last >= 0 && child.isText && child.sameMarkup(target[last]))\n    target[last] = child.withText(target[last].text + child.text)\n  else\n    target.push(child)\n}\n\nfunction addRange($start, $end, depth, target) {\n  let node = ($end || $start).node(depth)\n  let startIndex = 0, endIndex = $end ? $end.index(depth) : node.childCount\n  if ($start) {\n    startIndex = $start.index(depth)\n    if ($start.depth > depth) {\n      startIndex++\n    } else if ($start.textOffset) {\n      addNode($start.nodeAfter, target)\n      startIndex++\n    }\n  }\n  for (let i = startIndex; i < endIndex; i++) addNode(node.child(i), target)\n  if ($end && $end.depth == depth && $end.textOffset)\n    addNode($end.nodeBefore, target)\n}\n\nfunction close(node, content) {\n  if (!node.type.validContent(content))\n    throw new ReplaceError(\"Invalid content for node \" + node.type.name)\n  return node.copy(content)\n}\n\nfunction replaceThreeWay($from, $start, $end, $to, depth) {\n  let openStart = $from.depth > depth && joinable($from, $start, depth + 1)\n  let openEnd = $to.depth > depth && joinable($end, $to, depth + 1)\n\n  let content = []\n  addRange(null, $from, depth, content)\n  if (openStart && openEnd && $start.index(depth) == $end.index(depth)) {\n    checkJoin(openStart, openEnd)\n    addNode(close(openStart, replaceThreeWay($from, $start, $end, $to, depth + 1)), content)\n  } else {\n    if (openStart)\n      addNode(close(openStart, replaceTwoWay($from, $start, depth + 1)), content)\n    addRange($start, $end, depth, content)\n    if (openEnd)\n      addNode(close(openEnd, replaceTwoWay($end, $to, depth + 1)), content)\n  }\n  addRange($to, null, depth, content)\n  return new Fragment(content)\n}\n\nfunction replaceTwoWay($from, $to, depth) {\n  let content = []\n  addRange(null, $from, depth, content)\n  if ($from.depth > depth) {\n    let type = joinable($from, $to, depth + 1)\n    addNode(close(type, replaceTwoWay($from, $to, depth + 1)), content)\n  }\n  addRange($to, null, depth, content)\n  return new Fragment(content)\n}\n\nfunction prepareSliceForReplace(slice, $along) {\n  let extra = $along.depth - slice.openStart, parent = $along.node(extra)\n  let node = parent.copy(slice.content)\n  for (let i = extra - 1; i >= 0; i--)\n    node = $along.node(i).copy(Fragment.from(node))\n  return {start: node.resolveNoCache(slice.openStart + extra),\n          end: node.resolveNoCache(node.content.size - slice.openEnd - extra)}\n}\n", "import {Mark} from \"./mark\"\n\n// ::- You can [_resolve_](#model.Node.resolve) a position to get more\n// information about it. Objects of this class represent such a\n// resolved position, providing various pieces of context information,\n// and some helper methods.\n//\n// Throughout this interface, methods that take an optional `depth`\n// parameter will interpret undefined as `this.depth` and negative\n// numbers as `this.depth + value`.\nexport class ResolvedPos {\n  constructor(pos, path, parentOffset) {\n    // :: number The position that was resolved.\n    this.pos = pos\n    this.path = path\n    // :: number\n    // The number of levels the parent node is from the root. If this\n    // position points directly into the root node, it is 0. If it\n    // points into a top-level paragraph, 1, and so on.\n    this.depth = path.length / 3 - 1\n    // :: number The offset this position has into its parent node.\n    this.parentOffset = parentOffset\n  }\n\n  resolveDepth(val) {\n    if (val == null) return this.depth\n    if (val < 0) return this.depth + val\n    return val\n  }\n\n  // :: Node\n  // The parent node that the position points into. Note that even if\n  // a position points into a text node, that node is not considered\n  // the parent\u2014text nodes are \u2018flat\u2019 in this model, and have no content.\n  get parent() { return this.node(this.depth) }\n\n  // :: Node\n  // The root node in which the position was resolved.\n  get doc() { return this.node(0) }\n\n  // :: (?number) \u2192 Node\n  // The ancestor node at the given level. `p.node(p.depth)` is the\n  // same as `p.parent`.\n  node(depth) { return this.path[this.resolveDepth(depth) * 3] }\n\n  // :: (?number) \u2192 number\n  // The index into the ancestor at the given level. If this points at\n  // the 3rd node in the 2nd paragraph on the top level, for example,\n  // `p.index(0)` is 1 and `p.index(1)` is 2.\n  index(depth) { return this.path[this.resolveDepth(depth) * 3 + 1] }\n\n  // :: (?number) \u2192 number\n  // The index pointing after this position into the ancestor at the\n  // given level.\n  indexAfter(depth) {\n    depth = this.resolveDepth(depth)\n    return this.index(depth) + (depth == this.depth && !this.textOffset ? 0 : 1)\n  }\n\n  // :: (?number) \u2192 number\n  // The (absolute) position at the start of the node at the given\n  // level.\n  start(depth) {\n    depth = this.resolveDepth(depth)\n    return depth == 0 ? 0 : this.path[depth * 3 - 1] + 1\n  }\n\n  // :: (?number) \u2192 number\n  // The (absolute) position at the end of the node at the given\n  // level.\n  end(depth) {\n    depth = this.resolveDepth(depth)\n    return this.start(depth) + this.node(depth).content.size\n  }\n\n  // :: (?number) \u2192 number\n  // The (absolute) position directly before the wrapping node at the\n  // given level, or, when `depth` is `this.depth + 1`, the original\n  // position.\n  before(depth) {\n    depth = this.resolveDepth(depth)\n    if (!depth) throw new RangeError(\"There is no position before the top-level node\")\n    return depth == this.depth + 1 ? this.pos : this.path[depth * 3 - 1]\n  }\n\n  // :: (?number) \u2192 number\n  // The (absolute) position directly after the wrapping node at the\n  // given level, or the original position when `depth` is `this.depth + 1`.\n  after(depth) {\n    depth = this.resolveDepth(depth)\n    if (!depth) throw new RangeError(\"There is no position after the top-level node\")\n    return depth == this.depth + 1 ? this.pos : this.path[depth * 3 - 1] + this.path[depth * 3].nodeSize\n  }\n\n  // :: number\n  // When this position points into a text node, this returns the\n  // distance between the position and the start of the text node.\n  // Will be zero for positions that point between nodes.\n  get textOffset() { return this.pos - this.path[this.path.length - 1] }\n\n  // :: ?Node\n  // Get the node directly after the position, if any. If the position\n  // points into a text node, only the part of that node after the\n  // position is returned.\n  get nodeAfter() {\n    let parent = this.parent, index = this.index(this.depth)\n    if (index == parent.childCount) return null\n    let dOff = this.pos - this.path[this.path.length - 1], child = parent.child(index)\n    return dOff ? parent.child(index).cut(dOff) : child\n  }\n\n  // :: ?Node\n  // Get the node directly before the position, if any. If the\n  // position points into a text node, only the part of that node\n  // before the position is returned.\n  get nodeBefore() {\n    let index = this.index(this.depth)\n    let dOff = this.pos - this.path[this.path.length - 1]\n    if (dOff) return this.parent.child(index).cut(0, dOff)\n    return index == 0 ? null : this.parent.child(index - 1)\n  }\n\n  // :: (number, ?number) \u2192 number\n  // Get the position at the given index in the parent node at the\n  // given depth (which defaults to `this.depth`).\n  posAtIndex(index, depth) {\n    depth = this.resolveDepth(depth)\n    let node = this.path[depth * 3], pos = depth == 0 ? 0 : this.path[depth * 3 - 1] + 1\n    for (let i = 0; i < index; i++) pos += node.child(i).nodeSize\n    return pos\n  }\n\n  // :: () \u2192 [Mark]\n  // Get the marks at this position, factoring in the surrounding\n  // marks' [`inclusive`](#model.MarkSpec.inclusive) property. If the\n  // position is at the start of a non-empty node, the marks of the\n  // node after it (if any) are returned.\n  marks() {\n    let parent = this.parent, index = this.index()\n\n    // In an empty parent, return the empty array\n    if (parent.content.size == 0) return Mark.none\n\n    // When inside a text node, just return the text node's marks\n    if (this.textOffset) return parent.child(index).marks\n\n    let main = parent.maybeChild(index - 1), other = parent.maybeChild(index)\n    // If the `after` flag is true of there is no node before, make\n    // the node after this position the main reference.\n    if (!main) { let tmp = main; main = other; other = tmp }\n\n    // Use all marks in the main node, except those that have\n    // `inclusive` set to false and are not present in the other node.\n    let marks = main.marks\n    for (var i = 0; i < marks.length; i++)\n      if (marks[i].type.spec.inclusive === false && (!other || !marks[i].isInSet(other.marks)))\n        marks = marks[i--].removeFromSet(marks)\n\n    return marks\n  }\n\n  // :: (ResolvedPos) \u2192 ?[Mark]\n  // Get the marks after the current position, if any, except those\n  // that are non-inclusive and not present at position `$end`. This\n  // is mostly useful for getting the set of marks to preserve after a\n  // deletion. Will return `null` if this position is at the end of\n  // its parent node or its parent node isn't a textblock (in which\n  // case no marks should be preserved).\n  marksAcross($end) {\n    let after = this.parent.maybeChild(this.index())\n    if (!after || !after.isInline) return null\n\n    let marks = after.marks, next = $end.parent.maybeChild($end.index())\n    for (var i = 0; i < marks.length; i++)\n      if (marks[i].type.spec.inclusive === false && (!next || !marks[i].isInSet(next.marks)))\n        marks = marks[i--].removeFromSet(marks)\n    return marks\n  }\n\n  // :: (number) \u2192 number\n  // The depth up to which this position and the given (non-resolved)\n  // position share the same parent nodes.\n  sharedDepth(pos) {\n    for (let depth = this.depth; depth > 0; depth--)\n      if (this.start(depth) <= pos && this.end(depth) >= pos) return depth\n    return 0\n  }\n\n  // :: (?ResolvedPos, ?(Node) \u2192 bool) \u2192 ?NodeRange\n  // Returns a range based on the place where this position and the\n  // given position diverge around block content. If both point into\n  // the same textblock, for example, a range around that textblock\n  // will be returned. If they point into different blocks, the range\n  // around those blocks in their shared ancestor is returned. You can\n  // pass in an optional predicate that will be called with a parent\n  // node to see if a range into that parent is acceptable.\n  blockRange(other = this, pred) {\n    if (other.pos < this.pos) return other.blockRange(this)\n    for (let d = this.depth - (this.parent.inlineContent || this.pos == other.pos ? 1 : 0); d >= 0; d--)\n      if (other.pos <= this.end(d) && (!pred || pred(this.node(d))))\n        return new NodeRange(this, other, d)\n  }\n\n  // :: (ResolvedPos) \u2192 bool\n  // Query whether the given position shares the same parent node.\n  sameParent(other) {\n    return this.pos - this.parentOffset == other.pos - other.parentOffset\n  }\n\n  // :: (ResolvedPos) \u2192 ResolvedPos\n  // Return the greater of this and the given position.\n  max(other) {\n    return other.pos > this.pos ? other : this\n  }\n\n  // :: (ResolvedPos) \u2192 ResolvedPos\n  // Return the smaller of this and the given position.\n  min(other) {\n    return other.pos < this.pos ? other : this\n  }\n\n  toString() {\n    let str = \"\"\n    for (let i = 1; i <= this.depth; i++)\n      str += (str ? \"/\" : \"\") + this.node(i).type.name + \"_\" + this.index(i - 1)\n    return str + \":\" + this.parentOffset\n  }\n\n  static resolve(doc, pos) {\n    if (!(pos >= 0 && pos <= doc.content.size)) throw new RangeError(\"Position \" + pos + \" out of range\")\n    let path = []\n    let start = 0, parentOffset = pos\n    for (let node = doc;;) {\n      let {index, offset} = node.content.findIndex(parentOffset)\n      let rem = parentOffset - offset\n      path.push(node, index, start + offset)\n      if (!rem) break\n      node = node.child(index)\n      if (node.isText) break\n      parentOffset = rem - 1\n      start += offset + 1\n    }\n    return new ResolvedPos(pos, path, parentOffset)\n  }\n\n  static resolveCached(doc, pos) {\n    for (let i = 0; i < resolveCache.length; i++) {\n      let cached = resolveCache[i]\n      if (cached.pos == pos && cached.doc == doc) return cached\n    }\n    let result = resolveCache[resolveCachePos] = ResolvedPos.resolve(doc, pos)\n    resolveCachePos = (resolveCachePos + 1) % resolveCacheSize\n    return result\n  }\n}\n\nlet resolveCache = [], resolveCachePos = 0, resolveCacheSize = 12\n\n// ::- Represents a flat range of content, i.e. one that starts and\n// ends in the same node.\nexport class NodeRange {\n  // :: (ResolvedPos, ResolvedPos, number)\n  // Construct a node range. `$from` and `$to` should point into the\n  // same node until at least the given `depth`, since a node range\n  // denotes an adjacent set of nodes in a single parent node.\n  constructor($from, $to, depth) {\n    // :: ResolvedPos A resolved position along the start of the\n    // content. May have a `depth` greater than this object's `depth`\n    // property, since these are the positions that were used to\n    // compute the range, not re-resolved positions directly at its\n    // boundaries.\n    this.$from = $from\n    // :: ResolvedPos A position along the end of the content. See\n    // caveat for [`$from`](#model.NodeRange.$from).\n    this.$to = $to\n    // :: number The depth of the node that this range points into.\n    this.depth = depth\n  }\n\n  // :: number The position at the start of the range.\n  get start() { return this.$from.before(this.depth + 1) }\n  // :: number The position at the end of the range.\n  get end() { return this.$to.after(this.depth + 1) }\n\n  // :: Node The parent node that the range points into.\n  get parent() { return this.$from.node(this.depth) }\n  // :: number The start index of the range in the parent node.\n  get startIndex() { return this.$from.index(this.depth) }\n  // :: number The end index of the range in the parent node.\n  get endIndex() { return this.$to.indexAfter(this.depth) }\n}\n", "import {Fragment} from \"./fragment\"\nimport {Mark} from \"./mark\"\nimport {Slice, replace} from \"./replace\"\nimport {ResolvedPos} from \"./resolvedpos\"\nimport {compareDeep} from \"./comparedeep\"\n\nconst emptyAttrs = Object.create(null)\n\n// ::- This class represents a node in the tree that makes up a\n// ProseMirror document. So a document is an instance of `Node`, with\n// children that are also instances of `Node`.\n//\n// Nodes are persistent data structures. Instead of changing them, you\n// create new ones with the content you want. Old ones keep pointing\n// at the old document shape. This is made cheaper by sharing\n// structure between the old and new data as much as possible, which a\n// tree shape like this (without back pointers) makes easy.\n//\n// **Do not** directly mutate the properties of a `Node` object. See\n// [the guide](/docs/guide/#doc) for more information.\nexport class Node {\n  constructor(type, attrs, content, marks) {\n    // :: NodeType\n    // The type of node that this is.\n    this.type = type\n\n    // :: Object\n    // An object mapping attribute names to values. The kind of\n    // attributes allowed and required are\n    // [determined](#model.NodeSpec.attrs) by the node type.\n    this.attrs = attrs\n\n    // :: Fragment\n    // A container holding the node's children.\n    this.content = content || Fragment.empty\n\n    // :: [Mark]\n    // The marks (things like whether it is emphasized or part of a\n    // link) applied to this node.\n    this.marks = marks || Mark.none\n  }\n\n  // text:: ?string\n  // For text nodes, this contains the node's text content.\n\n  // :: number\n  // The size of this node, as defined by the integer-based [indexing\n  // scheme](/docs/guide/#doc.indexing). For text nodes, this is the\n  // amount of characters. For other leaf nodes, it is one. For\n  // non-leaf nodes, it is the size of the content plus two (the start\n  // and end token).\n  get nodeSize() { return this.isLeaf ? 1 : 2 + this.content.size }\n\n  // :: number\n  // The number of children that the node has.\n  get childCount() { return this.content.childCount }\n\n  // :: (number) \u2192 Node\n  // Get the child node at the given index. Raises an error when the\n  // index is out of range.\n  child(index) { return this.content.child(index) }\n\n  // :: (number) \u2192 ?Node\n  // Get the child node at the given index, if it exists.\n  maybeChild(index) { return this.content.maybeChild(index) }\n\n  // :: ((node: Node, offset: number, index: number))\n  // Call `f` for every child node, passing the node, its offset\n  // into this parent node, and its index.\n  forEach(f) { this.content.forEach(f) }\n\n  // :: (number, number, (node: Node, pos: number, parent: Node, index: number) \u2192 ?bool, ?number)\n  // Invoke a callback for all descendant nodes recursively between\n  // the given two positions that are relative to start of this node's\n  // content. The callback is invoked with the node, its\n  // parent-relative position, its parent node, and its child index.\n  // When the callback returns false for a given node, that node's\n  // children will not be recursed over. The last parameter can be\n  // used to specify a starting position to count from.\n  nodesBetween(from, to, f, startPos = 0) {\n    this.content.nodesBetween(from, to, f, startPos, this)\n  }\n\n  // :: ((node: Node, pos: number, parent: Node, index: number) \u2192 ?bool)\n  // Call the given callback for every descendant node. Doesn't\n  // descend into a node when the callback returns `false`.\n  descendants(f) {\n    this.nodesBetween(0, this.content.size, f)\n  }\n\n  // :: string\n  // Concatenates all the text nodes found in this fragment and its\n  // children.\n  get textContent() { return this.textBetween(0, this.content.size, \"\") }\n\n  // :: (number, number, ?string, ?union<string, ?(leafNode: Node) -> string>) \u2192 string\n  // Get all text between positions `from` and `to`. When\n  // `blockSeparator` is given, it will be inserted to separate text\n  // from different block nodes. When `leafText` is given, it'll be\n  // inserted for every non-text leaf node encountered.\n  textBetween(from, to, blockSeparator, leafText) {\n    return this.content.textBetween(from, to, blockSeparator, leafText)\n  }\n\n  // :: ?Node\n  // Returns this node's first child, or `null` if there are no\n  // children.\n  get firstChild() { return this.content.firstChild }\n\n  // :: ?Node\n  // Returns this node's last child, or `null` if there are no\n  // children.\n  get lastChild() { return this.content.lastChild }\n\n  // :: (Node) \u2192 bool\n  // Test whether two nodes represent the same piece of document.\n  eq(other) {\n    return this == other || (this.sameMarkup(other) && this.content.eq(other.content))\n  }\n\n  // :: (Node) \u2192 bool\n  // Compare the markup (type, attributes, and marks) of this node to\n  // those of another. Returns `true` if both have the same markup.\n  sameMarkup(other) {\n    return this.hasMarkup(other.type, other.attrs, other.marks)\n  }\n\n  // :: (NodeType, ?Object, ?[Mark]) \u2192 bool\n  // Check whether this node's markup correspond to the given type,\n  // attributes, and marks.\n  hasMarkup(type, attrs, marks) {\n    return this.type == type &&\n      compareDeep(this.attrs, attrs || type.defaultAttrs || emptyAttrs) &&\n      Mark.sameSet(this.marks, marks || Mark.none)\n  }\n\n  // :: (?Fragment) \u2192 Node\n  // Create a new node with the same markup as this node, containing\n  // the given content (or empty, if no content is given).\n  copy(content = null) {\n    if (content == this.content) return this\n    return new this.constructor(this.type, this.attrs, content, this.marks)\n  }\n\n  // :: ([Mark]) \u2192 Node\n  // Create a copy of this node, with the given set of marks instead\n  // of the node's own marks.\n  mark(marks) {\n    return marks == this.marks ? this : new this.constructor(this.type, this.attrs, this.content, marks)\n  }\n\n  // :: (number, ?number) \u2192 Node\n  // Create a copy of this node with only the content between the\n  // given positions. If `to` is not given, it defaults to the end of\n  // the node.\n  cut(from, to) {\n    if (from == 0 && to == this.content.size) return this\n    return this.copy(this.content.cut(from, to))\n  }\n\n  // :: (number, ?number) \u2192 Slice\n  // Cut out the part of the document between the given positions, and\n  // return it as a `Slice` object.\n  slice(from, to = this.content.size, includeParents = false) {\n    if (from == to) return Slice.empty\n\n    let $from = this.resolve(from), $to = this.resolve(to)\n    let depth = includeParents ? 0 : $from.sharedDepth(to)\n    let start = $from.start(depth), node = $from.node(depth)\n    let content = node.content.cut($from.pos - start, $to.pos - start)\n    return new Slice(content, $from.depth - depth, $to.depth - depth)\n  }\n\n  // :: (number, number, Slice) \u2192 Node\n  // Replace the part of the document between the given positions with\n  // the given slice. The slice must 'fit', meaning its open sides\n  // must be able to connect to the surrounding content, and its\n  // content nodes must be valid children for the node they are placed\n  // into. If any of this is violated, an error of type\n  // [`ReplaceError`](#model.ReplaceError) is thrown.\n  replace(from, to, slice) {\n    return replace(this.resolve(from), this.resolve(to), slice)\n  }\n\n  // :: (number) \u2192 ?Node\n  // Find the node directly after the given position.\n  nodeAt(pos) {\n    for (let node = this;;) {\n      let {index, offset} = node.content.findIndex(pos)\n      node = node.maybeChild(index)\n      if (!node) return null\n      if (offset == pos || node.isText) return node\n      pos -= offset + 1\n    }\n  }\n\n  // :: (number) \u2192 {node: ?Node, index: number, offset: number}\n  // Find the (direct) child node after the given offset, if any,\n  // and return it along with its index and offset relative to this\n  // node.\n  childAfter(pos) {\n    let {index, offset} = this.content.findIndex(pos)\n    return {node: this.content.maybeChild(index), index, offset}\n  }\n\n  // :: (number) \u2192 {node: ?Node, index: number, offset: number}\n  // Find the (direct) child node before the given offset, if any,\n  // and return it along with its index and offset relative to this\n  // node.\n  childBefore(pos) {\n    if (pos == 0) return {node: null, index: 0, offset: 0}\n    let {index, offset} = this.content.findIndex(pos)\n    if (offset < pos) return {node: this.content.child(index), index, offset}\n    let node = this.content.child(index - 1)\n    return {node, index: index - 1, offset: offset - node.nodeSize}\n  }\n\n  // :: (number) \u2192 ResolvedPos\n  // Resolve the given position in the document, returning an\n  // [object](#model.ResolvedPos) with information about its context.\n  resolve(pos) { return ResolvedPos.resolveCached(this, pos) }\n\n  resolveNoCache(pos) { return ResolvedPos.resolve(this, pos) }\n\n  // :: (number, number, union<Mark, MarkType>) \u2192 bool\n  // Test whether a given mark or mark type occurs in this document\n  // between the two given positions.\n  rangeHasMark(from, to, type) {\n    let found = false\n    if (to > from) this.nodesBetween(from, to, node => {\n      if (type.isInSet(node.marks)) found = true\n      return !found\n    })\n    return found\n  }\n\n  // :: bool\n  // True when this is a block (non-inline node)\n  get isBlock() { return this.type.isBlock }\n\n  // :: bool\n  // True when this is a textblock node, a block node with inline\n  // content.\n  get isTextblock() { return this.type.isTextblock }\n\n  // :: bool\n  // True when this node allows inline content.\n  get inlineContent() { return this.type.inlineContent }\n\n  // :: bool\n  // True when this is an inline node (a text node or a node that can\n  // appear among text).\n  get isInline() { return this.type.isInline }\n\n  // :: bool\n  // True when this is a text node.\n  get isText() { return this.type.isText }\n\n  // :: bool\n  // True when this is a leaf node.\n  get isLeaf() { return this.type.isLeaf }\n\n  // :: bool\n  // True when this is an atom, i.e. when it does not have directly\n  // editable content. This is usually the same as `isLeaf`, but can\n  // be configured with the [`atom` property](#model.NodeSpec.atom) on\n  // a node's spec (typically used when the node is displayed as an\n  // uneditable [node view](#view.NodeView)).\n  get isAtom() { return this.type.isAtom }\n\n  // :: () \u2192 string\n  // Return a string representation of this node for debugging\n  // purposes.\n  toString() {\n    if (this.type.spec.toDebugString) return this.type.spec.toDebugString(this)\n    let name = this.type.name\n    if (this.content.size)\n      name += \"(\" + this.content.toStringInner() + \")\"\n    return wrapMarks(this.marks, name)\n  }\n\n  // :: (number) \u2192 ContentMatch\n  // Get the content match in this node at the given index.\n  contentMatchAt(index) {\n    let match = this.type.contentMatch.matchFragment(this.content, 0, index)\n    if (!match) throw new Error(\"Called contentMatchAt on a node with invalid content\")\n    return match\n  }\n\n  // :: (number, number, ?Fragment, ?number, ?number) \u2192 bool\n  // Test whether replacing the range between `from` and `to` (by\n  // child index) with the given replacement fragment (which defaults\n  // to the empty fragment) would leave the node's content valid. You\n  // can optionally pass `start` and `end` indices into the\n  // replacement fragment.\n  canReplace(from, to, replacement = Fragment.empty, start = 0, end = replacement.childCount) {\n    let one = this.contentMatchAt(from).matchFragment(replacement, start, end)\n    let two = one && one.matchFragment(this.content, to)\n    if (!two || !two.validEnd) return false\n    for (let i = start; i < end; i++) if (!this.type.allowsMarks(replacement.child(i).marks)) return false\n    return true\n  }\n\n  // :: (number, number, NodeType, ?[Mark]) \u2192 bool\n  // Test whether replacing the range `from` to `to` (by index) with a\n  // node of the given type would leave the node's content valid.\n  canReplaceWith(from, to, type, marks) {\n    if (marks && !this.type.allowsMarks(marks)) return false\n    let start = this.contentMatchAt(from).matchType(type)\n    let end = start && start.matchFragment(this.content, to)\n    return end ? end.validEnd : false\n  }\n\n  // :: (Node) \u2192 bool\n  // Test whether the given node's content could be appended to this\n  // node. If that node is empty, this will only return true if there\n  // is at least one node type that can appear in both nodes (to avoid\n  // merging completely incompatible nodes).\n  canAppend(other) {\n    if (other.content.size) return this.canReplace(this.childCount, this.childCount, other.content)\n    else return this.type.compatibleContent(other.type)\n  }\n\n  // :: ()\n  // Check whether this node and its descendants conform to the\n  // schema, and raise error when they do not.\n  check() {\n    if (!this.type.validContent(this.content))\n      throw new RangeError(`Invalid content for node ${this.type.name}: ${this.content.toString().slice(0, 50)}`)\n    let copy = Mark.none\n    for (let i = 0; i < this.marks.length; i++) copy = this.marks[i].addToSet(copy)\n    if (!Mark.sameSet(copy, this.marks))\n      throw new RangeError(`Invalid collection of marks for node ${this.type.name}: ${this.marks.map(m => m.type.name)}`)\n    this.content.forEach(node => node.check())\n  }\n\n  // :: () \u2192 Object\n  // Return a JSON-serializeable representation of this node.\n  toJSON() {\n    let obj = {type: this.type.name}\n    for (let _ in this.attrs) {\n      obj.attrs = this.attrs\n      break\n    }\n    if (this.content.size)\n      obj.content = this.content.toJSON()\n    if (this.marks.length)\n      obj.marks = this.marks.map(n => n.toJSON())\n    return obj\n  }\n\n  // :: (Schema, Object) \u2192 Node\n  // Deserialize a node from its JSON representation.\n  static fromJSON(schema, json) {\n    if (!json) throw new RangeError(\"Invalid input for Node.fromJSON\")\n    let marks = null\n    if (json.marks) {\n      if (!Array.isArray(json.marks)) throw new RangeError(\"Invalid mark data for Node.fromJSON\")\n      marks = json.marks.map(schema.markFromJSON)\n    }\n    if (json.type == \"text\") {\n      if (typeof json.text != \"string\") throw new RangeError(\"Invalid text node in JSON\")\n      return schema.text(json.text, marks)\n    }\n    let content = Fragment.fromJSON(schema, json.content)\n    return schema.nodeType(json.type).create(json.attrs, content, marks)\n  }\n}\n\nexport class TextNode extends Node {\n  constructor(type, attrs, content, marks) {\n    super(type, attrs, null, marks)\n\n    if (!content) throw new RangeError(\"Empty text nodes are not allowed\")\n\n    this.text = content\n  }\n\n  toString() {\n    if (this.type.spec.toDebugString) return this.type.spec.toDebugString(this)\n    return wrapMarks(this.marks, JSON.stringify(this.text))\n  }\n\n  get textContent() { return this.text }\n\n  textBetween(from, to) { return this.text.slice(from, to) }\n\n  get nodeSize() { return this.text.length }\n\n  mark(marks) {\n    return marks == this.marks ? this : new TextNode(this.type, this.attrs, this.text, marks)\n  }\n\n  withText(text) {\n    if (text == this.text) return this\n    return new TextNode(this.type, this.attrs, text, this.marks)\n  }\n\n  cut(from = 0, to = this.text.length) {\n    if (from == 0 && to == this.text.length) return this\n    return this.withText(this.text.slice(from, to))\n  }\n\n  eq(other) {\n    return this.sameMarkup(other) && this.text == other.text\n  }\n\n  toJSON() {\n    let base = super.toJSON()\n    base.text = this.text\n    return base\n  }\n}\n\nfunction wrapMarks(marks, str) {\n  for (let i = marks.length - 1; i >= 0; i--)\n    str = marks[i].type.name + \"(\" + str + \")\"\n  return str\n}\n", "import {Fragment} from \"./fragment\"\n\n// ::- Instances of this class represent a match state of a node\n// type's [content expression](#model.NodeSpec.content), and can be\n// used to find out whether further content matches here, and whether\n// a given position is a valid end of the node.\nexport class ContentMatch {\n  constructor(validEnd) {\n    // :: bool\n    // True when this match state represents a valid end of the node.\n    this.validEnd = validEnd\n    this.next = []\n    this.wrapCache = []\n  }\n\n  static parse(string, nodeTypes) {\n    let stream = new TokenStream(string, nodeTypes)\n    if (stream.next == null) return ContentMatch.empty\n    let expr = parseExpr(stream)\n    if (stream.next) stream.err(\"Unexpected trailing text\")\n    let match = dfa(nfa(expr))\n    checkForDeadEnds(match, stream)\n    return match\n  }\n\n  // :: (NodeType) \u2192 ?ContentMatch\n  // Match a node type, returning a match after that node if\n  // successful.\n  matchType(type) {\n    for (let i = 0; i < this.next.length; i += 2)\n      if (this.next[i] == type) return this.next[i + 1]\n    return null\n  }\n\n  // :: (Fragment, ?number, ?number) \u2192 ?ContentMatch\n  // Try to match a fragment. Returns the resulting match when\n  // successful.\n  matchFragment(frag, start = 0, end = frag.childCount) {\n    let cur = this\n    for (let i = start; cur && i < end; i++)\n      cur = cur.matchType(frag.child(i).type)\n    return cur\n  }\n\n  get inlineContent() {\n    let first = this.next[0]\n    return first ? first.isInline : false\n  }\n\n  // :: ?NodeType\n  // Get the first matching node type at this match position that can\n  // be generated.\n  get defaultType() {\n    for (let i = 0; i < this.next.length; i += 2) {\n      let type = this.next[i]\n      if (!(type.isText || type.hasRequiredAttrs())) return type\n    }\n  }\n\n  compatible(other) {\n    for (let i = 0; i < this.next.length; i += 2)\n      for (let j = 0; j < other.next.length; j += 2)\n        if (this.next[i] == other.next[j]) return true\n    return false\n  }\n\n  // :: (Fragment, bool, ?number) \u2192 ?Fragment\n  // Try to match the given fragment, and if that fails, see if it can\n  // be made to match by inserting nodes in front of it. When\n  // successful, return a fragment of inserted nodes (which may be\n  // empty if nothing had to be inserted). When `toEnd` is true, only\n  // return a fragment if the resulting match goes to the end of the\n  // content expression.\n  fillBefore(after, toEnd = false, startIndex = 0) {\n    let seen = [this]\n    function search(match, types) {\n      let finished = match.matchFragment(after, startIndex)\n      if (finished && (!toEnd || finished.validEnd))\n        return Fragment.from(types.map(tp => tp.createAndFill()))\n\n      for (let i = 0; i < match.next.length; i += 2) {\n        let type = match.next[i], next = match.next[i + 1]\n        if (!(type.isText || type.hasRequiredAttrs()) && seen.indexOf(next) == -1) {\n          seen.push(next)\n          let found = search(next, types.concat(type))\n          if (found) return found\n        }\n      }\n    }\n\n    return search(this, [])\n  }\n\n  // :: (NodeType) \u2192 ?[NodeType]\n  // Find a set of wrapping node types that would allow a node of the\n  // given type to appear at this position. The result may be empty\n  // (when it fits directly) and will be null when no such wrapping\n  // exists.\n  findWrapping(target) {\n    for (let i = 0; i < this.wrapCache.length; i += 2)\n      if (this.wrapCache[i] == target) return this.wrapCache[i + 1]\n    let computed = this.computeWrapping(target)\n    this.wrapCache.push(target, computed)\n    return computed\n  }\n\n  computeWrapping(target) {\n    let seen = Object.create(null), active = [{match: this, type: null, via: null}]\n    while (active.length) {\n      let current = active.shift(), match = current.match\n      if (match.matchType(target)) {\n        let result = []\n        for (let obj = current; obj.type; obj = obj.via)\n          result.push(obj.type)\n        return result.reverse()\n      }\n      for (let i = 0; i < match.next.length; i += 2) {\n        let type = match.next[i]\n        if (!type.isLeaf && !type.hasRequiredAttrs() && !(type.name in seen) && (!current.type || match.next[i + 1].validEnd)) {\n          active.push({match: type.contentMatch, type, via: current})\n          seen[type.name] = true\n        }\n      }\n    }\n  }\n\n  // :: number\n  // The number of outgoing edges this node has in the finite\n  // automaton that describes the content expression.\n  get edgeCount() {\n    return this.next.length >> 1\n  }\n\n  // :: (number) \u2192 {type: NodeType, next: ContentMatch}\n  // Get the _n_\u200Bth outgoing edge from this node in the finite\n  // automaton that describes the content expression.\n  edge(n) {\n    let i = n << 1\n    if (i >= this.next.length) throw new RangeError(`There's no ${n}th edge in this content match`)\n    return {type: this.next[i], next: this.next[i + 1]}\n  }\n\n  toString() {\n    let seen = []\n    function scan(m) {\n      seen.push(m)\n      for (let i = 1; i < m.next.length; i += 2)\n        if (seen.indexOf(m.next[i]) == -1) scan(m.next[i])\n    }\n    scan(this)\n    return seen.map((m, i) => {\n      let out = i + (m.validEnd ? \"*\" : \" \") + \" \"\n      for (let i = 0; i < m.next.length; i += 2)\n        out += (i ? \", \" : \"\") + m.next[i].name + \"->\" + seen.indexOf(m.next[i + 1])\n      return out\n    }).join(\"\\n\")\n  }\n}\n\nContentMatch.empty = new ContentMatch(true)\n\nclass TokenStream {\n  constructor(string, nodeTypes) {\n    this.string = string\n    this.nodeTypes = nodeTypes\n    this.inline = null\n    this.pos = 0\n    this.tokens = string.split(/\\s*(?=\\b|\\W|$)/)\n    if (this.tokens[this.tokens.length - 1] == \"\") this.tokens.pop()\n    if (this.tokens[0] == \"\") this.tokens.shift()\n  }\n\n  get next() { return this.tokens[this.pos] }\n\n  eat(tok) { return this.next == tok && (this.pos++ || true) }\n\n  err(str) { throw new SyntaxError(str + \" (in content expression '\" + this.string + \"')\") }\n}\n\nfunction parseExpr(stream) {\n  let exprs = []\n  do { exprs.push(parseExprSeq(stream)) }\n  while (stream.eat(\"|\"))\n  return exprs.length == 1 ? exprs[0] : {type: \"choice\", exprs}\n}\n\nfunction parseExprSeq(stream) {\n  let exprs = []\n  do { exprs.push(parseExprSubscript(stream)) }\n  while (stream.next && stream.next != \")\" && stream.next != \"|\")\n  return exprs.length == 1 ? exprs[0] : {type: \"seq\", exprs}\n}\n\nfunction parseExprSubscript(stream) {\n  let expr = parseExprAtom(stream)\n  for (;;) {\n    if (stream.eat(\"+\"))\n      expr = {type: \"plus\", expr}\n    else if (stream.eat(\"*\"))\n      expr = {type: \"star\", expr}\n    else if (stream.eat(\"?\"))\n      expr = {type: \"opt\", expr}\n    else if (stream.eat(\"{\"))\n      expr = parseExprRange(stream, expr)\n    else break\n  }\n  return expr\n}\n\nfunction parseNum(stream) {\n  if (/\\D/.test(stream.next)) stream.err(\"Expected number, got '\" + stream.next + \"'\")\n  let result = Number(stream.next)\n  stream.pos++\n  return result\n}\n\nfunction parseExprRange(stream, expr) {\n  let min = parseNum(stream), max = min\n  if (stream.eat(\",\")) {\n    if (stream.next != \"}\") max = parseNum(stream)\n    else max = -1\n  }\n  if (!stream.eat(\"}\")) stream.err(\"Unclosed braced range\")\n  return {type: \"range\", min, max, expr}\n}\n\nfunction resolveName(stream, name) {\n  let types = stream.nodeTypes, type = types[name]\n  if (type) return [type]\n  let result = []\n  for (let typeName in types) {\n    let type = types[typeName]\n    if (type.groups.indexOf(name) > -1) result.push(type)\n  }\n  if (result.length == 0) stream.err(\"No node type or group '\" + name + \"' found\")\n  return result\n}\n\nfunction parseExprAtom(stream) {\n  if (stream.eat(\"(\")) {\n    let expr = parseExpr(stream)\n    if (!stream.eat(\")\")) stream.err(\"Missing closing paren\")\n    return expr\n  } else if (!/\\W/.test(stream.next)) {\n    let exprs = resolveName(stream, stream.next).map(type => {\n      if (stream.inline == null) stream.inline = type.isInline\n      else if (stream.inline != type.isInline) stream.err(\"Mixing inline and block content\")\n      return {type: \"name\", value: type}\n    })\n    stream.pos++\n    return exprs.length == 1 ? exprs[0] : {type: \"choice\", exprs}\n  } else {\n    stream.err(\"Unexpected token '\" + stream.next + \"'\")\n  }\n}\n\n// The code below helps compile a regular-expression-like language\n// into a deterministic finite automaton. For a good introduction to\n// these concepts, see https://swtch.com/~rsc/regexp/regexp1.html\n\n// : (Object) \u2192 [[{term: ?any, to: number}]]\n// Construct an NFA from an expression as returned by the parser. The\n// NFA is represented as an array of states, which are themselves\n// arrays of edges, which are `{term, to}` objects. The first state is\n// the entry state and the last node is the success state.\n//\n// Note that unlike typical NFAs, the edge ordering in this one is\n// significant, in that it is used to contruct filler content when\n// necessary.\nfunction nfa(expr) {\n  let nfa = [[]]\n  connect(compile(expr, 0), node())\n  return nfa\n\n  function node() { return nfa.push([]) - 1 }\n  function edge(from, to, term) {\n    let edge = {term, to}\n    nfa[from].push(edge)\n    return edge\n  }\n  function connect(edges, to) { edges.forEach(edge => edge.to = to) }\n\n  function compile(expr, from) {\n    if (expr.type == \"choice\") {\n      return expr.exprs.reduce((out, expr) => out.concat(compile(expr, from)), [])\n    } else if (expr.type == \"seq\") {\n      for (let i = 0;; i++) {\n        let next = compile(expr.exprs[i], from)\n        if (i == expr.exprs.length - 1) return next\n        connect(next, from = node())\n      }\n    } else if (expr.type == \"star\") {\n      let loop = node()\n      edge(from, loop)\n      connect(compile(expr.expr, loop), loop)\n      return [edge(loop)]\n    } else if (expr.type == \"plus\") {\n      let loop = node()\n      connect(compile(expr.expr, from), loop)\n      connect(compile(expr.expr, loop), loop)\n      return [edge(loop)]\n    } else if (expr.type == \"opt\") {\n      return [edge(from)].concat(compile(expr.expr, from))\n    } else if (expr.type == \"range\") {\n      let cur = from\n      for (let i = 0; i < expr.min; i++) {\n        let next = node()\n        connect(compile(expr.expr, cur), next)\n        cur = next\n      }\n      if (expr.max == -1) {\n        connect(compile(expr.expr, cur), cur)\n      } else {\n        for (let i = expr.min; i < expr.max; i++) {\n          let next = node()\n          edge(cur, next)\n          connect(compile(expr.expr, cur), next)\n          cur = next\n        }\n      }\n      return [edge(cur)]\n    } else if (expr.type == \"name\") {\n      return [edge(from, null, expr.value)]\n    }\n  }\n}\n\nfunction cmp(a, b) { return b - a }\n\n// Get the set of nodes reachable by null edges from `node`. Omit\n// nodes with only a single null-out-edge, since they may lead to\n// needless duplicated nodes.\nfunction nullFrom(nfa, node) {\n  let result = []\n  scan(node)\n  return result.sort(cmp)\n\n  function scan(node) {\n    let edges = nfa[node]\n    if (edges.length == 1 && !edges[0].term) return scan(edges[0].to)\n    result.push(node)\n    for (let i = 0; i < edges.length; i++) {\n      let {term, to} = edges[i]\n      if (!term && result.indexOf(to) == -1) scan(to)\n    }\n  }\n}\n\n// : ([[{term: ?any, to: number}]]) \u2192 ContentMatch\n// Compiles an NFA as produced by `nfa` into a DFA, modeled as a set\n// of state objects (`ContentMatch` instances) with transitions\n// between them.\nfunction dfa(nfa) {\n  let labeled = Object.create(null)\n  return explore(nullFrom(nfa, 0))\n\n  function explore(states) {\n    let out = []\n    states.forEach(node => {\n      nfa[node].forEach(({term, to}) => {\n        if (!term) return\n        let known = out.indexOf(term), set = known > -1 && out[known + 1]\n        nullFrom(nfa, to).forEach(node => {\n          if (!set) out.push(term, set = [])\n          if (set.indexOf(node) == -1) set.push(node)\n        })\n      })\n    })\n    let state = labeled[states.join(\",\")] = new ContentMatch(states.indexOf(nfa.length - 1) > -1)\n    for (let i = 0; i < out.length; i += 2) {\n      let states = out[i + 1].sort(cmp)\n      state.next.push(out[i], labeled[states.join(\",\")] || explore(states))\n    }\n    return state\n  }\n}\n\nfunction checkForDeadEnds(match, stream) {\n  for (let i = 0, work = [match]; i < work.length; i++) {\n    let state = work[i], dead = !state.validEnd, nodes = []\n    for (let j = 0; j < state.next.length; j += 2) {\n      let node = state.next[j], next = state.next[j + 1]\n      nodes.push(node.name)\n      if (dead && !(node.isText || node.hasRequiredAttrs())) dead = false\n      if (work.indexOf(next) == -1) work.push(next)\n    }\n    if (dead) stream.err(\"Only non-generatable nodes (\" + nodes.join(\", \") + \") in a required position (see https://prosemirror.net/docs/guide/#generatable)\")\n  }\n}\n", "import OrderedMap from \"orderedmap\"\n\nimport {Node, TextNode} from \"./node\"\nimport {Fragment} from \"./fragment\"\nimport {Mark} from \"./mark\"\nimport {ContentMatch} from \"./content\"\n\n// For node types where all attrs have a default value (or which don't\n// have any attributes), build up a single reusable default attribute\n// object, and use it for all nodes that don't specify specific\n// attributes.\nfunction defaultAttrs(attrs) {\n  let defaults = Object.create(null)\n  for (let attrName in attrs) {\n    let attr = attrs[attrName]\n    if (!attr.hasDefault) return null\n    defaults[attrName] = attr.default\n  }\n  return defaults\n}\n\nfunction computeAttrs(attrs, value) {\n  let built = Object.create(null)\n  for (let name in attrs) {\n    let given = value && value[name]\n    if (given === undefined) {\n      let attr = attrs[name]\n      if (attr.hasDefault) given = attr.default\n      else throw new RangeError(\"No value supplied for attribute \" + name)\n    }\n    built[name] = given\n  }\n  return built\n}\n\nfunction initAttrs(attrs) {\n  let result = Object.create(null)\n  if (attrs) for (let name in attrs) result[name] = new Attribute(attrs[name])\n  return result\n}\n\n// ::- Node types are objects allocated once per `Schema` and used to\n// [tag](#model.Node.type) `Node` instances. They contain information\n// about the node type, such as its name and what kind of node it\n// represents.\nexport class NodeType {\n  constructor(name, schema, spec) {\n    // :: string\n    // The name the node type has in this schema.\n    this.name = name\n\n    // :: Schema\n    // A link back to the `Schema` the node type belongs to.\n    this.schema = schema\n\n    // :: NodeSpec\n    // The spec that this type is based on\n    this.spec = spec\n\n    this.groups = spec.group ? spec.group.split(\" \") : []\n    this.attrs = initAttrs(spec.attrs)\n\n    this.defaultAttrs = defaultAttrs(this.attrs)\n\n    // :: ContentMatch\n    // The starting match of the node type's content expression.\n    this.contentMatch = null\n\n    // : ?[MarkType]\n    // The set of marks allowed in this node. `null` means all marks\n    // are allowed.\n    this.markSet = null\n\n    // :: bool\n    // True if this node type has inline content.\n    this.inlineContent = null\n\n    // :: bool\n    // True if this is a block type\n    this.isBlock = !(spec.inline || name == \"text\")\n\n    // :: bool\n    // True if this is the text node type.\n    this.isText = name == \"text\"\n  }\n\n  // :: bool\n  // True if this is an inline type.\n  get isInline() { return !this.isBlock }\n\n  // :: bool\n  // True if this is a textblock type, a block that contains inline\n  // content.\n  get isTextblock() { return this.isBlock && this.inlineContent }\n\n  // :: bool\n  // True for node types that allow no content.\n  get isLeaf() { return this.contentMatch == ContentMatch.empty }\n\n  // :: bool\n  // True when this node is an atom, i.e. when it does not have\n  // directly editable content.\n  get isAtom() { return this.isLeaf || this.spec.atom }\n\n  // :: union<\"pre\", \"normal\">\n  // The node type's [whitespace](#view.NodeSpec.whitespace) option.\n  get whitespace() { return this.spec.whitespace || (this.spec.code ? \"pre\" : \"normal\") }\n\n  // :: () \u2192 bool\n  // Tells you whether this node type has any required attributes.\n  hasRequiredAttrs() {\n    for (let n in this.attrs) if (this.attrs[n].isRequired) return true\n    return false\n  }\n\n  compatibleContent(other) {\n    return this == other || this.contentMatch.compatible(other.contentMatch)\n  }\n\n  computeAttrs(attrs) {\n    if (!attrs && this.defaultAttrs) return this.defaultAttrs\n    else return computeAttrs(this.attrs, attrs)\n  }\n\n  // :: (?Object, ?union<Fragment, Node, [Node]>, ?[Mark]) \u2192 Node\n  // Create a `Node` of this type. The given attributes are\n  // checked and defaulted (you can pass `null` to use the type's\n  // defaults entirely, if no required attributes exist). `content`\n  // may be a `Fragment`, a node, an array of nodes, or\n  // `null`. Similarly `marks` may be `null` to default to the empty\n  // set of marks.\n  create(attrs, content, marks) {\n    if (this.isText) throw new Error(\"NodeType.create can't construct text nodes\")\n    return new Node(this, this.computeAttrs(attrs), Fragment.from(content), Mark.setFrom(marks))\n  }\n\n  // :: (?Object, ?union<Fragment, Node, [Node]>, ?[Mark]) \u2192 Node\n  // Like [`create`](#model.NodeType.create), but check the given content\n  // against the node type's content restrictions, and throw an error\n  // if it doesn't match.\n  createChecked(attrs, content, marks) {\n    content = Fragment.from(content)\n    if (!this.validContent(content))\n      throw new RangeError(\"Invalid content for node \" + this.name)\n    return new Node(this, this.computeAttrs(attrs), content, Mark.setFrom(marks))\n  }\n\n  // :: (?Object, ?union<Fragment, Node, [Node]>, ?[Mark]) \u2192 ?Node\n  // Like [`create`](#model.NodeType.create), but see if it is necessary to\n  // add nodes to the start or end of the given fragment to make it\n  // fit the node. If no fitting wrapping can be found, return null.\n  // Note that, due to the fact that required nodes can always be\n  // created, this will always succeed if you pass null or\n  // `Fragment.empty` as content.\n  createAndFill(attrs, content, marks) {\n    attrs = this.computeAttrs(attrs)\n    content = Fragment.from(content)\n    if (content.size) {\n      let before = this.contentMatch.fillBefore(content)\n      if (!before) return null\n      content = before.append(content)\n    }\n    let after = this.contentMatch.matchFragment(content).fillBefore(Fragment.empty, true)\n    if (!after) return null\n    return new Node(this, attrs, content.append(after), Mark.setFrom(marks))\n  }\n\n  // :: (Fragment) \u2192 bool\n  // Returns true if the given fragment is valid content for this node\n  // type with the given attributes.\n  validContent(content) {\n    let result = this.contentMatch.matchFragment(content)\n    if (!result || !result.validEnd) return false\n    for (let i = 0; i < content.childCount; i++)\n      if (!this.allowsMarks(content.child(i).marks)) return false\n    return true\n  }\n\n  // :: (MarkType) \u2192 bool\n  // Check whether the given mark type is allowed in this node.\n  allowsMarkType(markType) {\n    return this.markSet == null || this.markSet.indexOf(markType) > -1\n  }\n\n  // :: ([Mark]) \u2192 bool\n  // Test whether the given set of marks are allowed in this node.\n  allowsMarks(marks) {\n    if (this.markSet == null) return true\n    for (let i = 0; i < marks.length; i++) if (!this.allowsMarkType(marks[i].type)) return false\n    return true\n  }\n\n  // :: ([Mark]) \u2192 [Mark]\n  // Removes the marks that are not allowed in this node from the given set.\n  allowedMarks(marks) {\n    if (this.markSet == null) return marks\n    let copy\n    for (let i = 0; i < marks.length; i++) {\n      if (!this.allowsMarkType(marks[i].type)) {\n        if (!copy) copy = marks.slice(0, i)\n      } else if (copy) {\n        copy.push(marks[i])\n      }\n    }\n    return !copy ? marks : copy.length ? copy : Mark.empty\n  }\n\n  static compile(nodes, schema) {\n    let result = Object.create(null)\n    nodes.forEach((name, spec) => result[name] = new NodeType(name, schema, spec))\n\n    let topType = schema.spec.topNode || \"doc\"\n    if (!result[topType]) throw new RangeError(\"Schema is missing its top node type ('\" + topType + \"')\")\n    if (!result.text) throw new RangeError(\"Every schema needs a 'text' type\")\n    for (let _ in result.text.attrs) throw new RangeError(\"The text node type should not have attributes\")\n\n    return result\n  }\n}\n\n// Attribute descriptors\n\nclass Attribute {\n  constructor(options) {\n    this.hasDefault = Object.prototype.hasOwnProperty.call(options, \"default\")\n    this.default = options.default\n  }\n\n  get isRequired() {\n    return !this.hasDefault\n  }\n}\n\n// Marks\n\n// ::- Like nodes, marks (which are associated with nodes to signify\n// things like emphasis or being part of a link) are\n// [tagged](#model.Mark.type) with type objects, which are\n// instantiated once per `Schema`.\nexport class MarkType {\n  constructor(name, rank, schema, spec) {\n    // :: string\n    // The name of the mark type.\n    this.name = name\n\n    // :: Schema\n    // The schema that this mark type instance is part of.\n    this.schema = schema\n\n    // :: MarkSpec\n    // The spec on which the type is based.\n    this.spec = spec\n\n    this.attrs = initAttrs(spec.attrs)\n\n    this.rank = rank\n    this.excluded = null\n    let defaults = defaultAttrs(this.attrs)\n    this.instance = defaults && new Mark(this, defaults)\n  }\n\n  // :: (?Object) \u2192 Mark\n  // Create a mark of this type. `attrs` may be `null` or an object\n  // containing only some of the mark's attributes. The others, if\n  // they have defaults, will be added.\n  create(attrs) {\n    if (!attrs && this.instance) return this.instance\n    return new Mark(this, computeAttrs(this.attrs, attrs))\n  }\n\n  static compile(marks, schema) {\n    let result = Object.create(null), rank = 0\n    marks.forEach((name, spec) => result[name] = new MarkType(name, rank++, schema, spec))\n    return result\n  }\n\n  // :: ([Mark]) \u2192 [Mark]\n  // When there is a mark of this type in the given set, a new set\n  // without it is returned. Otherwise, the input set is returned.\n  removeFromSet(set) {\n    for (var i = 0; i < set.length; i++) if (set[i].type == this) {\n      set = set.slice(0, i).concat(set.slice(i + 1))\n      i--\n    }\n    return set\n  }\n\n  // :: ([Mark]) \u2192 ?Mark\n  // Tests whether there is a mark of this type in the given set.\n  isInSet(set) {\n    for (let i = 0; i < set.length; i++)\n      if (set[i].type == this) return set[i]\n  }\n\n  // :: (MarkType) \u2192 bool\n  // Queries whether a given mark type is\n  // [excluded](#model.MarkSpec.excludes) by this one.\n  excludes(other) {\n    return this.excluded.indexOf(other) > -1\n  }\n}\n\n// SchemaSpec:: interface\n// An object describing a schema, as passed to the [`Schema`](#model.Schema)\n// constructor.\n//\n//   nodes:: union<Object<NodeSpec>, OrderedMap<NodeSpec>>\n//   The node types in this schema. Maps names to\n//   [`NodeSpec`](#model.NodeSpec) objects that describe the node type\n//   associated with that name. Their order is significant\u2014it\n//   determines which [parse rules](#model.NodeSpec.parseDOM) take\n//   precedence by default, and which nodes come first in a given\n//   [group](#model.NodeSpec.group).\n//\n//   marks:: ?union<Object<MarkSpec>, OrderedMap<MarkSpec>>\n//   The mark types that exist in this schema. The order in which they\n//   are provided determines the order in which [mark\n//   sets](#model.Mark.addToSet) are sorted and in which [parse\n//   rules](#model.MarkSpec.parseDOM) are tried.\n//\n//   topNode:: ?string\n//   The name of the default top-level node for the schema. Defaults\n//   to `\"doc\"`.\n\n// NodeSpec:: interface\n//\n//   content:: ?string\n//   The content expression for this node, as described in the [schema\n//   guide](/docs/guide/#schema.content_expressions). When not given,\n//   the node does not allow any content.\n//\n//   marks:: ?string\n//   The marks that are allowed inside of this node. May be a\n//   space-separated string referring to mark names or groups, `\"_\"`\n//   to explicitly allow all marks, or `\"\"` to disallow marks. When\n//   not given, nodes with inline content default to allowing all\n//   marks, other nodes default to not allowing marks.\n//\n//   group:: ?string\n//   The group or space-separated groups to which this node belongs,\n//   which can be referred to in the content expressions for the\n//   schema.\n//\n//   inline:: ?bool\n//   Should be set to true for inline nodes. (Implied for text nodes.)\n//\n//   atom:: ?bool\n//   Can be set to true to indicate that, though this isn't a [leaf\n//   node](#model.NodeType.isLeaf), it doesn't have directly editable\n//   content and should be treated as a single unit in the view.\n//\n//   attrs:: ?Object<AttributeSpec>\n//   The attributes that nodes of this type get.\n//\n//   selectable:: ?bool\n//   Controls whether nodes of this type can be selected as a [node\n//   selection](#state.NodeSelection). Defaults to true for non-text\n//   nodes.\n//\n//   draggable:: ?bool\n//   Determines whether nodes of this type can be dragged without\n//   being selected. Defaults to false.\n//\n//   code:: ?bool\n//   Can be used to indicate that this node contains code, which\n//   causes some commands to behave differently.\n//\n//   whitespace:: ?union<\"pre\", \"normal\">\n//   Controls way whitespace in this a node is parsed. The default is\n//   `\"normal\"`, which causes the [DOM parser](#model.DOMParser) to\n//   collapse whitespace in normal mode, and normalize it (replacing\n//   newlines and such with spaces) otherwise. `\"pre\"` causes the\n//   parser to preserve spaces inside the node. When this option isn't\n//   given, but [`code`](#model.NodeSpec.code) is true, `whitespace`\n//   will default to `\"pre\"`. Note that this option doesn't influence\n//   the way the node is rendered\u2014that should be handled by `toDOM`\n//   and/or styling.\n//\n//   defining:: ?bool\n//   Determines whether this node is considered an important parent\n//   node during replace operations (such as paste). Non-defining (the\n//   default) nodes get dropped when their entire content is replaced,\n//   whereas defining nodes persist and wrap the inserted content.\n//   Likewise, in _inserted_ content the defining parents of the\n//   content are preserved when possible. Typically,\n//   non-default-paragraph textblock types, and possibly list items,\n//   are marked as defining.\n//\n//   isolating:: ?bool\n//   When enabled (default is false), the sides of nodes of this type\n//   count as boundaries that regular editing operations, like\n//   backspacing or lifting, won't cross. An example of a node that\n//   should probably have this enabled is a table cell.\n//\n//   toDOM:: ?(node: Node) \u2192 DOMOutputSpec\n//   Defines the default way a node of this type should be serialized\n//   to DOM/HTML (as used by\n//   [`DOMSerializer.fromSchema`](#model.DOMSerializer^fromSchema)).\n//   Should return a DOM node or an [array\n//   structure](#model.DOMOutputSpec) that describes one, with an\n//   optional number zero (\u201Chole\u201D) in it to indicate where the node's\n//   content should be inserted.\n//\n//   For text nodes, the default is to create a text DOM node. Though\n//   it is possible to create a serializer where text is rendered\n//   differently, this is not supported inside the editor, so you\n//   shouldn't override that in your text node spec.\n//\n//   parseDOM:: ?[ParseRule]\n//   Associates DOM parser information with this node, which can be\n//   used by [`DOMParser.fromSchema`](#model.DOMParser^fromSchema) to\n//   automatically derive a parser. The `node` field in the rules is\n//   implied (the name of this node will be filled in automatically).\n//   If you supply your own parser, you do not need to also specify\n//   parsing rules in your schema.\n//\n//   toDebugString:: ?(node: Node) -> string\n//   Defines the default way a node of this type should be serialized\n//   to a string representation for debugging (e.g. in error messages).\n\n// MarkSpec:: interface\n//\n//   attrs:: ?Object<AttributeSpec>\n//   The attributes that marks of this type get.\n//\n//   inclusive:: ?bool\n//   Whether this mark should be active when the cursor is positioned\n//   at its end (or at its start when that is also the start of the\n//   parent node). Defaults to true.\n//\n//   excludes:: ?string\n//   Determines which other marks this mark can coexist with. Should\n//   be a space-separated strings naming other marks or groups of marks.\n//   When a mark is [added](#model.Mark.addToSet) to a set, all marks\n//   that it excludes are removed in the process. If the set contains\n//   any mark that excludes the new mark but is not, itself, excluded\n//   by the new mark, the mark can not be added an the set. You can\n//   use the value `\"_\"` to indicate that the mark excludes all\n//   marks in the schema.\n//\n//   Defaults to only being exclusive with marks of the same type. You\n//   can set it to an empty string (or any string not containing the\n//   mark's own name) to allow multiple marks of a given type to\n//   coexist (as long as they have different attributes).\n//\n//   group:: ?string\n//   The group or space-separated groups to which this mark belongs.\n//\n//   spanning:: ?bool\n//   Determines whether marks of this type can span multiple adjacent\n//   nodes when serialized to DOM/HTML. Defaults to true.\n//\n//   toDOM:: ?(mark: Mark, inline: bool) \u2192 DOMOutputSpec\n//   Defines the default way marks of this type should be serialized\n//   to DOM/HTML. When the resulting spec contains a hole, that is\n//   where the marked content is placed. Otherwise, it is appended to\n//   the top node.\n//\n//   parseDOM:: ?[ParseRule]\n//   Associates DOM parser information with this mark (see the\n//   corresponding [node spec field](#model.NodeSpec.parseDOM)). The\n//   `mark` field in the rules is implied.\n\n// AttributeSpec:: interface\n//\n// Used to [define](#model.NodeSpec.attrs) attributes on nodes or\n// marks.\n//\n//   default:: ?any\n//   The default value for this attribute, to use when no explicit\n//   value is provided. Attributes that have no default must be\n//   provided whenever a node or mark of a type that has them is\n//   created.\n\n// ::- A document schema. Holds [node](#model.NodeType) and [mark\n// type](#model.MarkType) objects for the nodes and marks that may\n// occur in conforming documents, and provides functionality for\n// creating and deserializing such documents.\nexport class Schema {\n  // :: (SchemaSpec)\n  // Construct a schema from a schema [specification](#model.SchemaSpec).\n  constructor(spec) {\n    // :: SchemaSpec\n    // The [spec](#model.SchemaSpec) on which the schema is based,\n    // with the added guarantee that its `nodes` and `marks`\n    // properties are\n    // [`OrderedMap`](https://github.com/marijnh/orderedmap) instances\n    // (not raw objects).\n    this.spec = {}\n    for (let prop in spec) this.spec[prop] = spec[prop]\n    this.spec.nodes = OrderedMap.from(spec.nodes)\n    this.spec.marks = OrderedMap.from(spec.marks)\n\n    // :: Object<NodeType>\n    // An object mapping the schema's node names to node type objects.\n    this.nodes = NodeType.compile(this.spec.nodes, this)\n\n    // :: Object<MarkType>\n    // A map from mark names to mark type objects.\n    this.marks = MarkType.compile(this.spec.marks, this)\n\n    let contentExprCache = Object.create(null)\n    for (let prop in this.nodes) {\n      if (prop in this.marks)\n        throw new RangeError(prop + \" can not be both a node and a mark\")\n      let type = this.nodes[prop], contentExpr = type.spec.content || \"\", markExpr = type.spec.marks\n      type.contentMatch = contentExprCache[contentExpr] ||\n        (contentExprCache[contentExpr] = ContentMatch.parse(contentExpr, this.nodes))\n      type.inlineContent = type.contentMatch.inlineContent\n      type.markSet = markExpr == \"_\" ? null :\n        markExpr ? gatherMarks(this, markExpr.split(\" \")) :\n        markExpr == \"\" || !type.inlineContent ? [] : null\n    }\n    for (let prop in this.marks) {\n      let type = this.marks[prop], excl = type.spec.excludes\n      type.excluded = excl == null ? [type] : excl == \"\" ? [] : gatherMarks(this, excl.split(\" \"))\n    }\n\n    this.nodeFromJSON = this.nodeFromJSON.bind(this)\n    this.markFromJSON = this.markFromJSON.bind(this)\n\n    // :: NodeType\n    // The type of the [default top node](#model.SchemaSpec.topNode)\n    // for this schema.\n    this.topNodeType = this.nodes[this.spec.topNode || \"doc\"]\n\n    // :: Object\n    // An object for storing whatever values modules may want to\n    // compute and cache per schema. (If you want to store something\n    // in it, try to use property names unlikely to clash.)\n    this.cached = Object.create(null)\n    this.cached.wrappings = Object.create(null)\n  }\n\n  // :: (union<string, NodeType>, ?Object, ?union<Fragment, Node, [Node]>, ?[Mark]) \u2192 Node\n  // Create a node in this schema. The `type` may be a string or a\n  // `NodeType` instance. Attributes will be extended\n  // with defaults, `content` may be a `Fragment`,\n  // `null`, a `Node`, or an array of nodes.\n  node(type, attrs, content, marks) {\n    if (typeof type == \"string\")\n      type = this.nodeType(type)\n    else if (!(type instanceof NodeType))\n      throw new RangeError(\"Invalid node type: \" + type)\n    else if (type.schema != this)\n      throw new RangeError(\"Node type from different schema used (\" + type.name + \")\")\n\n    return type.createChecked(attrs, content, marks)\n  }\n\n  // :: (string, ?[Mark]) \u2192 Node\n  // Create a text node in the schema. Empty text nodes are not\n  // allowed.\n  text(text, marks) {\n    let type = this.nodes.text\n    return new TextNode(type, type.defaultAttrs, text, Mark.setFrom(marks))\n  }\n\n  // :: (union<string, MarkType>, ?Object) \u2192 Mark\n  // Create a mark with the given type and attributes.\n  mark(type, attrs) {\n    if (typeof type == \"string\") type = this.marks[type]\n    return type.create(attrs)\n  }\n\n  // :: (Object) \u2192 Node\n  // Deserialize a node from its JSON representation. This method is\n  // bound.\n  nodeFromJSON(json) {\n    return Node.fromJSON(this, json)\n  }\n\n  // :: (Object) \u2192 Mark\n  // Deserialize a mark from its JSON representation. This method is\n  // bound.\n  markFromJSON(json) {\n    return Mark.fromJSON(this, json)\n  }\n\n  nodeType(name) {\n    let found = this.nodes[name]\n    if (!found) throw new RangeError(\"Unknown node type: \" + name)\n    return found\n  }\n}\n\nfunction gatherMarks(schema, marks) {\n  let found = []\n  for (let i = 0; i < marks.length; i++) {\n    let name = marks[i], mark = schema.marks[name], ok = mark\n    if (mark) {\n      found.push(mark)\n    } else {\n      for (let prop in schema.marks) {\n        let mark = schema.marks[prop]\n        if (name == \"_\" || (mark.spec.group && mark.spec.group.split(\" \").indexOf(name) > -1))\n          found.push(ok = mark)\n      }\n    }\n    if (!ok) throw new SyntaxError(\"Unknown mark type: '\" + marks[i] + \"'\")\n  }\n  return found\n}\n", "import {Fragment} from \"./fragment\"\nimport {Slice} from \"./replace\"\nimport {Mark} from \"./mark\"\n\n// ParseOptions:: interface\n// These are the options recognized by the\n// [`parse`](#model.DOMParser.parse) and\n// [`parseSlice`](#model.DOMParser.parseSlice) methods.\n//\n//   preserveWhitespace:: ?union<bool, \"full\">\n//   By default, whitespace is collapsed as per HTML's rules. Pass\n//   `true` to preserve whitespace, but normalize newlines to\n//   spaces, and `\"full\"` to preserve whitespace entirely.\n//\n//   findPositions:: ?[{node: dom.Node, offset: number}]\n//   When given, the parser will, beside parsing the content,\n//   record the document positions of the given DOM positions. It\n//   will do so by writing to the objects, adding a `pos` property\n//   that holds the document position. DOM positions that are not\n//   in the parsed content will not be written to.\n//\n//   from:: ?number\n//   The child node index to start parsing from.\n//\n//   to:: ?number\n//   The child node index to stop parsing at.\n//\n//   topNode:: ?Node\n//   By default, the content is parsed into the schema's default\n//   [top node type](#model.Schema.topNodeType). You can pass this\n//   option to use the type and attributes from a different node\n//   as the top container.\n//\n//   topMatch:: ?ContentMatch\n//   Provide the starting content match that content parsed into the\n//   top node is matched against.\n//\n//   context:: ?ResolvedPos\n//   A set of additional nodes to count as\n//   [context](#model.ParseRule.context) when parsing, above the\n//   given [top node](#model.ParseOptions.topNode).\n\n// ParseRule:: interface\n// A value that describes how to parse a given DOM node or inline\n// style as a ProseMirror node or mark.\n//\n//   tag:: ?string\n//   A CSS selector describing the kind of DOM elements to match. A\n//   single rule should have _either_ a `tag` or a `style` property.\n//\n//   namespace:: ?string\n//   The namespace to match. This should be used with `tag`.\n//   Nodes are only matched when the namespace matches or this property\n//   is null.\n//\n//   style:: ?string\n//   A CSS property name to match. When given, this rule matches\n//   inline styles that list that property. May also have the form\n//   `\"property=value\"`, in which case the rule only matches if the\n//   property's value exactly matches the given value. (For more\n//   complicated filters, use [`getAttrs`](#model.ParseRule.getAttrs)\n//   and return false to indicate that the match failed.) Rules\n//   matching styles may only produce [marks](#model.ParseRule.mark),\n//   not nodes.\n//\n//   priority:: ?number\n//   Can be used to change the order in which the parse rules in a\n//   schema are tried. Those with higher priority come first. Rules\n//   without a priority are counted as having priority 50. This\n//   property is only meaningful in a schema\u2014when directly\n//   constructing a parser, the order of the rule array is used.\n//\n//   consuming:: ?boolean\n//   By default, when a rule matches an element or style, no further\n//   rules get a chance to match it. By setting this to `false`, you\n//   indicate that even when this rule matches, other rules that come\n//   after it should also run.\n//\n//   context:: ?string\n//   When given, restricts this rule to only match when the current\n//   context\u2014the parent nodes into which the content is being\n//   parsed\u2014matches this expression. Should contain one or more node\n//   names or node group names followed by single or double slashes.\n//   For example `\"paragraph/\"` means the rule only matches when the\n//   parent node is a paragraph, `\"blockquote/paragraph/\"` restricts\n//   it to be in a paragraph that is inside a blockquote, and\n//   `\"section//\"` matches any position inside a section\u2014a double\n//   slash matches any sequence of ancestor nodes. To allow multiple\n//   different contexts, they can be separated by a pipe (`|`)\n//   character, as in `\"blockquote/|list_item/\"`.\n//\n//   node:: ?string\n//   The name of the node type to create when this rule matches. Only\n//   valid for rules with a `tag` property, not for style rules. Each\n//   rule should have one of a `node`, `mark`, or `ignore` property\n//   (except when it appears in a [node](#model.NodeSpec.parseDOM) or\n//   [mark spec](#model.MarkSpec.parseDOM), in which case the `node`\n//   or `mark` property will be derived from its position).\n//\n//   mark:: ?string\n//   The name of the mark type to wrap the matched content in.\n//\n//   ignore:: ?bool\n//   When true, ignore content that matches this rule.\n//\n//   closeParent:: ?bool\n//   When true, finding an element that matches this rule will close\n//   the current node.\n//\n//   skip:: ?bool\n//   When true, ignore the node that matches this rule, but do parse\n//   its content.\n//\n//   attrs:: ?Object\n//   Attributes for the node or mark created by this rule. When\n//   `getAttrs` is provided, it takes precedence.\n//\n//   getAttrs:: ?(union<dom.Node, string>) \u2192 ?union<Object, false>\n//   A function used to compute the attributes for the node or mark\n//   created by this rule. Can also be used to describe further\n//   conditions the DOM element or style must match. When it returns\n//   `false`, the rule won't match. When it returns null or undefined,\n//   that is interpreted as an empty/default set of attributes.\n//\n//   Called with a DOM Element for `tag` rules, and with a string (the\n//   style's value) for `style` rules.\n//\n//   contentElement:: ?union<string, (dom.Node) \u2192 dom.Node>\n//   For `tag` rules that produce non-leaf nodes or marks, by default\n//   the content of the DOM element is parsed as content of the mark\n//   or node. If the child nodes are in a descendent node, this may be\n//   a CSS selector string that the parser must use to find the actual\n//   content element, or a function that returns the actual content\n//   element to the parser.\n//\n//   getContent:: ?(dom.Node, schema: Schema) \u2192 Fragment\n//   Can be used to override the content of a matched node. When\n//   present, instead of parsing the node's child nodes, the result of\n//   this function is used.\n//\n//   preserveWhitespace:: ?union<bool, \"full\">\n//   Controls whether whitespace should be preserved when parsing the\n//   content inside the matched element. `false` means whitespace may\n//   be collapsed, `true` means that whitespace should be preserved\n//   but newlines normalized to spaces, and `\"full\"` means that\n//   newlines should also be preserved.\n\n// ::- A DOM parser represents a strategy for parsing DOM content into\n// a ProseMirror document conforming to a given schema. Its behavior\n// is defined by an array of [rules](#model.ParseRule).\nexport class DOMParser {\n  // :: (Schema, [ParseRule])\n  // Create a parser that targets the given schema, using the given\n  // parsing rules.\n  constructor(schema, rules) {\n    // :: Schema\n    // The schema into which the parser parses.\n    this.schema = schema\n    // :: [ParseRule]\n    // The set of [parse rules](#model.ParseRule) that the parser\n    // uses, in order of precedence.\n    this.rules = rules\n    this.tags = []\n    this.styles = []\n\n    rules.forEach(rule => {\n      if (rule.tag) this.tags.push(rule)\n      else if (rule.style) this.styles.push(rule)\n    })\n\n    // Only normalize list elements when lists in the schema can't directly contain themselves\n    this.normalizeLists = !this.tags.some(r => {\n      if (!/^(ul|ol)\\b/.test(r.tag) || !r.node) return false\n      let node = schema.nodes[r.node]\n      return node.contentMatch.matchType(node)\n    })\n  }\n\n  // :: (dom.Node, ?ParseOptions) \u2192 Node\n  // Parse a document from the content of a DOM node.\n  parse(dom, options = {}) {\n    let context = new ParseContext(this, options, false)\n    context.addAll(dom, null, options.from, options.to)\n    return context.finish()\n  }\n\n  // :: (dom.Node, ?ParseOptions) \u2192 Slice\n  // Parses the content of the given DOM node, like\n  // [`parse`](#model.DOMParser.parse), and takes the same set of\n  // options. But unlike that method, which produces a whole node,\n  // this one returns a slice that is open at the sides, meaning that\n  // the schema constraints aren't applied to the start of nodes to\n  // the left of the input and the end of nodes at the end.\n  parseSlice(dom, options = {}) {\n    let context = new ParseContext(this, options, true)\n    context.addAll(dom, null, options.from, options.to)\n    return Slice.maxOpen(context.finish())\n  }\n\n  matchTag(dom, context, after) {\n    for (let i = after ? this.tags.indexOf(after) + 1 : 0; i < this.tags.length; i++) {\n      let rule = this.tags[i]\n      if (matches(dom, rule.tag) &&\n          (rule.namespace === undefined || dom.namespaceURI == rule.namespace) &&\n          (!rule.context || context.matchesContext(rule.context))) {\n        if (rule.getAttrs) {\n          let result = rule.getAttrs(dom)\n          if (result === false) continue\n          rule.attrs = result\n        }\n        return rule\n      }\n    }\n  }\n\n  matchStyle(prop, value, context, after) {\n    for (let i = after ? this.styles.indexOf(after) + 1 : 0; i < this.styles.length; i++) {\n      let rule = this.styles[i]\n      if (rule.style.indexOf(prop) != 0 ||\n          rule.context && !context.matchesContext(rule.context) ||\n          // Test that the style string either precisely matches the prop,\n          // or has an '=' sign after the prop, followed by the given\n          // value.\n          rule.style.length > prop.length &&\n          (rule.style.charCodeAt(prop.length) != 61 || rule.style.slice(prop.length + 1) != value))\n        continue\n      if (rule.getAttrs) {\n        let result = rule.getAttrs(value)\n        if (result === false) continue\n        rule.attrs = result\n      }\n      return rule\n    }\n  }\n\n  // : (Schema) \u2192 [ParseRule]\n  static schemaRules(schema) {\n    let result = []\n    function insert(rule) {\n      let priority = rule.priority == null ? 50 : rule.priority, i = 0\n      for (; i < result.length; i++) {\n        let next = result[i], nextPriority = next.priority == null ? 50 : next.priority\n        if (nextPriority < priority) break\n      }\n      result.splice(i, 0, rule)\n    }\n\n    for (let name in schema.marks) {\n      let rules = schema.marks[name].spec.parseDOM\n      if (rules) rules.forEach(rule => {\n        insert(rule = copy(rule))\n        rule.mark = name\n      })\n    }\n    for (let name in schema.nodes) {\n      let rules = schema.nodes[name].spec.parseDOM\n      if (rules) rules.forEach(rule => {\n        insert(rule = copy(rule))\n        rule.node = name\n      })\n    }\n    return result\n  }\n\n  // :: (Schema) \u2192 DOMParser\n  // Construct a DOM parser using the parsing rules listed in a\n  // schema's [node specs](#model.NodeSpec.parseDOM), reordered by\n  // [priority](#model.ParseRule.priority).\n  static fromSchema(schema) {\n    return schema.cached.domParser ||\n      (schema.cached.domParser = new DOMParser(schema, DOMParser.schemaRules(schema)))\n  }\n}\n\n// : Object<bool> The block-level tags in HTML5\nconst blockTags = {\n  address: true, article: true, aside: true, blockquote: true, canvas: true,\n  dd: true, div: true, dl: true, fieldset: true, figcaption: true, figure: true,\n  footer: true, form: true, h1: true, h2: true, h3: true, h4: true, h5: true,\n  h6: true, header: true, hgroup: true, hr: true, li: true, noscript: true, ol: true,\n  output: true, p: true, pre: true, section: true, table: true, tfoot: true, ul: true\n}\n\n// : Object<bool> The tags that we normally ignore.\nconst ignoreTags = {\n  head: true, noscript: true, object: true, script: true, style: true, title: true\n}\n\n// : Object<bool> List tags.\nconst listTags = {ol: true, ul: true}\n\n// Using a bitfield for node context options\nconst OPT_PRESERVE_WS = 1, OPT_PRESERVE_WS_FULL = 2, OPT_OPEN_LEFT = 4\n\nfunction wsOptionsFor(type, preserveWhitespace, base) {\n  if (preserveWhitespace != null) return (preserveWhitespace ? OPT_PRESERVE_WS : 0) |\n    (preserveWhitespace === \"full\" ? OPT_PRESERVE_WS_FULL : 0)\n  return type && type.whitespace == \"pre\" ? OPT_PRESERVE_WS | OPT_PRESERVE_WS_FULL : base & ~OPT_OPEN_LEFT\n}\n\nclass NodeContext {\n  constructor(type, attrs, marks, pendingMarks, solid, match, options) {\n    this.type = type\n    this.attrs = attrs\n    this.solid = solid\n    this.match = match || (options & OPT_OPEN_LEFT ? null : type.contentMatch)\n    this.options = options\n    this.content = []\n    // Marks applied to this node itself\n    this.marks = marks\n    // Marks applied to its children\n    this.activeMarks = Mark.none\n    // Marks that can't apply here, but will be used in children if possible\n    this.pendingMarks = pendingMarks\n    // Nested Marks with same type\n    this.stashMarks = []\n  }\n\n  findWrapping(node) {\n    if (!this.match) {\n      if (!this.type) return []\n      let fill = this.type.contentMatch.fillBefore(Fragment.from(node))\n      if (fill) {\n        this.match = this.type.contentMatch.matchFragment(fill)\n      } else {\n        let start = this.type.contentMatch, wrap\n        if (wrap = start.findWrapping(node.type)) {\n          this.match = start\n          return wrap\n        } else {\n          return null\n        }\n      }\n    }\n    return this.match.findWrapping(node.type)\n  }\n\n  finish(openEnd) {\n    if (!(this.options & OPT_PRESERVE_WS)) { // Strip trailing whitespace\n      let last = this.content[this.content.length - 1], m\n      if (last && last.isText && (m = /[ \\t\\r\\n\\u000c]+$/.exec(last.text))) {\n        if (last.text.length == m[0].length) this.content.pop()\n        else this.content[this.content.length - 1] = last.withText(last.text.slice(0, last.text.length - m[0].length))\n      }\n    }\n    let content = Fragment.from(this.content)\n    if (!openEnd && this.match)\n      content = content.append(this.match.fillBefore(Fragment.empty, true))\n    return this.type ? this.type.create(this.attrs, content, this.marks) : content\n  }\n\n  popFromStashMark(mark) {\n    for (let i = this.stashMarks.length - 1; i >= 0; i--)\n      if (mark.eq(this.stashMarks[i])) return this.stashMarks.splice(i, 1)[0]\n  }\n\n  applyPending(nextType) {\n    for (let i = 0, pending = this.pendingMarks; i < pending.length; i++) {\n      let mark = pending[i]\n      if ((this.type ? this.type.allowsMarkType(mark.type) : markMayApply(mark.type, nextType)) &&\n          !mark.isInSet(this.activeMarks)) {\n        this.activeMarks = mark.addToSet(this.activeMarks)\n        this.pendingMarks = mark.removeFromSet(this.pendingMarks)\n      }\n    }\n  }\n\n  inlineContext(node) {\n    if (this.type) return this.type.inlineContent\n    if (this.content.length) return this.content[0].isInline\n    return node.parentNode && !blockTags.hasOwnProperty(node.parentNode.nodeName.toLowerCase())\n  }\n}\n\nclass ParseContext {\n  // : (DOMParser, Object)\n  constructor(parser, options, open) {\n    // : DOMParser The parser we are using.\n    this.parser = parser\n    // : Object The options passed to this parse.\n    this.options = options\n    this.isOpen = open\n    let topNode = options.topNode, topContext\n    let topOptions = wsOptionsFor(null, options.preserveWhitespace, 0) | (open ? OPT_OPEN_LEFT : 0)\n    if (topNode)\n      topContext = new NodeContext(topNode.type, topNode.attrs, Mark.none, Mark.none, true,\n                                   options.topMatch || topNode.type.contentMatch, topOptions)\n    else if (open)\n      topContext = new NodeContext(null, null, Mark.none, Mark.none, true, null, topOptions)\n    else\n      topContext = new NodeContext(parser.schema.topNodeType, null, Mark.none, Mark.none, true, null, topOptions)\n    this.nodes = [topContext]\n    // : [Mark] The current set of marks\n    this.open = 0\n    this.find = options.findPositions\n    this.needsBlock = false\n  }\n\n  get top() {\n    return this.nodes[this.open]\n  }\n\n  // : (dom.Node)\n  // Add a DOM node to the content. Text is inserted as text node,\n  // otherwise, the node is passed to `addElement` or, if it has a\n  // `style` attribute, `addElementWithStyles`.\n  addDOM(dom) {\n    if (dom.nodeType == 3) {\n      this.addTextNode(dom)\n    } else if (dom.nodeType == 1) {\n      let style = dom.getAttribute(\"style\")\n      let marks = style ? this.readStyles(parseStyles(style)) : null, top = this.top\n      if (marks != null) for (let i = 0; i < marks.length; i++) this.addPendingMark(marks[i])\n      this.addElement(dom)\n      if (marks != null) for (let i = 0; i < marks.length; i++) this.removePendingMark(marks[i], top)\n    }\n  }\n\n  addTextNode(dom) {\n    let value = dom.nodeValue\n    let top = this.top\n    if (top.options & OPT_PRESERVE_WS_FULL ||\n        top.inlineContext(dom) ||\n        /[^ \\t\\r\\n\\u000c]/.test(value)) {\n      if (!(top.options & OPT_PRESERVE_WS)) {\n        value = value.replace(/[ \\t\\r\\n\\u000c]+/g, \" \")\n        // If this starts with whitespace, and there is no node before it, or\n        // a hard break, or a text node that ends with whitespace, strip the\n        // leading space.\n        if (/^[ \\t\\r\\n\\u000c]/.test(value) && this.open == this.nodes.length - 1) {\n          let nodeBefore = top.content[top.content.length - 1]\n          let domNodeBefore = dom.previousSibling\n          if (!nodeBefore ||\n              (domNodeBefore && domNodeBefore.nodeName == 'BR') ||\n              (nodeBefore.isText && /[ \\t\\r\\n\\u000c]$/.test(nodeBefore.text)))\n            value = value.slice(1)\n        }\n      } else if (!(top.options & OPT_PRESERVE_WS_FULL)) {\n        value = value.replace(/\\r?\\n|\\r/g, \" \")\n      } else {\n        value = value.replace(/\\r\\n?/g, \"\\n\")\n      }\n      if (value) this.insertNode(this.parser.schema.text(value))\n      this.findInText(dom)\n    } else {\n      this.findInside(dom)\n    }\n  }\n\n  // : (dom.Element, ?ParseRule)\n  // Try to find a handler for the given tag and use that to parse. If\n  // none is found, the element's content nodes are added directly.\n  addElement(dom, matchAfter) {\n    let name = dom.nodeName.toLowerCase(), ruleID\n    if (listTags.hasOwnProperty(name) && this.parser.normalizeLists) normalizeList(dom)\n    let rule = (this.options.ruleFromNode && this.options.ruleFromNode(dom)) ||\n        (ruleID = this.parser.matchTag(dom, this, matchAfter))\n    if (rule ? rule.ignore : ignoreTags.hasOwnProperty(name)) {\n      this.findInside(dom)\n      this.ignoreFallback(dom)\n    } else if (!rule || rule.skip || rule.closeParent) {\n      if (rule && rule.closeParent) this.open = Math.max(0, this.open - 1)\n      else if (rule && rule.skip.nodeType) dom = rule.skip\n      let sync, top = this.top, oldNeedsBlock = this.needsBlock\n      if (blockTags.hasOwnProperty(name)) {\n        sync = true\n        if (!top.type) this.needsBlock = true\n      } else if (!dom.firstChild) {\n        this.leafFallback(dom)\n        return\n      }\n      this.addAll(dom)\n      if (sync) this.sync(top)\n      this.needsBlock = oldNeedsBlock\n    } else {\n      this.addElementByRule(dom, rule, rule.consuming === false ? ruleID : null)\n    }\n  }\n\n  // Called for leaf DOM nodes that would otherwise be ignored\n  leafFallback(dom) {\n    if (dom.nodeName == \"BR\" && this.top.type && this.top.type.inlineContent)\n      this.addTextNode(dom.ownerDocument.createTextNode(\"\\n\"))\n  }\n\n  // Called for ignored nodes\n  ignoreFallback(dom) {\n    // Ignored BR nodes should at least create an inline context\n    if (dom.nodeName == \"BR\" && (!this.top.type || !this.top.type.inlineContent))\n      this.findPlace(this.parser.schema.text(\"-\"))\n  }\n\n  // Run any style parser associated with the node's styles. Either\n  // return an array of marks, or null to indicate some of the styles\n  // had a rule with `ignore` set.\n  readStyles(styles) {\n    let marks = Mark.none\n    style: for (let i = 0; i < styles.length; i += 2) {\n      for (let after = null;;) {\n        let rule = this.parser.matchStyle(styles[i], styles[i + 1], this, after)\n        if (!rule) continue style\n        if (rule.ignore) return null\n        marks = this.parser.schema.marks[rule.mark].create(rule.attrs).addToSet(marks)\n        if (rule.consuming === false) after = rule\n        else break\n      }\n    }\n    return marks\n  }\n\n  // : (dom.Element, ParseRule) \u2192 bool\n  // Look up a handler for the given node. If none are found, return\n  // false. Otherwise, apply it, use its return value to drive the way\n  // the node's content is wrapped, and return true.\n  addElementByRule(dom, rule, continueAfter) {\n    let sync, nodeType, markType, mark\n    if (rule.node) {\n      nodeType = this.parser.schema.nodes[rule.node]\n      if (!nodeType.isLeaf) {\n        sync = this.enter(nodeType, rule.attrs, rule.preserveWhitespace)\n      } else if (!this.insertNode(nodeType.create(rule.attrs))) {\n        this.leafFallback(dom)\n      }\n    } else {\n      markType = this.parser.schema.marks[rule.mark]\n      mark = markType.create(rule.attrs)\n      this.addPendingMark(mark)\n    }\n    let startIn = this.top\n\n    if (nodeType && nodeType.isLeaf) {\n      this.findInside(dom)\n    } else if (continueAfter) {\n      this.addElement(dom, continueAfter)\n    } else if (rule.getContent) {\n      this.findInside(dom)\n      rule.getContent(dom, this.parser.schema).forEach(node => this.insertNode(node))\n    } else {\n      let contentDOM = rule.contentElement\n      if (typeof contentDOM == \"string\") contentDOM = dom.querySelector(contentDOM)\n      else if (typeof contentDOM == \"function\") contentDOM = contentDOM(dom)\n      if (!contentDOM) contentDOM = dom\n      this.findAround(dom, contentDOM, true)\n      this.addAll(contentDOM, sync)\n    }\n    if (sync) { this.sync(startIn); this.open-- }\n    if (mark) this.removePendingMark(mark, startIn)\n  }\n\n  // : (dom.Node, ?NodeBuilder, ?number, ?number)\n  // Add all child nodes between `startIndex` and `endIndex` (or the\n  // whole node, if not given). If `sync` is passed, use it to\n  // synchronize after every block element.\n  addAll(parent, sync, startIndex, endIndex) {\n    let index = startIndex || 0\n    for (let dom = startIndex ? parent.childNodes[startIndex] : parent.firstChild,\n             end = endIndex == null ? null : parent.childNodes[endIndex];\n         dom != end; dom = dom.nextSibling, ++index) {\n      this.findAtPoint(parent, index)\n      this.addDOM(dom)\n      if (sync && blockTags.hasOwnProperty(dom.nodeName.toLowerCase()))\n        this.sync(sync)\n    }\n    this.findAtPoint(parent, index)\n  }\n\n  // Try to find a way to fit the given node type into the current\n  // context. May add intermediate wrappers and/or leave non-solid\n  // nodes that we're in.\n  findPlace(node) {\n    let route, sync\n    for (let depth = this.open; depth >= 0; depth--) {\n      let cx = this.nodes[depth]\n      let found = cx.findWrapping(node)\n      if (found && (!route || route.length > found.length)) {\n        route = found\n        sync = cx\n        if (!found.length) break\n      }\n      if (cx.solid) break\n    }\n    if (!route) return false\n    this.sync(sync)\n    for (let i = 0; i < route.length; i++)\n      this.enterInner(route[i], null, false)\n    return true\n  }\n\n  // : (Node) \u2192 ?Node\n  // Try to insert the given node, adjusting the context when needed.\n  insertNode(node) {\n    if (node.isInline && this.needsBlock && !this.top.type) {\n      let block = this.textblockFromContext()\n      if (block) this.enterInner(block)\n    }\n    if (this.findPlace(node)) {\n      this.closeExtra()\n      let top = this.top\n      top.applyPending(node.type)\n      if (top.match) top.match = top.match.matchType(node.type)\n      let marks = top.activeMarks\n      for (let i = 0; i < node.marks.length; i++)\n        if (!top.type || top.type.allowsMarkType(node.marks[i].type))\n          marks = node.marks[i].addToSet(marks)\n      top.content.push(node.mark(marks))\n      return true\n    }\n    return false\n  }\n\n  // : (NodeType, ?Object) \u2192 bool\n  // Try to start a node of the given type, adjusting the context when\n  // necessary.\n  enter(type, attrs, preserveWS) {\n    let ok = this.findPlace(type.create(attrs))\n    if (ok) this.enterInner(type, attrs, true, preserveWS)\n    return ok\n  }\n\n  // Open a node of the given type\n  enterInner(type, attrs, solid, preserveWS) {\n    this.closeExtra()\n    let top = this.top\n    top.applyPending(type)\n    top.match = top.match && top.match.matchType(type, attrs)\n    let options = wsOptionsFor(type, preserveWS, top.options)\n    if ((top.options & OPT_OPEN_LEFT) && top.content.length == 0) options |= OPT_OPEN_LEFT\n    this.nodes.push(new NodeContext(type, attrs, top.activeMarks, top.pendingMarks, solid, null, options))\n    this.open++\n  }\n\n  // Make sure all nodes above this.open are finished and added to\n  // their parents\n  closeExtra(openEnd) {\n    let i = this.nodes.length - 1\n    if (i > this.open) {\n      for (; i > this.open; i--) this.nodes[i - 1].content.push(this.nodes[i].finish(openEnd))\n      this.nodes.length = this.open + 1\n    }\n  }\n\n  finish() {\n    this.open = 0\n    this.closeExtra(this.isOpen)\n    return this.nodes[0].finish(this.isOpen || this.options.topOpen)\n  }\n\n  sync(to) {\n    for (let i = this.open; i >= 0; i--) if (this.nodes[i] == to) {\n      this.open = i\n      return\n    }\n  }\n\n  get currentPos() {\n    this.closeExtra()\n    let pos = 0\n    for (let i = this.open; i >= 0; i--) {\n      let content = this.nodes[i].content\n      for (let j = content.length - 1; j >= 0; j--)\n        pos += content[j].nodeSize\n      if (i) pos++\n    }\n    return pos\n  }\n\n  findAtPoint(parent, offset) {\n    if (this.find) for (let i = 0; i < this.find.length; i++) {\n      if (this.find[i].node == parent && this.find[i].offset == offset)\n        this.find[i].pos = this.currentPos\n    }\n  }\n\n  findInside(parent) {\n    if (this.find) for (let i = 0; i < this.find.length; i++) {\n      if (this.find[i].pos == null && parent.nodeType == 1 && parent.contains(this.find[i].node))\n        this.find[i].pos = this.currentPos\n    }\n  }\n\n  findAround(parent, content, before) {\n    if (parent != content && this.find) for (let i = 0; i < this.find.length; i++) {\n      if (this.find[i].pos == null && parent.nodeType == 1 && parent.contains(this.find[i].node)) {\n        let pos = content.compareDocumentPosition(this.find[i].node)\n        if (pos & (before ? 2 : 4))\n          this.find[i].pos = this.currentPos\n      }\n    }\n  }\n\n  findInText(textNode) {\n    if (this.find) for (let i = 0; i < this.find.length; i++) {\n      if (this.find[i].node == textNode)\n        this.find[i].pos = this.currentPos - (textNode.nodeValue.length - this.find[i].offset)\n    }\n  }\n\n  // : (string) \u2192 bool\n  // Determines whether the given [context\n  // string](#ParseRule.context) matches this context.\n  matchesContext(context) {\n    if (context.indexOf(\"|\") > -1)\n      return context.split(/\\s*\\|\\s*/).some(this.matchesContext, this)\n\n    let parts = context.split(\"/\")\n    let option = this.options.context\n    let useRoot = !this.isOpen && (!option || option.parent.type == this.nodes[0].type)\n    let minDepth = -(option ? option.depth + 1 : 0) + (useRoot ? 0 : 1)\n    let match = (i, depth) => {\n      for (; i >= 0; i--) {\n        let part = parts[i]\n        if (part == \"\") {\n          if (i == parts.length - 1 || i == 0) continue\n          for (; depth >= minDepth; depth--)\n            if (match(i - 1, depth)) return true\n          return false\n        } else {\n          let next = depth > 0 || (depth == 0 && useRoot) ? this.nodes[depth].type\n              : option && depth >= minDepth ? option.node(depth - minDepth).type\n              : null\n          if (!next || (next.name != part && next.groups.indexOf(part) == -1))\n            return false\n          depth--\n        }\n      }\n      return true\n    }\n    return match(parts.length - 1, this.open)\n  }\n\n  textblockFromContext() {\n    let $context = this.options.context\n    if ($context) for (let d = $context.depth; d >= 0; d--) {\n      let deflt = $context.node(d).contentMatchAt($context.indexAfter(d)).defaultType\n      if (deflt && deflt.isTextblock && deflt.defaultAttrs) return deflt\n    }\n    for (let name in this.parser.schema.nodes) {\n      let type = this.parser.schema.nodes[name]\n      if (type.isTextblock && type.defaultAttrs) return type\n    }\n  }\n\n  addPendingMark(mark) {\n    let found = findSameMarkInSet(mark, this.top.pendingMarks)\n    if (found) this.top.stashMarks.push(found)\n    this.top.pendingMarks = mark.addToSet(this.top.pendingMarks)\n  }\n\n  removePendingMark(mark, upto) {\n    for (let depth = this.open; depth >= 0; depth--) {\n      let level = this.nodes[depth]\n      let found = level.pendingMarks.lastIndexOf(mark)\n      if (found > -1) {\n        level.pendingMarks = mark.removeFromSet(level.pendingMarks)\n      } else {\n        level.activeMarks = mark.removeFromSet(level.activeMarks)\n        let stashMark = level.popFromStashMark(mark)\n        if (stashMark && level.type && level.type.allowsMarkType(stashMark.type))\n          level.activeMarks = stashMark.addToSet(level.activeMarks)\n      }\n      if (level == upto) break\n    }\n  }\n}\n\n// Kludge to work around directly nested list nodes produced by some\n// tools and allowed by browsers to mean that the nested list is\n// actually part of the list item above it.\nfunction normalizeList(dom) {\n  for (let child = dom.firstChild, prevItem = null; child; child = child.nextSibling) {\n    let name = child.nodeType == 1 ? child.nodeName.toLowerCase() : null\n    if (name && listTags.hasOwnProperty(name) && prevItem) {\n      prevItem.appendChild(child)\n      child = prevItem\n    } else if (name == \"li\") {\n      prevItem = child\n    } else if (name) {\n      prevItem = null\n    }\n  }\n}\n\n// Apply a CSS selector.\nfunction matches(dom, selector) {\n  return (dom.matches || dom.msMatchesSelector || dom.webkitMatchesSelector || dom.mozMatchesSelector).call(dom, selector)\n}\n\n// : (string) \u2192 [string]\n// Tokenize a style attribute into property/value pairs.\nfunction parseStyles(style) {\n  let re = /\\s*([\\w-]+)\\s*:\\s*([^;]+)/g, m, result = []\n  while (m = re.exec(style)) result.push(m[1], m[2].trim())\n  return result\n}\n\nfunction copy(obj) {\n  let copy = {}\n  for (let prop in obj) copy[prop] = obj[prop]\n  return copy\n}\n\n// Used when finding a mark at the top level of a fragment parse.\n// Checks whether it would be reasonable to apply a given mark type to\n// a given node, by looking at the way the mark occurs in the schema.\nfunction markMayApply(markType, nodeType) {\n  let nodes = nodeType.schema.nodes\n  for (let name in nodes) {\n    let parent = nodes[name]\n    if (!parent.allowsMarkType(markType)) continue\n    let seen = [], scan = match => {\n      seen.push(match)\n      for (let i = 0; i < match.edgeCount; i++) {\n        let {type, next} = match.edge(i)\n        if (type == nodeType) return true\n        if (seen.indexOf(next) < 0 && scan(next)) return true\n      }\n    }\n    if (scan(parent.contentMatch)) return true\n  }\n}\n\nfunction findSameMarkInSet(mark, set) {\n  for (let i = 0; i < set.length; i++) {\n    if (mark.eq(set[i])) return set[i]\n  }\n}\n", "// DOMOutputSpec:: interface\n// A description of a DOM structure. Can be either a string, which is\n// interpreted as a text node, a DOM node, which is interpreted as\n// itself, a `{dom: Node, contentDOM: ?Node}` object, or an array.\n//\n// An array describes a DOM element. The first value in the array\n// should be a string\u2014the name of the DOM element, optionally prefixed\n// by a namespace URL and a space. If the second element is plain\n// object, it is interpreted as a set of attributes for the element.\n// Any elements after that (including the 2nd if it's not an attribute\n// object) are interpreted as children of the DOM elements, and must\n// either be valid `DOMOutputSpec` values, or the number zero.\n//\n// The number zero (pronounced \u201Chole\u201D) is used to indicate the place\n// where a node's child nodes should be inserted. If it occurs in an\n// output spec, it should be the only child element in its parent\n// node.\n\n// ::- A DOM serializer knows how to convert ProseMirror nodes and\n// marks of various types to DOM nodes.\nexport class DOMSerializer {\n  // :: (Object<(node: Node) \u2192 DOMOutputSpec>, Object<?(mark: Mark, inline: bool) \u2192 DOMOutputSpec>)\n  // Create a serializer. `nodes` should map node names to functions\n  // that take a node and return a description of the corresponding\n  // DOM. `marks` does the same for mark names, but also gets an\n  // argument that tells it whether the mark's content is block or\n  // inline content (for typical use, it'll always be inline). A mark\n  // serializer may be `null` to indicate that marks of that type\n  // should not be serialized.\n  constructor(nodes, marks) {\n    // :: Object<(node: Node) \u2192 DOMOutputSpec>\n    // The node serialization functions.\n    this.nodes = nodes || {}\n    // :: Object<?(mark: Mark, inline: bool) \u2192 DOMOutputSpec>\n    // The mark serialization functions.\n    this.marks = marks || {}\n  }\n\n  // :: (Fragment, ?Object) \u2192 dom.DocumentFragment\n  // Serialize the content of this fragment to a DOM fragment. When\n  // not in the browser, the `document` option, containing a DOM\n  // document, should be passed so that the serializer can create\n  // nodes.\n  serializeFragment(fragment, options = {}, target) {\n    if (!target) target = doc(options).createDocumentFragment()\n\n    let top = target, active = null\n    fragment.forEach(node => {\n      if (active || node.marks.length) {\n        if (!active) active = []\n        let keep = 0, rendered = 0\n        while (keep < active.length && rendered < node.marks.length) {\n          let next = node.marks[rendered]\n          if (!this.marks[next.type.name]) { rendered++; continue }\n          if (!next.eq(active[keep]) || next.type.spec.spanning === false) break\n          keep += 2; rendered++\n        }\n        while (keep < active.length) {\n          top = active.pop()\n          active.pop()\n        }\n        while (rendered < node.marks.length) {\n          let add = node.marks[rendered++]\n          let markDOM = this.serializeMark(add, node.isInline, options)\n          if (markDOM) {\n            active.push(add, top)\n            top.appendChild(markDOM.dom)\n            top = markDOM.contentDOM || markDOM.dom\n          }\n        }\n      }\n      top.appendChild(this.serializeNodeInner(node, options))\n    })\n\n    return target\n  }\n\n  serializeNodeInner(node, options = {}) {\n    let {dom, contentDOM} =\n        DOMSerializer.renderSpec(doc(options), this.nodes[node.type.name](node))\n    if (contentDOM) {\n      if (node.isLeaf)\n        throw new RangeError(\"Content hole not allowed in a leaf node spec\")\n      if (options.onContent)\n        options.onContent(node, contentDOM, options)\n      else\n        this.serializeFragment(node.content, options, contentDOM)\n    }\n    return dom\n  }\n\n  // :: (Node, ?Object) \u2192 dom.Node\n  // Serialize this node to a DOM node. This can be useful when you\n  // need to serialize a part of a document, as opposed to the whole\n  // document. To serialize a whole document, use\n  // [`serializeFragment`](#model.DOMSerializer.serializeFragment) on\n  // its [content](#model.Node.content).\n  serializeNode(node, options = {}) {\n    let dom = this.serializeNodeInner(node, options)\n    for (let i = node.marks.length - 1; i >= 0; i--) {\n      let wrap = this.serializeMark(node.marks[i], node.isInline, options)\n      if (wrap) {\n        ;(wrap.contentDOM || wrap.dom).appendChild(dom)\n        dom = wrap.dom\n      }\n    }\n    return dom\n  }\n\n  serializeMark(mark, inline, options = {}) {\n    let toDOM = this.marks[mark.type.name]\n    return toDOM && DOMSerializer.renderSpec(doc(options), toDOM(mark, inline))\n  }\n\n  // :: (dom.Document, DOMOutputSpec) \u2192 {dom: dom.Node, contentDOM: ?dom.Node}\n  // Render an [output spec](#model.DOMOutputSpec) to a DOM node. If\n  // the spec has a hole (zero) in it, `contentDOM` will point at the\n  // node with the hole.\n  static renderSpec(doc, structure, xmlNS = null) {\n    if (typeof structure == \"string\")\n      return {dom: doc.createTextNode(structure)}\n    if (structure.nodeType != null)\n      return {dom: structure}\n    if (structure.dom && structure.dom.nodeType != null)\n      return structure\n    let tagName = structure[0], space = tagName.indexOf(\" \")\n    if (space > 0) {\n      xmlNS = tagName.slice(0, space)\n      tagName = tagName.slice(space + 1)\n    }\n    let contentDOM = null, dom = xmlNS ? doc.createElementNS(xmlNS, tagName) : doc.createElement(tagName)\n    let attrs = structure[1], start = 1\n    if (attrs && typeof attrs == \"object\" && attrs.nodeType == null && !Array.isArray(attrs)) {\n      start = 2\n      for (let name in attrs) if (attrs[name] != null) {\n        let space = name.indexOf(\" \")\n        if (space > 0) dom.setAttributeNS(name.slice(0, space), name.slice(space + 1), attrs[name])\n        else dom.setAttribute(name, attrs[name])\n      }\n    }\n    for (let i = start; i < structure.length; i++) {\n      let child = structure[i]\n      if (child === 0) {\n        if (i < structure.length - 1 || i > start)\n          throw new RangeError(\"Content hole must be the only child of its parent node\")\n        return {dom, contentDOM: dom}\n      } else {\n        let {dom: inner, contentDOM: innerContent} = DOMSerializer.renderSpec(doc, child, xmlNS)\n        dom.appendChild(inner)\n        if (innerContent) {\n          if (contentDOM) throw new RangeError(\"Multiple content holes\")\n          contentDOM = innerContent\n        }\n      }\n    }\n    return {dom, contentDOM}\n  }\n\n  // :: (Schema) \u2192 DOMSerializer\n  // Build a serializer using the [`toDOM`](#model.NodeSpec.toDOM)\n  // properties in a schema's node and mark specs.\n  static fromSchema(schema) {\n    return schema.cached.domSerializer ||\n      (schema.cached.domSerializer = new DOMSerializer(this.nodesFromSchema(schema), this.marksFromSchema(schema)))\n  }\n\n  // : (Schema) \u2192 Object<(node: Node) \u2192 DOMOutputSpec>\n  // Gather the serializers in a schema's node specs into an object.\n  // This can be useful as a base to build a custom serializer from.\n  static nodesFromSchema(schema) {\n    let result = gatherToDOM(schema.nodes)\n    if (!result.text) result.text = node => node.text\n    return result\n  }\n\n  // : (Schema) \u2192 Object<(mark: Mark) \u2192 DOMOutputSpec>\n  // Gather the serializers in a schema's mark specs into an object.\n  static marksFromSchema(schema) {\n    return gatherToDOM(schema.marks)\n  }\n}\n\nfunction gatherToDOM(obj) {\n  let result = {}\n  for (let name in obj) {\n    let toDOM = obj[name].spec.toDOM\n    if (toDOM) result[name] = toDOM\n  }\n  return result\n}\n\nfunction doc(options) {\n  // declare global: window\n  return options.document || window.document\n}\n", "// Mappable:: interface\n// There are several things that positions can be mapped through.\n// Such objects conform to this interface.\n//\n//   map:: (pos: number, assoc: ?number) \u2192 number\n//   Map a position through this object. When given, `assoc` (should\n//   be -1 or 1, defaults to 1) determines with which side the\n//   position is associated, which determines in which direction to\n//   move when a chunk of content is inserted at the mapped position.\n//\n//   mapResult:: (pos: number, assoc: ?number) \u2192 MapResult\n//   Map a position, and return an object containing additional\n//   information about the mapping. The result's `deleted` field tells\n//   you whether the position was deleted (completely enclosed in a\n//   replaced range) during the mapping. When content on only one side\n//   is deleted, the position itself is only considered deleted when\n//   `assoc` points in the direction of the deleted content.\n\n// Recovery values encode a range index and an offset. They are\n// represented as numbers, because tons of them will be created when\n// mapping, for example, a large number of decorations. The number's\n// lower 16 bits provide the index, the remaining bits the offset.\n//\n// Note: We intentionally don't use bit shift operators to en- and\n// decode these, since those clip to 32 bits, which we might in rare\n// cases want to overflow. A 64-bit float can represent 48-bit\n// integers precisely.\n\nconst lower16 = 0xffff\nconst factor16 = Math.pow(2, 16)\n\nfunction makeRecover(index, offset) { return index + offset * factor16 }\nfunction recoverIndex(value) { return value & lower16 }\nfunction recoverOffset(value) { return (value - (value & lower16)) / factor16 }\n\n// ::- An object representing a mapped position with extra\n// information.\nexport class MapResult {\n  constructor(pos, deleted = false, recover = null) {\n    // :: number The mapped version of the position.\n    this.pos = pos\n    // :: bool Tells you whether the position was deleted, that is,\n    // whether the step removed its surroundings from the document.\n    this.deleted = deleted\n    this.recover = recover\n  }\n}\n\n// :: class extends Mappable\n// A map describing the deletions and insertions made by a step, which\n// can be used to find the correspondence between positions in the\n// pre-step version of a document and the same position in the\n// post-step version.\nexport class StepMap {\n  // :: ([number])\n  // Create a position map. The modifications to the document are\n  // represented as an array of numbers, in which each group of three\n  // represents a modified chunk as `[start, oldSize, newSize]`.\n  constructor(ranges, inverted = false) {\n    if (!ranges.length && StepMap.empty) return StepMap.empty\n    this.ranges = ranges\n    this.inverted = inverted\n  }\n\n  recover(value) {\n    let diff = 0, index = recoverIndex(value)\n    if (!this.inverted) for (let i = 0; i < index; i++)\n      diff += this.ranges[i * 3 + 2] - this.ranges[i * 3 + 1]\n    return this.ranges[index * 3] + diff + recoverOffset(value)\n  }\n\n  // : (number, ?number) \u2192 MapResult\n  mapResult(pos, assoc = 1) { return this._map(pos, assoc, false) }\n\n  // : (number, ?number) \u2192 number\n  map(pos, assoc = 1) { return this._map(pos, assoc, true) }\n\n  _map(pos, assoc, simple) {\n    let diff = 0, oldIndex = this.inverted ? 2 : 1, newIndex = this.inverted ? 1 : 2\n    for (let i = 0; i < this.ranges.length; i += 3) {\n      let start = this.ranges[i] - (this.inverted ? diff : 0)\n      if (start > pos) break\n      let oldSize = this.ranges[i + oldIndex], newSize = this.ranges[i + newIndex], end = start + oldSize\n      if (pos <= end) {\n        let side = !oldSize ? assoc : pos == start ? -1 : pos == end ? 1 : assoc\n        let result = start + diff + (side < 0 ? 0 : newSize)\n        if (simple) return result\n        let recover = pos == (assoc < 0 ? start : end) ? null : makeRecover(i / 3, pos - start)\n        return new MapResult(result, assoc < 0 ? pos != start : pos != end, recover)\n      }\n      diff += newSize - oldSize\n    }\n    return simple ? pos + diff : new MapResult(pos + diff)\n  }\n\n  touches(pos, recover) {\n    let diff = 0, index = recoverIndex(recover)\n    let oldIndex = this.inverted ? 2 : 1, newIndex = this.inverted ? 1 : 2\n    for (let i = 0; i < this.ranges.length; i += 3) {\n      let start = this.ranges[i] - (this.inverted ? diff : 0)\n      if (start > pos) break\n      let oldSize = this.ranges[i + oldIndex], end = start + oldSize\n      if (pos <= end && i == index * 3) return true\n      diff += this.ranges[i + newIndex] - oldSize\n    }\n    return false\n  }\n\n  // :: ((oldStart: number, oldEnd: number, newStart: number, newEnd: number))\n  // Calls the given function on each of the changed ranges included in\n  // this map.\n  forEach(f) {\n    let oldIndex = this.inverted ? 2 : 1, newIndex = this.inverted ? 1 : 2\n    for (let i = 0, diff = 0; i < this.ranges.length; i += 3) {\n      let start = this.ranges[i], oldStart = start - (this.inverted ? diff : 0), newStart = start + (this.inverted ? 0 : diff)\n      let oldSize = this.ranges[i + oldIndex], newSize = this.ranges[i + newIndex]\n      f(oldStart, oldStart + oldSize, newStart, newStart + newSize)\n      diff += newSize - oldSize\n    }\n  }\n\n  // :: () \u2192 StepMap\n  // Create an inverted version of this map. The result can be used to\n  // map positions in the post-step document to the pre-step document.\n  invert() {\n    return new StepMap(this.ranges, !this.inverted)\n  }\n\n  toString() {\n    return (this.inverted ? \"-\" : \"\") + JSON.stringify(this.ranges)\n  }\n\n  // :: (n: number) \u2192 StepMap\n  // Create a map that moves all positions by offset `n` (which may be\n  // negative). This can be useful when applying steps meant for a\n  // sub-document to a larger document, or vice-versa.\n  static offset(n) {\n    return n == 0 ? StepMap.empty : new StepMap(n < 0 ? [0, -n, 0] : [0, 0, n])\n  }\n}\n\nStepMap.empty = new StepMap([])\n\n// :: class extends Mappable\n// A mapping represents a pipeline of zero or more [step\n// maps](#transform.StepMap). It has special provisions for losslessly\n// handling mapping positions through a series of steps in which some\n// steps are inverted versions of earlier steps. (This comes up when\n// \u2018[rebasing](/docs/guide/#transform.rebasing)\u2019 steps for\n// collaboration or history management.)\nexport class Mapping {\n  // :: (?[StepMap])\n  // Create a new mapping with the given position maps.\n  constructor(maps, mirror, from, to) {\n    // :: [StepMap]\n    // The step maps in this mapping.\n    this.maps = maps || []\n    // :: number\n    // The starting position in the `maps` array, used when `map` or\n    // `mapResult` is called.\n    this.from = from || 0\n    // :: number\n    // The end position in the `maps` array.\n    this.to = to == null ? this.maps.length : to\n    this.mirror = mirror\n  }\n\n  // :: (?number, ?number) \u2192 Mapping\n  // Create a mapping that maps only through a part of this one.\n  slice(from = 0, to = this.maps.length) {\n    return new Mapping(this.maps, this.mirror, from, to)\n  }\n\n  copy() {\n    return new Mapping(this.maps.slice(), this.mirror && this.mirror.slice(), this.from, this.to)\n  }\n\n  // :: (StepMap, ?number)\n  // Add a step map to the end of this mapping. If `mirrors` is\n  // given, it should be the index of the step map that is the mirror\n  // image of this one.\n  appendMap(map, mirrors) {\n    this.to = this.maps.push(map)\n    if (mirrors != null) this.setMirror(this.maps.length - 1, mirrors)\n  }\n\n  // :: (Mapping)\n  // Add all the step maps in a given mapping to this one (preserving\n  // mirroring information).\n  appendMapping(mapping) {\n    for (let i = 0, startSize = this.maps.length; i < mapping.maps.length; i++) {\n      let mirr = mapping.getMirror(i)\n      this.appendMap(mapping.maps[i], mirr != null && mirr < i ? startSize + mirr : null)\n    }\n  }\n\n  // :: (number) \u2192 ?number\n  // Finds the offset of the step map that mirrors the map at the\n  // given offset, in this mapping (as per the second argument to\n  // `appendMap`).\n  getMirror(n) {\n    if (this.mirror) for (let i = 0; i < this.mirror.length; i++)\n      if (this.mirror[i] == n) return this.mirror[i + (i % 2 ? -1 : 1)]\n  }\n\n  setMirror(n, m) {\n    if (!this.mirror) this.mirror = []\n    this.mirror.push(n, m)\n  }\n\n  // :: (Mapping)\n  // Append the inverse of the given mapping to this one.\n  appendMappingInverted(mapping) {\n    for (let i = mapping.maps.length - 1, totalSize = this.maps.length + mapping.maps.length; i >= 0; i--) {\n      let mirr = mapping.getMirror(i)\n      this.appendMap(mapping.maps[i].invert(), mirr != null && mirr > i ? totalSize - mirr - 1 : null)\n    }\n  }\n\n  // :: () \u2192 Mapping\n  // Create an inverted version of this mapping.\n  invert() {\n    let inverse = new Mapping\n    inverse.appendMappingInverted(this)\n    return inverse\n  }\n\n  // : (number, ?number) \u2192 number\n  // Map a position through this mapping.\n  map(pos, assoc = 1) {\n    if (this.mirror) return this._map(pos, assoc, true)\n    for (let i = this.from; i < this.to; i++)\n      pos = this.maps[i].map(pos, assoc)\n    return pos\n  }\n\n  // : (number, ?number) \u2192 MapResult\n  // Map a position through this mapping, returning a mapping\n  // result.\n  mapResult(pos, assoc = 1) { return this._map(pos, assoc, false) }\n\n  _map(pos, assoc, simple) {\n    let deleted = false\n\n    for (let i = this.from; i < this.to; i++) {\n      let map = this.maps[i], result = map.mapResult(pos, assoc)\n      if (result.recover != null) {\n        let corr = this.getMirror(i)\n        if (corr != null && corr > i && corr < this.to) {\n          i = corr\n          pos = this.maps[corr].recover(result.recover)\n          continue\n        }\n      }\n\n      if (result.deleted) deleted = true\n      pos = result.pos\n    }\n\n    return simple ? pos : new MapResult(pos, deleted)\n  }\n}\n", "import {Mapping} from \"./map\"\n\nexport function TransformError(message) {\n  let err = Error.call(this, message)\n  err.__proto__ = TransformError.prototype\n  return err\n}\n\nTransformError.prototype = Object.create(Error.prototype)\nTransformError.prototype.constructor = TransformError\nTransformError.prototype.name = \"TransformError\"\n\n// ::- Abstraction to build up and track an array of\n// [steps](#transform.Step) representing a document transformation.\n//\n// Most transforming methods return the `Transform` object itself, so\n// that they can be chained.\nexport class Transform {\n  // :: (Node)\n  // Create a transform that starts with the given document.\n  constructor(doc) {\n    // :: Node\n    // The current document (the result of applying the steps in the\n    // transform).\n    this.doc = doc\n    // :: [Step]\n    // The steps in this transform.\n    this.steps = []\n    // :: [Node]\n    // The documents before each of the steps.\n    this.docs = []\n    // :: Mapping\n    // A mapping with the maps for each of the steps in this transform.\n    this.mapping = new Mapping\n  }\n\n  // :: Node The starting document.\n  get before() { return this.docs.length ? this.docs[0] : this.doc }\n\n  // :: (step: Step) \u2192 this\n  // Apply a new step in this transform, saving the result. Throws an\n  // error when the step fails.\n  step(object) {\n    let result = this.maybeStep(object)\n    if (result.failed) throw new TransformError(result.failed)\n    return this\n  }\n\n  // :: (Step) \u2192 StepResult\n  // Try to apply a step in this transformation, ignoring it if it\n  // fails. Returns the step result.\n  maybeStep(step) {\n    let result = step.apply(this.doc)\n    if (!result.failed) this.addStep(step, result.doc)\n    return result\n  }\n\n  // :: bool\n  // True when the document has been changed (when there are any\n  // steps).\n  get docChanged() {\n    return this.steps.length > 0\n  }\n\n  addStep(step, doc) {\n    this.docs.push(this.doc)\n    this.steps.push(step)\n    this.mapping.appendMap(step.getMap())\n    this.doc = doc\n  }\n}\n", "import {ReplaceError} from \"prosemirror-model\"\n\nimport {StepMap} from \"./map\"\n\nfunction mustOverride() { throw new Error(\"Override me\") }\n\nconst stepsByID = Object.create(null)\n\n// ::- A step object represents an atomic change. It generally applies\n// only to the document it was created for, since the positions\n// stored in it will only make sense for that document.\n//\n// New steps are defined by creating classes that extend `Step`,\n// overriding the `apply`, `invert`, `map`, `getMap` and `fromJSON`\n// methods, and registering your class with a unique\n// JSON-serialization identifier using\n// [`Step.jsonID`](#transform.Step^jsonID).\nexport class Step {\n  // :: (doc: Node) \u2192 StepResult\n  // Applies this step to the given document, returning a result\n  // object that either indicates failure, if the step can not be\n  // applied to this document, or indicates success by containing a\n  // transformed document.\n  apply(_doc) { return mustOverride() }\n\n  // :: () \u2192 StepMap\n  // Get the step map that represents the changes made by this step,\n  // and which can be used to transform between positions in the old\n  // and the new document.\n  getMap() { return StepMap.empty }\n\n  // :: (doc: Node) \u2192 Step\n  // Create an inverted version of this step. Needs the document as it\n  // was before the step as argument.\n  invert(_doc) { return mustOverride() }\n\n  // :: (mapping: Mappable) \u2192 ?Step\n  // Map this step through a mappable thing, returning either a\n  // version of that step with its positions adjusted, or `null` if\n  // the step was entirely deleted by the mapping.\n  map(_mapping) { return mustOverride() }\n\n  // :: (other: Step) \u2192 ?Step\n  // Try to merge this step with another one, to be applied directly\n  // after it. Returns the merged step when possible, null if the\n  // steps can't be merged.\n  merge(_other) { return null }\n\n  // :: () \u2192 Object\n  // Create a JSON-serializeable representation of this step. When\n  // defining this for a custom subclass, make sure the result object\n  // includes the step type's [JSON id](#transform.Step^jsonID) under\n  // the `stepType` property.\n  toJSON() { return mustOverride() }\n\n  // :: (Schema, Object) \u2192 Step\n  // Deserialize a step from its JSON representation. Will call\n  // through to the step class' own implementation of this method.\n  static fromJSON(schema, json) {\n    if (!json || !json.stepType) throw new RangeError(\"Invalid input for Step.fromJSON\")\n    let type = stepsByID[json.stepType]\n    if (!type) throw new RangeError(`No step type ${json.stepType} defined`)\n    return type.fromJSON(schema, json)\n  }\n\n  // :: (string, constructor<Step>)\n  // To be able to serialize steps to JSON, each step needs a string\n  // ID to attach to its JSON representation. Use this method to\n  // register an ID for your step classes. Try to pick something\n  // that's unlikely to clash with steps from other modules.\n  static jsonID(id, stepClass) {\n    if (id in stepsByID) throw new RangeError(\"Duplicate use of step JSON ID \" + id)\n    stepsByID[id] = stepClass\n    stepClass.prototype.jsonID = id\n    return stepClass\n  }\n}\n\n// ::- The result of [applying](#transform.Step.apply) a step. Contains either a\n// new document or a failure value.\nexport class StepResult {\n  // : (?Node, ?string)\n  constructor(doc, failed) {\n    // :: ?Node The transformed document.\n    this.doc = doc\n    // :: ?string Text providing information about a failed step.\n    this.failed = failed\n  }\n\n  // :: (Node) \u2192 StepResult\n  // Create a successful step result.\n  static ok(doc) { return new StepResult(doc, null) }\n\n  // :: (string) \u2192 StepResult\n  // Create a failed step result.\n  static fail(message) { return new StepResult(null, message) }\n\n  // :: (Node, number, number, Slice) \u2192 StepResult\n  // Call [`Node.replace`](#model.Node.replace) with the given\n  // arguments. Create a successful result if it succeeds, and a\n  // failed one if it throws a `ReplaceError`.\n  static fromReplace(doc, from, to, slice) {\n    try {\n      return StepResult.ok(doc.replace(from, to, slice))\n    } catch (e) {\n      if (e instanceof ReplaceError) return StepResult.fail(e.message)\n      throw e\n    }\n  }\n}\n", "import {Slice} from \"prosemirror-model\"\n\nimport {Step, StepResult} from \"./step\"\nimport {StepMap} from \"./map\"\n\n// ::- Replace a part of the document with a slice of new content.\nexport class ReplaceStep extends Step {\n  // :: (number, number, Slice, ?bool)\n  // The given `slice` should fit the 'gap' between `from` and\n  // `to`\u2014the depths must line up, and the surrounding nodes must be\n  // able to be joined with the open sides of the slice. When\n  // `structure` is true, the step will fail if the content between\n  // from and to is not just a sequence of closing and then opening\n  // tokens (this is to guard against rebased replace steps\n  // overwriting something they weren't supposed to).\n  constructor(from, to, slice, structure) {\n    super()\n    // :: number\n    // The start position of the replaced range.\n    this.from = from\n    // :: number\n    // The end position of the replaced range.\n    this.to = to\n    // :: Slice\n    // The slice to insert.\n    this.slice = slice\n    this.structure = !!structure\n  }\n\n  apply(doc) {\n    if (this.structure && contentBetween(doc, this.from, this.to))\n      return StepResult.fail(\"Structure replace would overwrite content\")\n    return StepResult.fromReplace(doc, this.from, this.to, this.slice)\n  }\n\n  getMap() {\n    return new StepMap([this.from, this.to - this.from, this.slice.size])\n  }\n\n  invert(doc) {\n    return new ReplaceStep(this.from, this.from + this.slice.size, doc.slice(this.from, this.to))\n  }\n\n  map(mapping) {\n    let from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1)\n    if (from.deleted && to.deleted) return null\n    return new ReplaceStep(from.pos, Math.max(from.pos, to.pos), this.slice)\n  }\n\n  merge(other) {\n    if (!(other instanceof ReplaceStep) || other.structure || this.structure) return null\n\n    if (this.from + this.slice.size == other.from && !this.slice.openEnd && !other.slice.openStart) {\n      let slice = this.slice.size + other.slice.size == 0 ? Slice.empty\n          : new Slice(this.slice.content.append(other.slice.content), this.slice.openStart, other.slice.openEnd)\n      return new ReplaceStep(this.from, this.to + (other.to - other.from), slice, this.structure)\n    } else if (other.to == this.from && !this.slice.openStart && !other.slice.openEnd) {\n      let slice = this.slice.size + other.slice.size == 0 ? Slice.empty\n          : new Slice(other.slice.content.append(this.slice.content), other.slice.openStart, this.slice.openEnd)\n      return new ReplaceStep(other.from, this.to, slice, this.structure)\n    } else {\n      return null\n    }\n  }\n\n  toJSON() {\n    let json = {stepType: \"replace\", from: this.from, to: this.to}\n    if (this.slice.size) json.slice = this.slice.toJSON()\n    if (this.structure) json.structure = true\n    return json\n  }\n\n  static fromJSON(schema, json) {\n    if (typeof json.from != \"number\" || typeof json.to != \"number\")\n      throw new RangeError(\"Invalid input for ReplaceStep.fromJSON\")\n    return new ReplaceStep(json.from, json.to, Slice.fromJSON(schema, json.slice), !!json.structure)\n  }\n}\n\nStep.jsonID(\"replace\", ReplaceStep)\n\n// ::- Replace a part of the document with a slice of content, but\n// preserve a range of the replaced content by moving it into the\n// slice.\nexport class ReplaceAroundStep extends Step {\n  // :: (number, number, number, number, Slice, number, ?bool)\n  // Create a replace-around step with the given range and gap.\n  // `insert` should be the point in the slice into which the content\n  // of the gap should be moved. `structure` has the same meaning as\n  // it has in the [`ReplaceStep`](#transform.ReplaceStep) class.\n  constructor(from, to, gapFrom, gapTo, slice, insert, structure) {\n    super()\n    // :: number\n    // The start position of the replaced range.\n    this.from = from\n    // :: number\n    // The end position of the replaced range.\n    this.to = to\n    // :: number\n    // The start of preserved range.\n    this.gapFrom = gapFrom\n    // :: number\n    // The end of preserved range.\n    this.gapTo = gapTo\n    // :: Slice\n    // The slice to insert.\n    this.slice = slice\n    // :: number\n    // The position in the slice where the preserved range should be\n    // inserted.\n    this.insert = insert\n    this.structure = !!structure\n  }\n\n  apply(doc) {\n    if (this.structure && (contentBetween(doc, this.from, this.gapFrom) ||\n                           contentBetween(doc, this.gapTo, this.to)))\n      return StepResult.fail(\"Structure gap-replace would overwrite content\")\n\n    let gap = doc.slice(this.gapFrom, this.gapTo)\n    if (gap.openStart || gap.openEnd)\n      return StepResult.fail(\"Gap is not a flat range\")\n    let inserted = this.slice.insertAt(this.insert, gap.content)\n    if (!inserted) return StepResult.fail(\"Content does not fit in gap\")\n    return StepResult.fromReplace(doc, this.from, this.to, inserted)\n  }\n\n  getMap() {\n    return new StepMap([this.from, this.gapFrom - this.from, this.insert,\n                        this.gapTo, this.to - this.gapTo, this.slice.size - this.insert])\n  }\n\n  invert(doc) {\n    let gap = this.gapTo - this.gapFrom\n    return new ReplaceAroundStep(this.from, this.from + this.slice.size + gap,\n                                 this.from + this.insert, this.from + this.insert + gap,\n                                 doc.slice(this.from, this.to).removeBetween(this.gapFrom - this.from, this.gapTo - this.from),\n                                 this.gapFrom - this.from, this.structure)\n  }\n\n  map(mapping) {\n    let from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1)\n    let gapFrom = mapping.map(this.gapFrom, -1), gapTo = mapping.map(this.gapTo, 1)\n    if ((from.deleted && to.deleted) || gapFrom < from.pos || gapTo > to.pos) return null\n    return new ReplaceAroundStep(from.pos, to.pos, gapFrom, gapTo, this.slice, this.insert, this.structure)\n  }\n\n  toJSON() {\n    let json = {stepType: \"replaceAround\", from: this.from, to: this.to,\n                gapFrom: this.gapFrom, gapTo: this.gapTo, insert: this.insert}\n    if (this.slice.size) json.slice = this.slice.toJSON()\n    if (this.structure) json.structure = true\n    return json\n  }\n\n  static fromJSON(schema, json) {\n    if (typeof json.from != \"number\" || typeof json.to != \"number\" ||\n        typeof json.gapFrom != \"number\" || typeof json.gapTo != \"number\" || typeof json.insert != \"number\")\n      throw new RangeError(\"Invalid input for ReplaceAroundStep.fromJSON\")\n    return new ReplaceAroundStep(json.from, json.to, json.gapFrom, json.gapTo,\n                                 Slice.fromJSON(schema, json.slice), json.insert, !!json.structure)\n  }\n}\n\nStep.jsonID(\"replaceAround\", ReplaceAroundStep)\n\nfunction contentBetween(doc, from, to) {\n  let $from = doc.resolve(from), dist = to - from, depth = $from.depth\n  while (dist > 0 && depth > 0 && $from.indexAfter(depth) == $from.node(depth).childCount) {\n    depth--\n    dist--\n  }\n  if (dist > 0) {\n    let next = $from.node(depth).maybeChild($from.indexAfter(depth))\n    while (dist > 0) {\n      if (!next || next.isLeaf) return true\n      next = next.firstChild\n      dist--\n    }\n  }\n  return false\n}\n", "import {Slice, Fragment} from \"prosemirror-model\"\n\nimport {Transform} from \"./transform\"\nimport {ReplaceStep, ReplaceAroundStep} from \"./replace_step\"\n\nfunction canCut(node, start, end) {\n  return (start == 0 || node.canReplace(start, node.childCount)) &&\n    (end == node.childCount || node.canReplace(0, end))\n}\n\n// :: (NodeRange) \u2192 ?number\n// Try to find a target depth to which the content in the given range\n// can be lifted. Will not go across\n// [isolating](#model.NodeSpec.isolating) parent nodes.\nexport function liftTarget(range) {\n  let parent = range.parent\n  let content = parent.content.cutByIndex(range.startIndex, range.endIndex)\n  for (let depth = range.depth;; --depth) {\n    let node = range.$from.node(depth)\n    let index = range.$from.index(depth), endIndex = range.$to.indexAfter(depth)\n    if (depth < range.depth && node.canReplace(index, endIndex, content))\n      return depth\n    if (depth == 0 || node.type.spec.isolating || !canCut(node, index, endIndex)) break\n  }\n}\n\n// :: (NodeRange, number) \u2192 this\n// Split the content in the given range off from its parent, if there\n// is sibling content before or after it, and move it up the tree to\n// the depth specified by `target`. You'll probably want to use\n// [`liftTarget`](#transform.liftTarget) to compute `target`, to make\n// sure the lift is valid.\nTransform.prototype.lift = function(range, target) {\n  let {$from, $to, depth} = range\n\n  let gapStart = $from.before(depth + 1), gapEnd = $to.after(depth + 1)\n  let start = gapStart, end = gapEnd\n\n  let before = Fragment.empty, openStart = 0\n  for (let d = depth, splitting = false; d > target; d--)\n    if (splitting || $from.index(d) > 0) {\n      splitting = true\n      before = Fragment.from($from.node(d).copy(before))\n      openStart++\n    } else {\n      start--\n    }\n  let after = Fragment.empty, openEnd = 0\n  for (let d = depth, splitting = false; d > target; d--)\n    if (splitting || $to.after(d + 1) < $to.end(d)) {\n      splitting = true\n      after = Fragment.from($to.node(d).copy(after))\n      openEnd++\n    } else {\n      end++\n    }\n\n  return this.step(new ReplaceAroundStep(start, end, gapStart, gapEnd,\n                                         new Slice(before.append(after), openStart, openEnd),\n                                         before.size - openStart, true))\n}\n\n// :: (NodeRange, NodeType, ?Object, ?NodeRange) \u2192 ?[{type: NodeType, attrs: ?Object}]\n// Try to find a valid way to wrap the content in the given range in a\n// node of the given type. May introduce extra nodes around and inside\n// the wrapper node, if necessary. Returns null if no valid wrapping\n// could be found. When `innerRange` is given, that range's content is\n// used as the content to fit into the wrapping, instead of the\n// content of `range`.\nexport function findWrapping(range, nodeType, attrs, innerRange = range) {\n  let around = findWrappingOutside(range, nodeType)\n  let inner = around && findWrappingInside(innerRange, nodeType)\n  if (!inner) return null\n  return around.map(withAttrs).concat({type: nodeType, attrs}).concat(inner.map(withAttrs))\n}\n\nfunction withAttrs(type) { return {type, attrs: null} }\n\nfunction findWrappingOutside(range, type) {\n  let {parent, startIndex, endIndex} = range\n  let around = parent.contentMatchAt(startIndex).findWrapping(type)\n  if (!around) return null\n  let outer = around.length ? around[0] : type\n  return parent.canReplaceWith(startIndex, endIndex, outer) ? around : null\n}\n\nfunction findWrappingInside(range, type) {\n  let {parent, startIndex, endIndex} = range\n  let inner = parent.child(startIndex)\n  let inside = type.contentMatch.findWrapping(inner.type)\n  if (!inside) return null\n  let lastType = inside.length ? inside[inside.length - 1] : type\n  let innerMatch = lastType.contentMatch\n  for (let i = startIndex; innerMatch && i < endIndex; i++)\n    innerMatch = innerMatch.matchType(parent.child(i).type)\n  if (!innerMatch || !innerMatch.validEnd) return null\n  return inside\n}\n\n// :: (NodeRange, [{type: NodeType, attrs: ?Object}]) \u2192 this\n// Wrap the given [range](#model.NodeRange) in the given set of wrappers.\n// The wrappers are assumed to be valid in this position, and should\n// probably be computed with [`findWrapping`](#transform.findWrapping).\nTransform.prototype.wrap = function(range, wrappers) {\n  let content = Fragment.empty\n  for (let i = wrappers.length - 1; i >= 0; i--) {\n    if (content.size) {\n      let match = wrappers[i].type.contentMatch.matchFragment(content)\n      if (!match || !match.validEnd)\n        throw new RangeError(\"Wrapper type given to Transform.wrap does not form valid content of its parent wrapper\")\n    }\n    content = Fragment.from(wrappers[i].type.create(wrappers[i].attrs, content))\n  }\n\n  let start = range.start, end = range.end\n  return this.step(new ReplaceAroundStep(start, end, start, end, new Slice(content, 0, 0), wrappers.length, true))\n}\n\n// :: (number, ?number, NodeType, ?Object) \u2192 this\n// Set the type of all textblocks (partly) between `from` and `to` to\n// the given node type with the given attributes.\nTransform.prototype.setBlockType = function(from, to = from, type, attrs) {\n  if (!type.isTextblock) throw new RangeError(\"Type given to setBlockType should be a textblock\")\n  let mapFrom = this.steps.length\n  this.doc.nodesBetween(from, to, (node, pos) => {\n    if (node.isTextblock && !node.hasMarkup(type, attrs) && canChangeType(this.doc, this.mapping.slice(mapFrom).map(pos), type)) {\n      // Ensure all markup that isn't allowed in the new node type is cleared\n      this.clearIncompatible(this.mapping.slice(mapFrom).map(pos, 1), type)\n      let mapping = this.mapping.slice(mapFrom)\n      let startM = mapping.map(pos, 1), endM = mapping.map(pos + node.nodeSize, 1)\n      this.step(new ReplaceAroundStep(startM, endM, startM + 1, endM - 1,\n                                      new Slice(Fragment.from(type.create(attrs, null, node.marks)), 0, 0), 1, true))\n      return false\n    }\n  })\n  return this\n}\n\nfunction canChangeType(doc, pos, type) {\n  let $pos = doc.resolve(pos), index = $pos.index()\n  return $pos.parent.canReplaceWith(index, index + 1, type)\n}\n\n// :: (number, ?NodeType, ?Object, ?[Mark]) \u2192 this\n// Change the type, attributes, and/or marks of the node at `pos`.\n// When `type` isn't given, the existing node type is preserved,\nTransform.prototype.setNodeMarkup = function(pos, type, attrs, marks) {\n  let node = this.doc.nodeAt(pos)\n  if (!node) throw new RangeError(\"No node at given position\")\n  if (!type) type = node.type\n  let newNode = type.create(attrs, null, marks || node.marks)\n  if (node.isLeaf)\n    return this.replaceWith(pos, pos + node.nodeSize, newNode)\n\n  if (!type.validContent(node.content))\n    throw new RangeError(\"Invalid content for node type \" + type.name)\n\n  return this.step(new ReplaceAroundStep(pos, pos + node.nodeSize, pos + 1, pos + node.nodeSize - 1,\n                                         new Slice(Fragment.from(newNode), 0, 0), 1, true))\n}\n\n// :: (Node, number, number, ?[?{type: NodeType, attrs: ?Object}]) \u2192 bool\n// Check whether splitting at the given position is allowed.\nexport function canSplit(doc, pos, depth = 1, typesAfter) {\n  let $pos = doc.resolve(pos), base = $pos.depth - depth\n  let innerType = (typesAfter && typesAfter[typesAfter.length - 1]) || $pos.parent\n  if (base < 0 || $pos.parent.type.spec.isolating ||\n      !$pos.parent.canReplace($pos.index(), $pos.parent.childCount) ||\n      !innerType.type.validContent($pos.parent.content.cutByIndex($pos.index(), $pos.parent.childCount)))\n    return false\n  for (let d = $pos.depth - 1, i = depth - 2; d > base; d--, i--) {\n    let node = $pos.node(d), index = $pos.index(d)\n    if (node.type.spec.isolating) return false\n    let rest = node.content.cutByIndex(index, node.childCount)\n    let after = (typesAfter && typesAfter[i]) || node\n    if (after != node) rest = rest.replaceChild(0, after.type.create(after.attrs))\n    if (!node.canReplace(index + 1, node.childCount) || !after.type.validContent(rest))\n      return false\n  }\n  let index = $pos.indexAfter(base)\n  let baseType = typesAfter && typesAfter[0]\n  return $pos.node(base).canReplaceWith(index, index, baseType ? baseType.type : $pos.node(base + 1).type)\n}\n\n// :: (number, ?number, ?[?{type: NodeType, attrs: ?Object}]) \u2192 this\n// Split the node at the given position, and optionally, if `depth` is\n// greater than one, any number of nodes above that. By default, the\n// parts split off will inherit the node type of the original node.\n// This can be changed by passing an array of types and attributes to\n// use after the split.\nTransform.prototype.split = function(pos, depth = 1, typesAfter) {\n  let $pos = this.doc.resolve(pos), before = Fragment.empty, after = Fragment.empty\n  for (let d = $pos.depth, e = $pos.depth - depth, i = depth - 1; d > e; d--, i--) {\n    before = Fragment.from($pos.node(d).copy(before))\n    let typeAfter = typesAfter && typesAfter[i]\n    after = Fragment.from(typeAfter ? typeAfter.type.create(typeAfter.attrs, after) : $pos.node(d).copy(after))\n  }\n  return this.step(new ReplaceStep(pos, pos, new Slice(before.append(after), depth, depth), true))\n}\n\n// :: (Node, number) \u2192 bool\n// Test whether the blocks before and after a given position can be\n// joined.\nexport function canJoin(doc, pos) {\n  let $pos = doc.resolve(pos), index = $pos.index()\n  return joinable($pos.nodeBefore, $pos.nodeAfter) &&\n    $pos.parent.canReplace(index, index + 1)\n}\n\nfunction joinable(a, b) {\n  return a && b && !a.isLeaf && a.canAppend(b)\n}\n\n// :: (Node, number, ?number) \u2192 ?number\n// Find an ancestor of the given position that can be joined to the\n// block before (or after if `dir` is positive). Returns the joinable\n// point, if any.\nexport function joinPoint(doc, pos, dir = -1) {\n  let $pos = doc.resolve(pos)\n  for (let d = $pos.depth;; d--) {\n    let before, after, index = $pos.index(d)\n    if (d == $pos.depth) {\n      before = $pos.nodeBefore\n      after = $pos.nodeAfter\n    } else if (dir > 0) {\n      before = $pos.node(d + 1)\n      index++\n      after = $pos.node(d).maybeChild(index)\n    } else {\n      before = $pos.node(d).maybeChild(index - 1)\n      after = $pos.node(d + 1)\n    }\n    if (before && !before.isTextblock && joinable(before, after) &&\n        $pos.node(d).canReplace(index, index + 1)) return pos\n    if (d == 0) break\n    pos = dir < 0 ? $pos.before(d) : $pos.after(d)\n  }\n}\n\n// :: (number, ?number) \u2192 this\n// Join the blocks around the given position. If depth is 2, their\n// last and first siblings are also joined, and so on.\nTransform.prototype.join = function(pos, depth = 1) {\n  let step = new ReplaceStep(pos - depth, pos + depth, Slice.empty, true)\n  return this.step(step)\n}\n\n// :: (Node, number, NodeType) \u2192 ?number\n// Try to find a point where a node of the given type can be inserted\n// near `pos`, by searching up the node hierarchy when `pos` itself\n// isn't a valid place but is at the start or end of a node. Return\n// null if no position was found.\nexport function insertPoint(doc, pos, nodeType) {\n  let $pos = doc.resolve(pos)\n  if ($pos.parent.canReplaceWith($pos.index(), $pos.index(), nodeType)) return pos\n\n  if ($pos.parentOffset == 0)\n    for (let d = $pos.depth - 1; d >= 0; d--) {\n      let index = $pos.index(d)\n      if ($pos.node(d).canReplaceWith(index, index, nodeType)) return $pos.before(d + 1)\n      if (index > 0) return null\n    }\n  if ($pos.parentOffset == $pos.parent.content.size)\n    for (let d = $pos.depth - 1; d >= 0; d--) {\n      let index = $pos.indexAfter(d)\n      if ($pos.node(d).canReplaceWith(index, index, nodeType)) return $pos.after(d + 1)\n      if (index < $pos.node(d).childCount) return null\n    }\n}\n\n// :: (Node, number, Slice) \u2192 ?number\n// Finds a position at or around the given position where the given\n// slice can be inserted. Will look at parent nodes' nearest boundary\n// and try there, even if the original position wasn't directly at the\n// start or end of that node. Returns null when no position was found.\nexport function dropPoint(doc, pos, slice) {\n  let $pos = doc.resolve(pos)\n  if (!slice.content.size) return pos\n  let content = slice.content\n  for (let i = 0; i < slice.openStart; i++) content = content.firstChild.content\n  for (let pass = 1; pass <= (slice.openStart == 0 && slice.size ? 2 : 1); pass++) {\n    for (let d = $pos.depth; d >= 0; d--) {\n      let bias = d == $pos.depth ? 0 : $pos.pos <= ($pos.start(d + 1) + $pos.end(d + 1)) / 2 ? -1 : 1\n      let insertPos = $pos.index(d) + (bias > 0 ? 1 : 0)\n      let parent = $pos.node(d), fits = false\n      if (pass == 1) {\n        fits = parent.canReplace(insertPos, insertPos, content)\n      } else {\n        let wrapping = parent.contentMatchAt(insertPos).findWrapping(content.firstChild.type)\n        fits = wrapping && parent.canReplaceWith(insertPos, insertPos, wrapping[0])\n      }\n      if (fits)\n        return bias == 0 ? $pos.pos : bias < 0 ? $pos.before(d + 1) : $pos.after(d + 1)\n    }\n  }\n  return null\n}\n", "import {Fragment, Slice} from \"prosemirror-model\"\nimport {Step, StepResult} from \"./step\"\n\nfunction mapFragment(fragment, f, parent) {\n  let mapped = []\n  for (let i = 0; i < fragment.childCount; i++) {\n    let child = fragment.child(i)\n    if (child.content.size) child = child.copy(mapFragment(child.content, f, child))\n    if (child.isInline) child = f(child, parent, i)\n    mapped.push(child)\n  }\n  return Fragment.fromArray(mapped)\n}\n\n// ::- Add a mark to all inline content between two positions.\nexport class AddMarkStep extends Step {\n  // :: (number, number, Mark)\n  constructor(from, to, mark) {\n    super()\n    // :: number\n    // The start of the marked range.\n    this.from = from\n    // :: number\n    // The end of the marked range.\n    this.to = to\n    // :: Mark\n    // The mark to add.\n    this.mark = mark\n  }\n\n  apply(doc) {\n    let oldSlice = doc.slice(this.from, this.to), $from = doc.resolve(this.from)\n    let parent = $from.node($from.sharedDepth(this.to))\n    let slice = new Slice(mapFragment(oldSlice.content, (node, parent) => {\n      if (!node.isAtom || !parent.type.allowsMarkType(this.mark.type)) return node\n      return node.mark(this.mark.addToSet(node.marks))\n    }, parent), oldSlice.openStart, oldSlice.openEnd)\n    return StepResult.fromReplace(doc, this.from, this.to, slice)\n  }\n\n  invert() {\n    return new RemoveMarkStep(this.from, this.to, this.mark)\n  }\n\n  map(mapping) {\n    let from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1)\n    if (from.deleted && to.deleted || from.pos >= to.pos) return null\n    return new AddMarkStep(from.pos, to.pos, this.mark)\n  }\n\n  merge(other) {\n    if (other instanceof AddMarkStep &&\n        other.mark.eq(this.mark) &&\n        this.from <= other.to && this.to >= other.from)\n      return new AddMarkStep(Math.min(this.from, other.from),\n                             Math.max(this.to, other.to), this.mark)\n  }\n\n  toJSON() {\n    return {stepType: \"addMark\", mark: this.mark.toJSON(),\n            from: this.from, to: this.to}\n  }\n\n  static fromJSON(schema, json) {\n    if (typeof json.from != \"number\" || typeof json.to != \"number\")\n      throw new RangeError(\"Invalid input for AddMarkStep.fromJSON\")\n    return new AddMarkStep(json.from, json.to, schema.markFromJSON(json.mark))\n  }\n}\n\nStep.jsonID(\"addMark\", AddMarkStep)\n\n// ::- Remove a mark from all inline content between two positions.\nexport class RemoveMarkStep extends Step {\n  // :: (number, number, Mark)\n  constructor(from, to, mark) {\n    super()\n    // :: number\n    // The start of the unmarked range.\n    this.from = from\n    // :: number\n    // The end of the unmarked range.\n    this.to = to\n    // :: Mark\n    // The mark to remove.\n    this.mark = mark\n  }\n\n  apply(doc) {\n    let oldSlice = doc.slice(this.from, this.to)\n    let slice = new Slice(mapFragment(oldSlice.content, node => {\n      return node.mark(this.mark.removeFromSet(node.marks))\n    }), oldSlice.openStart, oldSlice.openEnd)\n    return StepResult.fromReplace(doc, this.from, this.to, slice)\n  }\n\n  invert() {\n    return new AddMarkStep(this.from, this.to, this.mark)\n  }\n\n  map(mapping) {\n    let from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1)\n    if (from.deleted && to.deleted || from.pos >= to.pos) return null\n    return new RemoveMarkStep(from.pos, to.pos, this.mark)\n  }\n\n  merge(other) {\n    if (other instanceof RemoveMarkStep &&\n        other.mark.eq(this.mark) &&\n        this.from <= other.to && this.to >= other.from)\n      return new RemoveMarkStep(Math.min(this.from, other.from),\n                                Math.max(this.to, other.to), this.mark)\n  }\n\n  toJSON() {\n    return {stepType: \"removeMark\", mark: this.mark.toJSON(),\n            from: this.from, to: this.to}\n  }\n\n  static fromJSON(schema, json) {\n    if (typeof json.from != \"number\" || typeof json.to != \"number\")\n      throw new RangeError(\"Invalid input for RemoveMarkStep.fromJSON\")\n    return new RemoveMarkStep(json.from, json.to, schema.markFromJSON(json.mark))\n  }\n}\n\nStep.jsonID(\"removeMark\", RemoveMarkStep)\n", "import {MarkType, Slice, Fragment} from \"prosemirror-model\"\n\nimport {Transform} from \"./transform\"\nimport {AddMarkStep, RemoveMarkStep} from \"./mark_step\"\nimport {ReplaceStep} from \"./replace_step\"\n\n// :: (number, number, Mark) \u2192 this\n// Add the given mark to the inline content between `from` and `to`.\nTransform.prototype.addMark = function(from, to, mark) {\n  let removed = [], added = [], removing = null, adding = null\n  this.doc.nodesBetween(from, to, (node, pos, parent) => {\n    if (!node.isInline) return\n    let marks = node.marks\n    if (!mark.isInSet(marks) && parent.type.allowsMarkType(mark.type)) {\n      let start = Math.max(pos, from), end = Math.min(pos + node.nodeSize, to)\n      let newSet = mark.addToSet(marks)\n\n      for (let i = 0; i < marks.length; i++) {\n        if (!marks[i].isInSet(newSet)) {\n          if (removing && removing.to == start && removing.mark.eq(marks[i]))\n            removing.to = end\n          else\n            removed.push(removing = new RemoveMarkStep(start, end, marks[i]))\n        }\n      }\n\n      if (adding && adding.to == start)\n        adding.to = end\n      else\n        added.push(adding = new AddMarkStep(start, end, mark))\n    }\n  })\n\n  removed.forEach(s => this.step(s))\n  added.forEach(s => this.step(s))\n  return this\n}\n\n// :: (number, number, ?union<Mark, MarkType>) \u2192 this\n// Remove marks from inline nodes between `from` and `to`. When `mark`\n// is a single mark, remove precisely that mark. When it is a mark type,\n// remove all marks of that type. When it is null, remove all marks of\n// any type.\nTransform.prototype.removeMark = function(from, to, mark = null) {\n  let matched = [], step = 0\n  this.doc.nodesBetween(from, to, (node, pos) => {\n    if (!node.isInline) return\n    step++\n    let toRemove = null\n    if (mark instanceof MarkType) {\n      let set = node.marks, found\n      while (found = mark.isInSet(set)) {\n        ;(toRemove || (toRemove = [])).push(found)\n        set = found.removeFromSet(set)\n      }\n    } else if (mark) {\n      if (mark.isInSet(node.marks)) toRemove = [mark]\n    } else {\n      toRemove = node.marks\n    }\n    if (toRemove && toRemove.length) {\n      let end = Math.min(pos + node.nodeSize, to)\n      for (let i = 0; i < toRemove.length; i++) {\n        let style = toRemove[i], found\n        for (let j = 0; j < matched.length; j++) {\n          let m = matched[j]\n          if (m.step == step - 1 && style.eq(matched[j].style)) found = m\n        }\n        if (found) {\n          found.to = end\n          found.step = step\n        } else {\n          matched.push({style, from: Math.max(pos, from), to: end, step})\n        }\n      }\n    }\n  })\n  matched.forEach(m => this.step(new RemoveMarkStep(m.from, m.to, m.style)))\n  return this\n}\n\n// :: (number, NodeType, ?ContentMatch) \u2192 this\n// Removes all marks and nodes from the content of the node at `pos`\n// that don't match the given new parent node type. Accepts an\n// optional starting [content match](#model.ContentMatch) as third\n// argument.\nTransform.prototype.clearIncompatible = function(pos, parentType, match = parentType.contentMatch) {\n  let node = this.doc.nodeAt(pos)\n  let delSteps = [], cur = pos + 1\n  for (let i = 0; i < node.childCount; i++) {\n    let child = node.child(i), end = cur + child.nodeSize\n    let allowed = match.matchType(child.type, child.attrs)\n    if (!allowed) {\n      delSteps.push(new ReplaceStep(cur, end, Slice.empty))\n    } else {\n      match = allowed\n      for (let j = 0; j < child.marks.length; j++) if (!parentType.allowsMarkType(child.marks[j].type))\n        this.step(new RemoveMarkStep(cur, end, child.marks[j]))\n    }\n    cur = end\n  }\n  if (!match.validEnd) {\n    let fill = match.fillBefore(Fragment.empty, true)\n    this.replace(cur, cur, new Slice(fill, 0, 0))\n  }\n  for (let i = delSteps.length - 1; i >= 0; i--) this.step(delSteps[i])\n  return this\n}\n", "import {Fragment, Slice} from \"prosemirror-model\"\n\nimport {ReplaceStep, ReplaceAroundStep} from \"./replace_step\"\nimport {Transform} from \"./transform\"\nimport {insertPoint} from \"./structure\"\n\n// :: (Node, number, ?number, ?Slice) \u2192 ?Step\n// \u2018Fit\u2019 a slice into a given position in the document, producing a\n// [step](#transform.Step) that inserts it. Will return null if\n// there's no meaningful way to insert the slice here, or inserting it\n// would be a no-op (an empty slice over an empty range).\nexport function replaceStep(doc, from, to = from, slice = Slice.empty) {\n  if (from == to && !slice.size) return null\n\n  let $from = doc.resolve(from), $to = doc.resolve(to)\n  // Optimization -- avoid work if it's obvious that it's not needed.\n  if (fitsTrivially($from, $to, slice)) return new ReplaceStep(from, to, slice)\n  return new Fitter($from, $to, slice).fit()\n}\n\n// :: (number, ?number, ?Slice) \u2192 this\n// Replace the part of the document between `from` and `to` with the\n// given `slice`.\nTransform.prototype.replace = function(from, to = from, slice = Slice.empty) {\n  let step = replaceStep(this.doc, from, to, slice)\n  if (step) this.step(step)\n  return this\n}\n\n// :: (number, number, union<Fragment, Node, [Node]>) \u2192 this\n// Replace the given range with the given content, which may be a\n// fragment, node, or array of nodes.\nTransform.prototype.replaceWith = function(from, to, content) {\n  return this.replace(from, to, new Slice(Fragment.from(content), 0, 0))\n}\n\n// :: (number, number) \u2192 this\n// Delete the content between the given positions.\nTransform.prototype.delete = function(from, to) {\n  return this.replace(from, to, Slice.empty)\n}\n\n// :: (number, union<Fragment, Node, [Node]>) \u2192 this\n// Insert the given content at the given position.\nTransform.prototype.insert = function(pos, content) {\n  return this.replaceWith(pos, pos, content)\n}\n\nfunction fitsTrivially($from, $to, slice) {\n  return !slice.openStart && !slice.openEnd && $from.start() == $to.start() &&\n    $from.parent.canReplace($from.index(), $to.index(), slice.content)\n}\n\n// Algorithm for 'placing' the elements of a slice into a gap:\n//\n// We consider the content of each node that is open to the left to be\n// independently placeable. I.e. in <p(\"foo\"), p(\"bar\")>, when the\n// paragraph on the left is open, \"foo\" can be placed (somewhere on\n// the left side of the replacement gap) independently from p(\"bar\").\n//\n// This class tracks the state of the placement progress in the\n// following properties:\n//\n//  - `frontier` holds a stack of `{type, match}` objects that\n//    represent the open side of the replacement. It starts at\n//    `$from`, then moves forward as content is placed, and is finally\n//    reconciled with `$to`.\n//\n//  - `unplaced` is a slice that represents the content that hasn't\n//    been placed yet.\n//\n//  - `placed` is a fragment of placed content. Its open-start value\n//    is implicit in `$from`, and its open-end value in `frontier`.\nclass Fitter {\n  constructor($from, $to, slice) {\n    this.$to = $to\n    this.$from = $from\n    this.unplaced = slice\n\n    this.frontier = []\n    for (let i = 0; i <= $from.depth; i++) {\n      let node = $from.node(i)\n      this.frontier.push({\n        type: node.type,\n        match: node.contentMatchAt($from.indexAfter(i))\n      })\n    }\n\n    this.placed = Fragment.empty\n    for (let i = $from.depth; i > 0; i--)\n      this.placed = Fragment.from($from.node(i).copy(this.placed))\n  }\n\n  get depth() { return this.frontier.length - 1 }\n\n  fit() {\n    // As long as there's unplaced content, try to place some of it.\n    // If that fails, either increase the open score of the unplaced\n    // slice, or drop nodes from it, and then try again.\n    while (this.unplaced.size) {\n      let fit = this.findFittable()\n      if (fit) this.placeNodes(fit)\n      else this.openMore() || this.dropNode()\n    }\n    // When there's inline content directly after the frontier _and_\n    // directly after `this.$to`, we must generate a `ReplaceAround`\n    // step that pulls that content into the node after the frontier.\n    // That means the fitting must be done to the end of the textblock\n    // node after `this.$to`, not `this.$to` itself.\n    let moveInline = this.mustMoveInline(), placedSize = this.placed.size - this.depth - this.$from.depth\n    let $from = this.$from, $to = this.close(moveInline < 0 ? this.$to : $from.doc.resolve(moveInline))\n    if (!$to) return null\n\n    // If closing to `$to` succeeded, create a step\n    let content = this.placed, openStart = $from.depth, openEnd = $to.depth\n    while (openStart && openEnd && content.childCount == 1) { // Normalize by dropping open parent nodes\n      content = content.firstChild.content\n      openStart--; openEnd--\n    }\n    let slice = new Slice(content, openStart, openEnd)\n    if (moveInline > -1)\n      return new ReplaceAroundStep($from.pos, moveInline, this.$to.pos, this.$to.end(), slice, placedSize)\n    if (slice.size || $from.pos != this.$to.pos) // Don't generate no-op steps\n      return new ReplaceStep($from.pos, $to.pos, slice)\n  }\n\n  // Find a position on the start spine of `this.unplaced` that has\n  // content that can be moved somewhere on the frontier. Returns two\n  // depths, one for the slice and one for the frontier.\n  findFittable() {\n    // Only try wrapping nodes (pass 2) after finding a place without\n    // wrapping failed.\n    for (let pass = 1; pass <= 2; pass++) {\n      for (let sliceDepth = this.unplaced.openStart; sliceDepth >= 0; sliceDepth--) {\n        let fragment, parent\n        if (sliceDepth) {\n          parent = contentAt(this.unplaced.content, sliceDepth - 1).firstChild\n          fragment = parent.content\n        } else {\n          fragment = this.unplaced.content\n        }\n        let first = fragment.firstChild\n        for (let frontierDepth = this.depth; frontierDepth >= 0; frontierDepth--) {\n          let {type, match} = this.frontier[frontierDepth], wrap, inject\n          // In pass 1, if the next node matches, or there is no next\n          // node but the parents look compatible, we've found a\n          // place.\n          if (pass == 1 && (first ? match.matchType(first.type) || (inject = match.fillBefore(Fragment.from(first), false))\n                            : type.compatibleContent(parent.type)))\n            return {sliceDepth, frontierDepth, parent, inject}\n          // In pass 2, look for a set of wrapping nodes that make\n          // `first` fit here.\n          else if (pass == 2 && first && (wrap = match.findWrapping(first.type)))\n            return {sliceDepth, frontierDepth, parent, wrap}\n          // Don't continue looking further up if the parent node\n          // would fit here.\n          if (parent && match.matchType(parent.type)) break\n        }\n      }\n    }\n  }\n\n  openMore() {\n    let {content, openStart, openEnd} = this.unplaced\n    let inner = contentAt(content, openStart)\n    if (!inner.childCount || inner.firstChild.isLeaf) return false\n    this.unplaced = new Slice(content, openStart + 1,\n                              Math.max(openEnd, inner.size + openStart >= content.size - openEnd ? openStart + 1 : 0))\n    return true\n  }\n\n  dropNode() {\n    let {content, openStart, openEnd} = this.unplaced\n    let inner = contentAt(content, openStart)\n    if (inner.childCount <= 1 && openStart > 0) {\n      let openAtEnd = content.size - openStart <= openStart + inner.size\n      this.unplaced = new Slice(dropFromFragment(content, openStart - 1, 1), openStart - 1,\n                                openAtEnd ? openStart - 1 : openEnd)\n    } else {\n      this.unplaced = new Slice(dropFromFragment(content, openStart, 1), openStart, openEnd)\n    }\n  }\n\n  // : ({sliceDepth: number, frontierDepth: number, parent: ?Node, wrap: ?[NodeType], inject: ?Fragment})\n  // Move content from the unplaced slice at `sliceDepth` to the\n  // frontier node at `frontierDepth`. Close that frontier node when\n  // applicable.\n  placeNodes({sliceDepth, frontierDepth, parent, inject, wrap}) {\n    while (this.depth > frontierDepth) this.closeFrontierNode()\n    if (wrap) for (let i = 0; i < wrap.length; i++) this.openFrontierNode(wrap[i])\n\n    let slice = this.unplaced, fragment = parent ? parent.content : slice.content\n    let openStart = slice.openStart - sliceDepth\n    let taken = 0, add = []\n    let {match, type} = this.frontier[frontierDepth]\n    if (inject) {\n      for (let i = 0; i < inject.childCount; i++) add.push(inject.child(i))\n      match = match.matchFragment(inject)\n    }\n    // Computes the amount of (end) open nodes at the end of the\n    // fragment. When 0, the parent is open, but no more. When\n    // negative, nothing is open.\n    let openEndCount = (fragment.size + sliceDepth) - (slice.content.size - slice.openEnd)\n    // Scan over the fragment, fitting as many child nodes as\n    // possible.\n    while (taken < fragment.childCount) {\n      let next = fragment.child(taken), matches = match.matchType(next.type)\n      if (!matches) break\n      taken++\n      if (taken > 1 || openStart == 0 || next.content.size) { // Drop empty open nodes\n        match = matches\n        add.push(closeNodeStart(next.mark(type.allowedMarks(next.marks)), taken == 1 ? openStart : 0,\n                                taken == fragment.childCount ? openEndCount : -1))\n      }\n    }\n    let toEnd = taken == fragment.childCount\n    if (!toEnd) openEndCount = -1\n\n    this.placed = addToFragment(this.placed, frontierDepth, Fragment.from(add))\n    this.frontier[frontierDepth].match = match\n\n    // If the parent types match, and the entire node was moved, and\n    // it's not open, close this frontier node right away.\n    if (toEnd && openEndCount < 0 && parent && parent.type == this.frontier[this.depth].type && this.frontier.length > 1)\n      this.closeFrontierNode()\n\n    // Add new frontier nodes for any open nodes at the end.\n    for (let i = 0, cur = fragment; i < openEndCount; i++) {\n      let node = cur.lastChild\n      this.frontier.push({type: node.type, match: node.contentMatchAt(node.childCount)})\n      cur = node.content\n    }\n\n    // Update `this.unplaced`. Drop the entire node from which we\n    // placed it we got to its end, otherwise just drop the placed\n    // nodes.\n    this.unplaced = !toEnd ? new Slice(dropFromFragment(slice.content, sliceDepth, taken), slice.openStart, slice.openEnd)\n      : sliceDepth == 0 ? Slice.empty\n      : new Slice(dropFromFragment(slice.content, sliceDepth - 1, 1),\n                  sliceDepth - 1, openEndCount < 0 ? slice.openEnd : sliceDepth - 1)\n  }\n\n  mustMoveInline() {\n    if (!this.$to.parent.isTextblock || this.$to.end() == this.$to.pos) return -1\n    let top = this.frontier[this.depth], level\n    if (!top.type.isTextblock || !contentAfterFits(this.$to, this.$to.depth, top.type, top.match, false) ||\n        (this.$to.depth == this.depth && (level = this.findCloseLevel(this.$to)) && level.depth == this.depth)) return -1\n\n    let {depth} = this.$to, after = this.$to.after(depth)\n    while (depth > 1 && after == this.$to.end(--depth)) ++after\n    return after\n  }\n\n  findCloseLevel($to) {\n    scan: for (let i = Math.min(this.depth, $to.depth); i >= 0; i--) {\n      let {match, type} = this.frontier[i]\n      let dropInner = i < $to.depth && $to.end(i + 1) == $to.pos + ($to.depth - (i + 1))\n      let fit = contentAfterFits($to, i, type, match, dropInner)\n      if (!fit) continue\n      for (let d = i - 1; d >= 0; d--) {\n        let {match, type} = this.frontier[d]\n        let matches = contentAfterFits($to, d, type, match, true)\n        if (!matches || matches.childCount) continue scan\n      }\n      return {depth: i, fit, move: dropInner ? $to.doc.resolve($to.after(i + 1)) : $to}\n    }\n  }\n\n  close($to) {\n    let close = this.findCloseLevel($to)\n    if (!close) return null\n\n    while (this.depth > close.depth) this.closeFrontierNode()\n    if (close.fit.childCount) this.placed = addToFragment(this.placed, close.depth, close.fit)\n    $to = close.move\n    for (let d = close.depth + 1; d <= $to.depth; d++) {\n      let node = $to.node(d), add = node.type.contentMatch.fillBefore(node.content, true, $to.index(d))\n      this.openFrontierNode(node.type, node.attrs, add)\n    }\n    return $to\n  }\n\n  openFrontierNode(type, attrs, content) {\n    let top = this.frontier[this.depth]\n    top.match = top.match.matchType(type)\n    this.placed = addToFragment(this.placed, this.depth, Fragment.from(type.create(attrs, content)))\n    this.frontier.push({type, match: type.contentMatch})\n  }\n\n  closeFrontierNode() {\n    let open = this.frontier.pop()\n    let add = open.match.fillBefore(Fragment.empty, true)\n    if (add.childCount) this.placed = addToFragment(this.placed, this.frontier.length, add)\n  }\n}\n\nfunction dropFromFragment(fragment, depth, count) {\n  if (depth == 0) return fragment.cutByIndex(count)\n  return fragment.replaceChild(0, fragment.firstChild.copy(dropFromFragment(fragment.firstChild.content, depth - 1, count)))\n}\n\nfunction addToFragment(fragment, depth, content) {\n  if (depth == 0) return fragment.append(content)\n  return fragment.replaceChild(fragment.childCount - 1,\n                               fragment.lastChild.copy(addToFragment(fragment.lastChild.content, depth - 1, content)))\n}\n\nfunction contentAt(fragment, depth) {\n  for (let i = 0; i < depth; i++) fragment = fragment.firstChild.content\n  return fragment\n}\n\nfunction closeNodeStart(node, openStart, openEnd) {\n  if (openStart <= 0) return node\n  let frag = node.content\n  if (openStart > 1)\n    frag = frag.replaceChild(0, closeNodeStart(frag.firstChild, openStart - 1, frag.childCount == 1 ? openEnd - 1 : 0))\n  if (openStart > 0) {\n    frag = node.type.contentMatch.fillBefore(frag).append(frag)\n    if (openEnd <= 0) frag = frag.append(node.type.contentMatch.matchFragment(frag).fillBefore(Fragment.empty, true))\n  }\n  return node.copy(frag)\n}\n\nfunction contentAfterFits($to, depth, type, match, open) {\n  let node = $to.node(depth), index = open ? $to.indexAfter(depth) : $to.index(depth)\n  if (index == node.childCount && !type.compatibleContent(node.type)) return null\n  let fit = match.fillBefore(node.content, true, index)\n  return fit && !invalidMarks(type, node.content, index) ? fit : null\n}\n\nfunction invalidMarks(type, fragment, start) {\n  for (let i = start; i < fragment.childCount; i++)\n    if (!type.allowsMarks(fragment.child(i).marks)) return true\n  return false\n}\n\n// :: (number, number, Slice) \u2192 this\n// Replace a range of the document with a given slice, using `from`,\n// `to`, and the slice's [`openStart`](#model.Slice.openStart) property\n// as hints, rather than fixed start and end points. This method may\n// grow the replaced area or close open nodes in the slice in order to\n// get a fit that is more in line with WYSIWYG expectations, by\n// dropping fully covered parent nodes of the replaced region when\n// they are marked [non-defining](#model.NodeSpec.defining), or\n// including an open parent node from the slice that _is_ marked as\n// [defining](#model.NodeSpec.defining).\n//\n// This is the method, for example, to handle paste. The similar\n// [`replace`](#transform.Transform.replace) method is a more\n// primitive tool which will _not_ move the start and end of its given\n// range, and is useful in situations where you need more precise\n// control over what happens.\nTransform.prototype.replaceRange = function(from, to, slice) {\n  if (!slice.size) return this.deleteRange(from, to)\n\n  let $from = this.doc.resolve(from), $to = this.doc.resolve(to)\n  if (fitsTrivially($from, $to, slice))\n    return this.step(new ReplaceStep(from, to, slice))\n\n  let targetDepths = coveredDepths($from, this.doc.resolve(to))\n  // Can't replace the whole document, so remove 0 if it's present\n  if (targetDepths[targetDepths.length - 1] == 0) targetDepths.pop()\n  // Negative numbers represent not expansion over the whole node at\n  // that depth, but replacing from $from.before(-D) to $to.pos.\n  let preferredTarget = -($from.depth + 1)\n  targetDepths.unshift(preferredTarget)\n  // This loop picks a preferred target depth, if one of the covering\n  // depths is not outside of a defining node, and adds negative\n  // depths for any depth that has $from at its start and does not\n  // cross a defining node.\n  for (let d = $from.depth, pos = $from.pos - 1; d > 0; d--, pos--) {\n    let spec = $from.node(d).type.spec\n    if (spec.defining || spec.isolating) break\n    if (targetDepths.indexOf(d) > -1) preferredTarget = d\n    else if ($from.before(d) == pos) targetDepths.splice(1, 0, -d)\n  }\n  // Try to fit each possible depth of the slice into each possible\n  // target depth, starting with the preferred depths.\n  let preferredTargetIndex = targetDepths.indexOf(preferredTarget)\n\n  let leftNodes = [], preferredDepth = slice.openStart\n  for (let content = slice.content, i = 0;; i++) {\n    let node = content.firstChild\n    leftNodes.push(node)\n    if (i == slice.openStart) break\n    content = node.content\n  }\n  // Back up if the node directly above openStart, or the node above\n  // that separated only by a non-defining textblock node, is defining.\n  if (preferredDepth > 0 && leftNodes[preferredDepth - 1].type.spec.defining &&\n      $from.node(preferredTargetIndex).type != leftNodes[preferredDepth - 1].type)\n    preferredDepth -= 1\n  else if (preferredDepth >= 2 && leftNodes[preferredDepth - 1].isTextblock && leftNodes[preferredDepth - 2].type.spec.defining &&\n           $from.node(preferredTargetIndex).type != leftNodes[preferredDepth - 2].type)\n    preferredDepth -= 2\n\n  for (let j = slice.openStart; j >= 0; j--) {\n    let openDepth = (j + preferredDepth + 1) % (slice.openStart + 1)\n    let insert = leftNodes[openDepth]\n    if (!insert) continue\n    for (let i = 0; i < targetDepths.length; i++) {\n      // Loop over possible expansion levels, starting with the\n      // preferred one\n      let targetDepth = targetDepths[(i + preferredTargetIndex) % targetDepths.length], expand = true\n      if (targetDepth < 0) { expand = false; targetDepth = -targetDepth }\n      let parent = $from.node(targetDepth - 1), index = $from.index(targetDepth - 1)\n      if (parent.canReplaceWith(index, index, insert.type, insert.marks))\n        return this.replace($from.before(targetDepth), expand ? $to.after(targetDepth) : to,\n                            new Slice(closeFragment(slice.content, 0, slice.openStart, openDepth),\n                                      openDepth, slice.openEnd))\n    }\n  }\n\n  let startSteps = this.steps.length\n  for (let i = targetDepths.length - 1; i >= 0; i--) {\n    this.replace(from, to, slice)\n    if (this.steps.length > startSteps) break\n    let depth = targetDepths[i]\n    if (depth < 0) continue\n    from = $from.before(depth); to = $to.after(depth)\n  }\n  return this\n}\n\nfunction closeFragment(fragment, depth, oldOpen, newOpen, parent) {\n  if (depth < oldOpen) {\n    let first = fragment.firstChild\n    fragment = fragment.replaceChild(0, first.copy(closeFragment(first.content, depth + 1, oldOpen, newOpen, first)))\n  }\n  if (depth > newOpen) {\n    let match = parent.contentMatchAt(0)\n    let start = match.fillBefore(fragment).append(fragment)\n    fragment = start.append(match.matchFragment(start).fillBefore(Fragment.empty, true))\n  }\n  return fragment\n}\n\n// :: (number, number, Node) \u2192 this\n// Replace the given range with a node, but use `from` and `to` as\n// hints, rather than precise positions. When from and to are the same\n// and are at the start or end of a parent node in which the given\n// node doesn't fit, this method may _move_ them out towards a parent\n// that does allow the given node to be placed. When the given range\n// completely covers a parent node, this method may completely replace\n// that parent node.\nTransform.prototype.replaceRangeWith = function(from, to, node) {\n  if (!node.isInline && from == to && this.doc.resolve(from).parent.content.size) {\n    let point = insertPoint(this.doc, from, node.type)\n    if (point != null) from = to = point\n  }\n  return this.replaceRange(from, to, new Slice(Fragment.from(node), 0, 0))\n}\n\n// :: (number, number) \u2192 this\n// Delete the given range, expanding it to cover fully covered\n// parent nodes until a valid replace is found.\nTransform.prototype.deleteRange = function(from, to) {\n  let $from = this.doc.resolve(from), $to = this.doc.resolve(to)\n  let covered = coveredDepths($from, $to)\n  for (let i = 0; i < covered.length; i++) {\n    let depth = covered[i], last = i == covered.length - 1\n    if ((last && depth == 0) || $from.node(depth).type.contentMatch.validEnd)\n      return this.delete($from.start(depth), $to.end(depth))\n    if (depth > 0 && (last || $from.node(depth - 1).canReplace($from.index(depth - 1), $to.indexAfter(depth - 1))))\n      return this.delete($from.before(depth), $to.after(depth))\n  }\n  for (let d = 1; d <= $from.depth && d <= $to.depth; d++) {\n    if (from - $from.start(d) == $from.depth - d && to > $from.end(d) && $to.end(d) - to != $to.depth - d)\n      return this.delete($from.before(d), to)\n  }\n  return this.delete(from, to)\n}\n\n// : (ResolvedPos, ResolvedPos) \u2192 [number]\n// Returns an array of all depths for which $from - $to spans the\n// whole content of the nodes at that depth.\nfunction coveredDepths($from, $to) {\n  let result = [], minDepth = Math.min($from.depth, $to.depth)\n  for (let d = minDepth; d >= 0; d--) {\n    let start = $from.start(d)\n    if (start < $from.pos - ($from.depth - d) ||\n        $to.end(d) > $to.pos + ($to.depth - d) ||\n        $from.node(d).type.spec.isolating ||\n        $to.node(d).type.spec.isolating) break\n    if (start == $to.start(d) ||\n        (d == $from.depth && d == $to.depth && $from.parent.inlineContent && $to.parent.inlineContent &&\n         d && $to.start(d - 1) == start - 1))\n      result.push(d)\n  }\n  return result\n}\n", "import {Slice, Fragment} from \"prosemirror-model\"\nimport {ReplaceStep, ReplaceAroundStep} from \"prosemirror-transform\"\n\nconst classesById = Object.create(null)\n\n// ::- Superclass for editor selections. Every selection type should\n// extend this. Should not be instantiated directly.\nexport class Selection {\n  // :: (ResolvedPos, ResolvedPos, ?[SelectionRange])\n  // Initialize a selection with the head and anchor and ranges. If no\n  // ranges are given, constructs a single range across `$anchor` and\n  // `$head`.\n  constructor($anchor, $head, ranges) {\n    // :: [SelectionRange]\n    // The ranges covered by the selection.\n    this.ranges = ranges || [new SelectionRange($anchor.min($head), $anchor.max($head))]\n    // :: ResolvedPos\n    // The resolved anchor of the selection (the side that stays in\n    // place when the selection is modified).\n    this.$anchor = $anchor\n    // :: ResolvedPos\n    // The resolved head of the selection (the side that moves when\n    // the selection is modified).\n    this.$head = $head\n  }\n\n  // :: number\n  // The selection's anchor, as an unresolved position.\n  get anchor() { return this.$anchor.pos }\n\n  // :: number\n  // The selection's head.\n  get head() { return this.$head.pos }\n\n  // :: number\n  // The lower bound of the selection's main range.\n  get from() { return this.$from.pos }\n\n  // :: number\n  // The upper bound of the selection's main range.\n  get to() { return this.$to.pos }\n\n  // :: ResolvedPos\n  // The resolved lower  bound of the selection's main range.\n  get $from() {\n    return this.ranges[0].$from\n  }\n\n  // :: ResolvedPos\n  // The resolved upper bound of the selection's main range.\n  get $to() {\n    return this.ranges[0].$to\n  }\n\n  // :: bool\n  // Indicates whether the selection contains any content.\n  get empty() {\n    let ranges = this.ranges\n    for (let i = 0; i < ranges.length; i++)\n      if (ranges[i].$from.pos != ranges[i].$to.pos) return false\n    return true\n  }\n\n  // eq:: (Selection) \u2192 bool\n  // Test whether the selection is the same as another selection.\n\n  // map:: (doc: Node, mapping: Mappable) \u2192 Selection\n  // Map this selection through a [mappable](#transform.Mappable) thing. `doc`\n  // should be the new document to which we are mapping.\n\n  // :: () \u2192 Slice\n  // Get the content of this selection as a slice.\n  content() {\n    return this.$from.node(0).slice(this.from, this.to, true)\n  }\n\n  // :: (Transaction, ?Slice)\n  // Replace the selection with a slice or, if no slice is given,\n  // delete the selection. Will append to the given transaction.\n  replace(tr, content = Slice.empty) {\n    // Put the new selection at the position after the inserted\n    // content. When that ended in an inline node, search backwards,\n    // to get the position after that node. If not, search forward.\n    let lastNode = content.content.lastChild, lastParent = null\n    for (let i = 0; i < content.openEnd; i++) {\n      lastParent = lastNode\n      lastNode = lastNode.lastChild\n    }\n\n    let mapFrom = tr.steps.length, ranges = this.ranges\n    for (let i = 0; i < ranges.length; i++) {\n      let {$from, $to} = ranges[i], mapping = tr.mapping.slice(mapFrom)\n      tr.replaceRange(mapping.map($from.pos), mapping.map($to.pos), i ? Slice.empty : content)\n      if (i == 0)\n        selectionToInsertionEnd(tr, mapFrom, (lastNode ? lastNode.isInline : lastParent && lastParent.isTextblock) ? -1 : 1)\n    }\n  }\n\n  // :: (Transaction, Node)\n  // Replace the selection with the given node, appending the changes\n  // to the given transaction.\n  replaceWith(tr, node) {\n    let mapFrom = tr.steps.length, ranges = this.ranges\n    for (let i = 0; i < ranges.length; i++) {\n      let {$from, $to} = ranges[i], mapping = tr.mapping.slice(mapFrom)\n      let from = mapping.map($from.pos), to = mapping.map($to.pos)\n      if (i) {\n        tr.deleteRange(from, to)\n      } else {\n        tr.replaceRangeWith(from, to, node)\n        selectionToInsertionEnd(tr, mapFrom, node.isInline ? -1 : 1)\n      }\n    }\n  }\n\n  // toJSON:: () \u2192 Object\n  // Convert the selection to a JSON representation. When implementing\n  // this for a custom selection class, make sure to give the object a\n  // `type` property whose value matches the ID under which you\n  // [registered](#state.Selection^jsonID) your class.\n\n  // :: (ResolvedPos, number, ?bool) \u2192 ?Selection\n  // Find a valid cursor or leaf node selection starting at the given\n  // position and searching back if `dir` is negative, and forward if\n  // positive. When `textOnly` is true, only consider cursor\n  // selections. Will return null when no valid selection position is\n  // found.\n  static findFrom($pos, dir, textOnly) {\n    let inner = $pos.parent.inlineContent ? new TextSelection($pos)\n        : findSelectionIn($pos.node(0), $pos.parent, $pos.pos, $pos.index(), dir, textOnly)\n    if (inner) return inner\n\n    for (let depth = $pos.depth - 1; depth >= 0; depth--) {\n      let found = dir < 0\n          ? findSelectionIn($pos.node(0), $pos.node(depth), $pos.before(depth + 1), $pos.index(depth), dir, textOnly)\n          : findSelectionIn($pos.node(0), $pos.node(depth), $pos.after(depth + 1), $pos.index(depth) + 1, dir, textOnly)\n      if (found) return found\n    }\n  }\n\n  // :: (ResolvedPos, ?number) \u2192 Selection\n  // Find a valid cursor or leaf node selection near the given\n  // position. Searches forward first by default, but if `bias` is\n  // negative, it will search backwards first.\n  static near($pos, bias = 1) {\n    return this.findFrom($pos, bias) || this.findFrom($pos, -bias) || new AllSelection($pos.node(0))\n  }\n\n  // :: (Node) \u2192 Selection\n  // Find the cursor or leaf node selection closest to the start of\n  // the given document. Will return an\n  // [`AllSelection`](#state.AllSelection) if no valid position\n  // exists.\n  static atStart(doc) {\n    return findSelectionIn(doc, doc, 0, 0, 1) || new AllSelection(doc)\n  }\n\n  // :: (Node) \u2192 Selection\n  // Find the cursor or leaf node selection closest to the end of the\n  // given document.\n  static atEnd(doc) {\n    return findSelectionIn(doc, doc, doc.content.size, doc.childCount, -1) || new AllSelection(doc)\n  }\n\n  // :: (Node, Object) \u2192 Selection\n  // Deserialize the JSON representation of a selection. Must be\n  // implemented for custom classes (as a static class method).\n  static fromJSON(doc, json) {\n    if (!json || !json.type) throw new RangeError(\"Invalid input for Selection.fromJSON\")\n    let cls = classesById[json.type]\n    if (!cls) throw new RangeError(`No selection type ${json.type} defined`)\n    return cls.fromJSON(doc, json)\n  }\n\n  // :: (string, constructor<Selection>)\n  // To be able to deserialize selections from JSON, custom selection\n  // classes must register themselves with an ID string, so that they\n  // can be disambiguated. Try to pick something that's unlikely to\n  // clash with classes from other modules.\n  static jsonID(id, selectionClass) {\n    if (id in classesById) throw new RangeError(\"Duplicate use of selection JSON ID \" + id)\n    classesById[id] = selectionClass\n    selectionClass.prototype.jsonID = id\n    return selectionClass\n  }\n\n  // :: () \u2192 SelectionBookmark\n  // Get a [bookmark](#state.SelectionBookmark) for this selection,\n  // which is a value that can be mapped without having access to a\n  // current document, and later resolved to a real selection for a\n  // given document again. (This is used mostly by the history to\n  // track and restore old selections.) The default implementation of\n  // this method just converts the selection to a text selection and\n  // returns the bookmark for that.\n  getBookmark() {\n    return TextSelection.between(this.$anchor, this.$head).getBookmark()\n  }\n}\n\n// :: bool\n// Controls whether, when a selection of this type is active in the\n// browser, the selected range should be visible to the user. Defaults\n// to `true`.\nSelection.prototype.visible = true\n\n// SelectionBookmark:: interface\n// A lightweight, document-independent representation of a selection.\n// You can define a custom bookmark type for a custom selection class\n// to make the history handle it well.\n//\n//   map:: (mapping: Mapping) \u2192 SelectionBookmark\n//   Map the bookmark through a set of changes.\n//\n//   resolve:: (doc: Node) \u2192 Selection\n//   Resolve the bookmark to a real selection again. This may need to\n//   do some error checking and may fall back to a default (usually\n//   [`TextSelection.between`](#state.TextSelection^between)) if\n//   mapping made the bookmark invalid.\n\n// ::- Represents a selected range in a document.\nexport class SelectionRange {\n  // :: (ResolvedPos, ResolvedPos)\n  constructor($from, $to) {\n    // :: ResolvedPos\n    // The lower bound of the range.\n    this.$from = $from\n    // :: ResolvedPos\n    // The upper bound of the range.\n    this.$to = $to\n  }\n}\n\n// ::- A text selection represents a classical editor selection, with\n// a head (the moving side) and anchor (immobile side), both of which\n// point into textblock nodes. It can be empty (a regular cursor\n// position).\nexport class TextSelection extends Selection {\n  // :: (ResolvedPos, ?ResolvedPos)\n  // Construct a text selection between the given points.\n  constructor($anchor, $head = $anchor) {\n    super($anchor, $head)\n  }\n\n  // :: ?ResolvedPos\n  // Returns a resolved position if this is a cursor selection (an\n  // empty text selection), and null otherwise.\n  get $cursor() { return this.$anchor.pos == this.$head.pos ? this.$head : null }\n\n  map(doc, mapping) {\n    let $head = doc.resolve(mapping.map(this.head))\n    if (!$head.parent.inlineContent) return Selection.near($head)\n    let $anchor = doc.resolve(mapping.map(this.anchor))\n    return new TextSelection($anchor.parent.inlineContent ? $anchor : $head, $head)\n  }\n\n  replace(tr, content = Slice.empty) {\n    super.replace(tr, content)\n    if (content == Slice.empty) {\n      let marks = this.$from.marksAcross(this.$to)\n      if (marks) tr.ensureMarks(marks)\n    }\n  }\n\n  eq(other) {\n    return other instanceof TextSelection && other.anchor == this.anchor && other.head == this.head\n  }\n\n  getBookmark() {\n    return new TextBookmark(this.anchor, this.head)\n  }\n\n  toJSON() {\n    return {type: \"text\", anchor: this.anchor, head: this.head}\n  }\n\n  static fromJSON(doc, json) {\n    if (typeof json.anchor != \"number\" || typeof json.head != \"number\")\n      throw new RangeError(\"Invalid input for TextSelection.fromJSON\")\n    return new TextSelection(doc.resolve(json.anchor), doc.resolve(json.head))\n  }\n\n  // :: (Node, number, ?number) \u2192 TextSelection\n  // Create a text selection from non-resolved positions.\n  static create(doc, anchor, head = anchor) {\n    let $anchor = doc.resolve(anchor)\n    return new this($anchor, head == anchor ? $anchor : doc.resolve(head))\n  }\n\n  // :: (ResolvedPos, ResolvedPos, ?number) \u2192 Selection\n  // Return a text selection that spans the given positions or, if\n  // they aren't text positions, find a text selection near them.\n  // `bias` determines whether the method searches forward (default)\n  // or backwards (negative number) first. Will fall back to calling\n  // [`Selection.near`](#state.Selection^near) when the document\n  // doesn't contain a valid text position.\n  static between($anchor, $head, bias) {\n    let dPos = $anchor.pos - $head.pos\n    if (!bias || dPos) bias = dPos >= 0 ? 1 : -1\n    if (!$head.parent.inlineContent) {\n      let found = Selection.findFrom($head, bias, true) || Selection.findFrom($head, -bias, true)\n      if (found) $head = found.$head\n      else return Selection.near($head, bias)\n    }\n    if (!$anchor.parent.inlineContent) {\n      if (dPos == 0) {\n        $anchor = $head\n      } else {\n        $anchor = (Selection.findFrom($anchor, -bias, true) || Selection.findFrom($anchor, bias, true)).$anchor\n        if (($anchor.pos < $head.pos) != (dPos < 0)) $anchor = $head\n      }\n    }\n    return new TextSelection($anchor, $head)\n  }\n}\n\nSelection.jsonID(\"text\", TextSelection)\n\nclass TextBookmark {\n  constructor(anchor, head) {\n    this.anchor = anchor\n    this.head = head\n  }\n  map(mapping) {\n    return new TextBookmark(mapping.map(this.anchor), mapping.map(this.head))\n  }\n  resolve(doc) {\n    return TextSelection.between(doc.resolve(this.anchor), doc.resolve(this.head))\n  }\n}\n\n// ::- A node selection is a selection that points at a single node.\n// All nodes marked [selectable](#model.NodeSpec.selectable) can be\n// the target of a node selection. In such a selection, `from` and\n// `to` point directly before and after the selected node, `anchor`\n// equals `from`, and `head` equals `to`..\nexport class NodeSelection extends Selection {\n  // :: (ResolvedPos)\n  // Create a node selection. Does not verify the validity of its\n  // argument.\n  constructor($pos) {\n    let node = $pos.nodeAfter\n    let $end = $pos.node(0).resolve($pos.pos + node.nodeSize)\n    super($pos, $end)\n    // :: Node The selected node.\n    this.node = node\n  }\n\n  map(doc, mapping) {\n    let {deleted, pos} = mapping.mapResult(this.anchor)\n    let $pos = doc.resolve(pos)\n    if (deleted) return Selection.near($pos)\n    return new NodeSelection($pos)\n  }\n\n  content() {\n    return new Slice(Fragment.from(this.node), 0, 0)\n  }\n\n  eq(other) {\n    return other instanceof NodeSelection && other.anchor == this.anchor\n  }\n\n  toJSON() {\n    return {type: \"node\", anchor: this.anchor}\n  }\n\n  getBookmark() { return new NodeBookmark(this.anchor) }\n\n  static fromJSON(doc, json) {\n    if (typeof json.anchor != \"number\")\n      throw new RangeError(\"Invalid input for NodeSelection.fromJSON\")\n    return new NodeSelection(doc.resolve(json.anchor))\n  }\n\n  // :: (Node, number) \u2192 NodeSelection\n  // Create a node selection from non-resolved positions.\n  static create(doc, from) {\n    return new this(doc.resolve(from))\n  }\n\n  // :: (Node) \u2192 bool\n  // Determines whether the given node may be selected as a node\n  // selection.\n  static isSelectable(node) {\n    return !node.isText && node.type.spec.selectable !== false\n  }\n}\n\nNodeSelection.prototype.visible = false\n\nSelection.jsonID(\"node\", NodeSelection)\n\nclass NodeBookmark {\n  constructor(anchor) {\n    this.anchor = anchor\n  }\n  map(mapping) {\n    let {deleted, pos} = mapping.mapResult(this.anchor)\n    return deleted ? new TextBookmark(pos, pos) : new NodeBookmark(pos)\n  }\n  resolve(doc) {\n    let $pos = doc.resolve(this.anchor), node = $pos.nodeAfter\n    if (node && NodeSelection.isSelectable(node)) return new NodeSelection($pos)\n    return Selection.near($pos)\n  }\n}\n\n// ::- A selection type that represents selecting the whole document\n// (which can not necessarily be expressed with a text selection, when\n// there are for example leaf block nodes at the start or end of the\n// document).\nexport class AllSelection extends Selection {\n  // :: (Node)\n  // Create an all-selection over the given document.\n  constructor(doc) {\n    super(doc.resolve(0), doc.resolve(doc.content.size))\n  }\n\n  replace(tr, content = Slice.empty) {\n    if (content == Slice.empty) {\n      tr.delete(0, tr.doc.content.size)\n      let sel = Selection.atStart(tr.doc)\n      if (!sel.eq(tr.selection)) tr.setSelection(sel)\n    } else {\n      super.replace(tr, content)\n    }\n  }\n\n  toJSON() { return {type: \"all\"} }\n\n  static fromJSON(doc) { return new AllSelection(doc) }\n\n  map(doc) { return new AllSelection(doc) }\n\n  eq(other) { return other instanceof AllSelection }\n\n  getBookmark() { return AllBookmark }\n}\n\nSelection.jsonID(\"all\", AllSelection)\n\nconst AllBookmark = {\n  map() { return this },\n  resolve(doc) { return new AllSelection(doc) }\n}\n\n// FIXME we'll need some awareness of text direction when scanning for selections\n\n// Try to find a selection inside the given node. `pos` points at the\n// position where the search starts. When `text` is true, only return\n// text selections.\nfunction findSelectionIn(doc, node, pos, index, dir, text) {\n  if (node.inlineContent) return TextSelection.create(doc, pos)\n  for (let i = index - (dir > 0 ? 0 : 1); dir > 0 ? i < node.childCount : i >= 0; i += dir) {\n    let child = node.child(i)\n    if (!child.isAtom) {\n      let inner = findSelectionIn(doc, child, pos + dir, dir < 0 ? child.childCount : 0, dir, text)\n      if (inner) return inner\n    } else if (!text && NodeSelection.isSelectable(child)) {\n      return NodeSelection.create(doc, pos - (dir < 0 ? child.nodeSize : 0))\n    }\n    pos += child.nodeSize * dir\n  }\n}\n\nfunction selectionToInsertionEnd(tr, startLen, bias) {\n  let last = tr.steps.length - 1\n  if (last < startLen) return\n  let step = tr.steps[last]\n  if (!(step instanceof ReplaceStep || step instanceof ReplaceAroundStep)) return\n  let map = tr.mapping.maps[last], end\n  map.forEach((_from, _to, _newFrom, newTo) => { if (end == null) end = newTo })\n  tr.setSelection(Selection.near(tr.doc.resolve(end), bias))\n}\n", "import {Transform} from \"prosemirror-transform\"\nimport {Mark} from \"prosemirror-model\"\nimport {Selection} from \"./selection\"\n\nconst UPDATED_SEL = 1, UPDATED_MARKS = 2, UPDATED_SCROLL = 4\n\n// ::- An editor state transaction, which can be applied to a state to\n// create an updated state. Use\n// [`EditorState.tr`](#state.EditorState.tr) to create an instance.\n//\n// Transactions track changes to the document (they are a subclass of\n// [`Transform`](#transform.Transform)), but also other state changes,\n// like selection updates and adjustments of the set of [stored\n// marks](#state.EditorState.storedMarks). In addition, you can store\n// metadata properties in a transaction, which are extra pieces of\n// information that client code or plugins can use to describe what a\n// transacion represents, so that they can update their [own\n// state](#state.StateField) accordingly.\n//\n// The [editor view](#view.EditorView) uses a few metadata properties:\n// it will attach a property `\"pointer\"` with the value `true` to\n// selection transactions directly caused by mouse or touch input, and\n// a `\"uiEvent\"` property of that may be `\"paste\"`, `\"cut\"`, or `\"drop\"`.\nexport class Transaction extends Transform {\n  constructor(state) {\n    super(state.doc)\n    // :: number\n    // The timestamp associated with this transaction, in the same\n    // format as `Date.now()`.\n    this.time = Date.now()\n    this.curSelection = state.selection\n    // The step count for which the current selection is valid.\n    this.curSelectionFor = 0\n    // :: ?[Mark]\n    // The stored marks set by this transaction, if any.\n    this.storedMarks = state.storedMarks\n    // Bitfield to track which aspects of the state were updated by\n    // this transaction.\n    this.updated = 0\n    // Object used to store metadata properties for the transaction.\n    this.meta = Object.create(null)\n  }\n\n  // :: Selection\n  // The transaction's current selection. This defaults to the editor\n  // selection [mapped](#state.Selection.map) through the steps in the\n  // transaction, but can be overwritten with\n  // [`setSelection`](#state.Transaction.setSelection).\n  get selection() {\n    if (this.curSelectionFor < this.steps.length) {\n      this.curSelection = this.curSelection.map(this.doc, this.mapping.slice(this.curSelectionFor))\n      this.curSelectionFor = this.steps.length\n    }\n    return this.curSelection\n  }\n\n  // :: (Selection) \u2192 Transaction\n  // Update the transaction's current selection. Will determine the\n  // selection that the editor gets when the transaction is applied.\n  setSelection(selection) {\n    if (selection.$from.doc != this.doc)\n      throw new RangeError(\"Selection passed to setSelection must point at the current document\")\n    this.curSelection = selection\n    this.curSelectionFor = this.steps.length\n    this.updated = (this.updated | UPDATED_SEL) & ~UPDATED_MARKS\n    this.storedMarks = null\n    return this\n  }\n\n  // :: bool\n  // Whether the selection was explicitly updated by this transaction.\n  get selectionSet() {\n    return (this.updated & UPDATED_SEL) > 0\n  }\n\n  // :: (?[Mark]) \u2192 Transaction\n  // Set the current stored marks.\n  setStoredMarks(marks) {\n    this.storedMarks = marks\n    this.updated |= UPDATED_MARKS\n    return this\n  }\n\n  // :: ([Mark]) \u2192 Transaction\n  // Make sure the current stored marks or, if that is null, the marks\n  // at the selection, match the given set of marks. Does nothing if\n  // this is already the case.\n  ensureMarks(marks) {\n    if (!Mark.sameSet(this.storedMarks || this.selection.$from.marks(), marks))\n      this.setStoredMarks(marks)\n    return this\n  }\n\n  // :: (Mark) \u2192 Transaction\n  // Add a mark to the set of stored marks.\n  addStoredMark(mark) {\n    return this.ensureMarks(mark.addToSet(this.storedMarks || this.selection.$head.marks()))\n  }\n\n  // :: (union<Mark, MarkType>) \u2192 Transaction\n  // Remove a mark or mark type from the set of stored marks.\n  removeStoredMark(mark) {\n    return this.ensureMarks(mark.removeFromSet(this.storedMarks || this.selection.$head.marks()))\n  }\n\n  // :: bool\n  // Whether the stored marks were explicitly set for this transaction.\n  get storedMarksSet() {\n    return (this.updated & UPDATED_MARKS) > 0\n  }\n\n  addStep(step, doc) {\n    super.addStep(step, doc)\n    this.updated = this.updated & ~UPDATED_MARKS\n    this.storedMarks = null\n  }\n\n  // :: (number) \u2192 Transaction\n  // Update the timestamp for the transaction.\n  setTime(time) {\n    this.time = time\n    return this\n  }\n\n  // :: (Slice) \u2192 Transaction\n  // Replace the current selection with the given slice.\n  replaceSelection(slice) {\n    this.selection.replace(this, slice)\n    return this\n  }\n\n  // :: (Node, ?bool) \u2192 Transaction\n  // Replace the selection with the given node. When `inheritMarks` is\n  // true and the content is inline, it inherits the marks from the\n  // place where it is inserted.\n  replaceSelectionWith(node, inheritMarks) {\n    let selection = this.selection\n    if (inheritMarks !== false)\n      node = node.mark(this.storedMarks || (selection.empty ? selection.$from.marks() : (selection.$from.marksAcross(selection.$to) || Mark.none)))\n    selection.replaceWith(this, node)\n    return this\n  }\n\n  // :: () \u2192 Transaction\n  // Delete the selection.\n  deleteSelection() {\n    this.selection.replace(this)\n    return this\n  }\n\n  // :: (string, from: ?number, to: ?number) \u2192 Transaction\n  // Replace the given range, or the selection if no range is given,\n  // with a text node containing the given string.\n  insertText(text, from, to = from) {\n    let schema = this.doc.type.schema\n    if (from == null) {\n      if (!text) return this.deleteSelection()\n      return this.replaceSelectionWith(schema.text(text), true)\n    } else {\n      if (!text) return this.deleteRange(from, to)\n      let marks = this.storedMarks\n      if (!marks) {\n        let $from = this.doc.resolve(from)\n        marks = to == from ? $from.marks() : $from.marksAcross(this.doc.resolve(to))\n      }\n      this.replaceRangeWith(from, to, schema.text(text, marks))\n      if (!this.selection.empty) this.setSelection(Selection.near(this.selection.$to))\n      return this\n    }\n  }\n\n  // :: (union<string, Plugin, PluginKey>, any) \u2192 Transaction\n  // Store a metadata property in this transaction, keyed either by\n  // name or by plugin.\n  setMeta(key, value) {\n    this.meta[typeof key == \"string\" ? key : key.key] = value\n    return this\n  }\n\n  // :: (union<string, Plugin, PluginKey>) \u2192 any\n  // Retrieve a metadata property for a given name or plugin.\n  getMeta(key) {\n    return this.meta[typeof key == \"string\" ? key : key.key]\n  }\n\n  // :: bool\n  // Returns true if this transaction doesn't contain any metadata,\n  // and can thus safely be extended.\n  get isGeneric() {\n    for (let _ in this.meta) return false\n    return true\n  }\n\n  // :: () \u2192 Transaction\n  // Indicate that the editor should scroll the selection into view\n  // when updated to the state produced by this transaction.\n  scrollIntoView() {\n    this.updated |= UPDATED_SCROLL\n    return this\n  }\n\n  get scrolledIntoView() {\n    return (this.updated & UPDATED_SCROLL) > 0\n  }\n}\n", "import {Node} from \"prosemirror-model\"\n\nimport {Selection} from \"./selection\"\nimport {Transaction} from \"./transaction\"\n\nfunction bind(f, self) {\n  return !self || !f ? f : f.bind(self)\n}\n\nclass FieldDesc {\n  constructor(name, desc, self) {\n    this.name = name\n    this.init = bind(desc.init, self)\n    this.apply = bind(desc.apply, self)\n  }\n}\n\nconst baseFields = [\n  new FieldDesc(\"doc\", {\n    init(config) { return config.doc || config.schema.topNodeType.createAndFill() },\n    apply(tr) { return tr.doc }\n  }),\n\n  new FieldDesc(\"selection\", {\n    init(config, instance) { return config.selection || Selection.atStart(instance.doc) },\n    apply(tr) { return tr.selection }\n  }),\n\n  new FieldDesc(\"storedMarks\", {\n    init(config) { return config.storedMarks || null },\n    apply(tr, _marks, _old, state) { return state.selection.$cursor ? tr.storedMarks : null }\n  }),\n\n  new FieldDesc(\"scrollToSelection\", {\n    init() { return 0 },\n    apply(tr, prev) { return tr.scrolledIntoView ? prev + 1 : prev }\n  })\n]\n\n// Object wrapping the part of a state object that stays the same\n// across transactions. Stored in the state's `config` property.\nclass Configuration {\n  constructor(schema, plugins) {\n    this.schema = schema\n    this.fields = baseFields.concat()\n    this.plugins = []\n    this.pluginsByKey = Object.create(null)\n    if (plugins) plugins.forEach(plugin => {\n      if (this.pluginsByKey[plugin.key])\n        throw new RangeError(\"Adding different instances of a keyed plugin (\" + plugin.key + \")\")\n      this.plugins.push(plugin)\n      this.pluginsByKey[plugin.key] = plugin\n      if (plugin.spec.state)\n        this.fields.push(new FieldDesc(plugin.key, plugin.spec.state, plugin))\n    })\n  }\n}\n\n// ::- The state of a ProseMirror editor is represented by an object\n// of this type. A state is a persistent data structure\u2014it isn't\n// updated, but rather a new state value is computed from an old one\n// using the [`apply`](#state.EditorState.apply) method.\n//\n// A state holds a number of built-in fields, and plugins can\n// [define](#state.PluginSpec.state) additional fields.\nexport class EditorState {\n  constructor(config) {\n    this.config = config\n  }\n\n  // doc:: Node\n  // The current document.\n\n  // selection:: Selection\n  // The selection.\n\n  // storedMarks:: ?[Mark]\n  // A set of marks to apply to the next input. Will be null when\n  // no explicit marks have been set.\n\n  // :: Schema\n  // The schema of the state's document.\n  get schema() {\n    return this.config.schema\n  }\n\n  // :: [Plugin]\n  // The plugins that are active in this state.\n  get plugins() {\n    return this.config.plugins\n  }\n\n  // :: (Transaction) \u2192 EditorState\n  // Apply the given transaction to produce a new state.\n  apply(tr) {\n    return this.applyTransaction(tr).state\n  }\n\n  // : (Transaction) \u2192 bool\n  filterTransaction(tr, ignore = -1) {\n    for (let i = 0; i < this.config.plugins.length; i++) if (i != ignore) {\n      let plugin = this.config.plugins[i]\n      if (plugin.spec.filterTransaction && !plugin.spec.filterTransaction.call(plugin, tr, this))\n        return false\n    }\n    return true\n  }\n\n  // :: (Transaction) \u2192 {state: EditorState, transactions: [Transaction]}\n  // Verbose variant of [`apply`](#state.EditorState.apply) that\n  // returns the precise transactions that were applied (which might\n  // be influenced by the [transaction\n  // hooks](#state.PluginSpec.filterTransaction) of\n  // plugins) along with the new state.\n  applyTransaction(rootTr) {\n    if (!this.filterTransaction(rootTr)) return {state: this, transactions: []}\n\n    let trs = [rootTr], newState = this.applyInner(rootTr), seen = null\n    // This loop repeatedly gives plugins a chance to respond to\n    // transactions as new transactions are added, making sure to only\n    // pass the transactions the plugin did not see before.\n    outer: for (;;) {\n      let haveNew = false\n      for (let i = 0; i < this.config.plugins.length; i++) {\n        let plugin = this.config.plugins[i]\n        if (plugin.spec.appendTransaction) {\n          let n = seen ? seen[i].n : 0, oldState = seen ? seen[i].state : this\n          let tr = n < trs.length &&\n              plugin.spec.appendTransaction.call(plugin, n ? trs.slice(n) : trs, oldState, newState)\n          if (tr && newState.filterTransaction(tr, i)) {\n            tr.setMeta(\"appendedTransaction\", rootTr)\n            if (!seen) {\n              seen = []\n              for (let j = 0; j < this.config.plugins.length; j++)\n                seen.push(j < i ? {state: newState, n: trs.length} : {state: this, n: 0})\n            }\n            trs.push(tr)\n            newState = newState.applyInner(tr)\n            haveNew = true\n          }\n          if (seen) seen[i] = {state: newState, n: trs.length}\n        }\n      }\n      if (!haveNew) return {state: newState, transactions: trs}\n    }\n  }\n\n  // : (Transaction) \u2192 EditorState\n  applyInner(tr) {\n    if (!tr.before.eq(this.doc)) throw new RangeError(\"Applying a mismatched transaction\")\n    let newInstance = new EditorState(this.config), fields = this.config.fields\n    for (let i = 0; i < fields.length; i++) {\n      let field = fields[i]\n      newInstance[field.name] = field.apply(tr, this[field.name], this, newInstance)\n    }\n    for (let i = 0; i < applyListeners.length; i++) applyListeners[i](this, tr, newInstance)\n    return newInstance\n  }\n\n  // :: Transaction\n  // Start a [transaction](#state.Transaction) from this state.\n  get tr() { return new Transaction(this) }\n\n  // :: (Object) \u2192 EditorState\n  // Create a new state.\n  //\n  //   config::- Configuration options. Must contain `schema` or `doc` (or both).\n  //\n  //      schema:: ?Schema\n  //      The schema to use (only relevant if no `doc` is specified).\n  //\n  //      doc:: ?Node\n  //      The starting document.\n  //\n  //      selection:: ?Selection\n  //      A valid selection in the document.\n  //\n  //      storedMarks:: ?[Mark]\n  //      The initial set of [stored marks](#state.EditorState.storedMarks).\n  //\n  //      plugins:: ?[Plugin]\n  //      The plugins that should be active in this state.\n  static create(config) {\n    let $config = new Configuration(config.doc ? config.doc.type.schema : config.schema, config.plugins)\n    let instance = new EditorState($config)\n    for (let i = 0; i < $config.fields.length; i++)\n      instance[$config.fields[i].name] = $config.fields[i].init(config, instance)\n    return instance\n  }\n\n  // :: (Object) \u2192 EditorState\n  // Create a new state based on this one, but with an adjusted set of\n  // active plugins. State fields that exist in both sets of plugins\n  // are kept unchanged. Those that no longer exist are dropped, and\n  // those that are new are initialized using their\n  // [`init`](#state.StateField.init) method, passing in the new\n  // configuration object..\n  //\n  //   config::- configuration options\n  //\n  //     plugins:: [Plugin]\n  //     New set of active plugins.\n  reconfigure(config) {\n    let $config = new Configuration(this.schema, config.plugins)\n    let fields = $config.fields, instance = new EditorState($config)\n    for (let i = 0; i < fields.length; i++) {\n      let name = fields[i].name\n      instance[name] = this.hasOwnProperty(name) ? this[name] : fields[i].init(config, instance)\n    }\n    return instance\n  }\n\n  // :: (?union<Object<Plugin>, string, number>) \u2192 Object\n  // Serialize this state to JSON. If you want to serialize the state\n  // of plugins, pass an object mapping property names to use in the\n  // resulting JSON object to plugin objects. The argument may also be\n  // a string or number, in which case it is ignored, to support the\n  // way `JSON.stringify` calls `toString` methods.\n  toJSON(pluginFields) {\n    let result = {doc: this.doc.toJSON(), selection: this.selection.toJSON()}\n    if (this.storedMarks) result.storedMarks = this.storedMarks.map(m => m.toJSON())\n    if (pluginFields && typeof pluginFields == 'object') for (let prop in pluginFields) {\n      if (prop == \"doc\" || prop == \"selection\")\n        throw new RangeError(\"The JSON fields `doc` and `selection` are reserved\")\n      let plugin = pluginFields[prop], state = plugin.spec.state\n      if (state && state.toJSON) result[prop] = state.toJSON.call(plugin, this[plugin.key])\n    }\n    return result\n  }\n\n  // :: (Object, Object, ?Object<Plugin>) \u2192 EditorState\n  // Deserialize a JSON representation of a state. `config` should\n  // have at least a `schema` field, and should contain array of\n  // plugins to initialize the state with. `pluginFields` can be used\n  // to deserialize the state of plugins, by associating plugin\n  // instances with the property names they use in the JSON object.\n  //\n  //   config::- configuration options\n  //\n  //     schema:: Schema\n  //     The schema to use.\n  //\n  //     plugins:: ?[Plugin]\n  //     The set of active plugins.\n  static fromJSON(config, json, pluginFields) {\n    if (!json) throw new RangeError(\"Invalid input for EditorState.fromJSON\")\n    if (!config.schema) throw new RangeError(\"Required config field 'schema' missing\")\n    let $config = new Configuration(config.schema, config.plugins)\n    let instance = new EditorState($config)\n    $config.fields.forEach(field => {\n      if (field.name == \"doc\") {\n        instance.doc = Node.fromJSON(config.schema, json.doc)\n      } else if (field.name == \"selection\") {\n        instance.selection = Selection.fromJSON(instance.doc, json.selection)\n      } else if (field.name == \"storedMarks\") {\n        if (json.storedMarks) instance.storedMarks = json.storedMarks.map(config.schema.markFromJSON)\n      } else {\n        if (pluginFields) for (let prop in pluginFields) {\n          let plugin = pluginFields[prop], state = plugin.spec.state\n          if (plugin.key == field.name && state && state.fromJSON &&\n              Object.prototype.hasOwnProperty.call(json, prop)) {\n            // This field belongs to a plugin mapped to a JSON field, read it from there.\n            instance[field.name] = state.fromJSON.call(plugin, config, json[prop], instance)\n            return\n          }\n        }\n        instance[field.name] = field.init(config, instance)\n      }\n    })\n    return instance\n  }\n\n  // Kludge to allow the view to track mappings between different\n  // instances of a state.\n  //\n  // FIXME this is no longer needed as of prosemirror-view 1.9.0,\n  // though due to backwards-compat we should probably keep it around\n  // for a while (if only as a no-op)\n  static addApplyListener(f) {\n    applyListeners.push(f)\n  }\n  static removeApplyListener(f) {\n    let found = applyListeners.indexOf(f)\n    if (found > -1) applyListeners.splice(found, 1)\n  }\n}\n\nconst applyListeners = []\n", "// PluginSpec:: interface\n//\n// This is the type passed to the [`Plugin`](#state.Plugin)\n// constructor. It provides a definition for a plugin.\n//\n//   props:: ?EditorProps\n//   The [view props](#view.EditorProps) added by this plugin. Props\n//   that are functions will be bound to have the plugin instance as\n//   their `this` binding.\n//\n//   state:: ?StateField<any>\n//   Allows a plugin to define a [state field](#state.StateField), an\n//   extra slot in the state object in which it can keep its own data.\n//\n//   key:: ?PluginKey\n//   Can be used to make this a keyed plugin. You can have only one\n//   plugin with a given key in a given state, but it is possible to\n//   access the plugin's configuration and state through the key,\n//   without having access to the plugin instance object.\n//\n//   view:: ?(EditorView) \u2192 Object\n//   When the plugin needs to interact with the editor view, or\n//   set something up in the DOM, use this field. The function\n//   will be called when the plugin's state is associated with an\n//   editor view.\n//\n//     return::-\n//     Should return an object with the following optional\n//     properties:\n//\n//       update:: ?(view: EditorView, prevState: EditorState)\n//       Called whenever the view's state is updated.\n//\n//       destroy:: ?()\n//       Called when the view is destroyed or receives a state\n//       with different plugins.\n//\n//   filterTransaction:: ?(Transaction, EditorState) \u2192 bool\n//   When present, this will be called before a transaction is\n//   applied by the state, allowing the plugin to cancel it (by\n//   returning false).\n//\n//   appendTransaction:: ?(transactions: [Transaction], oldState: EditorState, newState: EditorState) \u2192 ?Transaction\n//   Allows the plugin to append another transaction to be applied\n//   after the given array of transactions. When another plugin\n//   appends a transaction after this was called, it is called again\n//   with the new state and new transactions\u2014but only the new\n//   transactions, i.e. it won't be passed transactions that it\n//   already saw.\n\nfunction bindProps(obj, self, target) {\n  for (let prop in obj) {\n    let val = obj[prop]\n    if (val instanceof Function) val = val.bind(self)\n    else if (prop == \"handleDOMEvents\") val = bindProps(val, self, {})\n    target[prop] = val\n  }\n  return target\n}\n\n// ::- Plugins bundle functionality that can be added to an editor.\n// They are part of the [editor state](#state.EditorState) and\n// may influence that state and the view that contains it.\nexport class Plugin {\n  // :: (PluginSpec)\n  // Create a plugin.\n  constructor(spec) {\n    // :: EditorProps\n    // The [props](#view.EditorProps) exported by this plugin.\n    this.props = {}\n    if (spec.props) bindProps(spec.props, this, this.props)\n    // :: Object\n    // The plugin's [spec object](#state.PluginSpec).\n    this.spec = spec\n    this.key = spec.key ? spec.key.key : createKey(\"plugin\")\n  }\n\n  // :: (EditorState) \u2192 any\n  // Extract the plugin's state field from an editor state.\n  getState(state) { return state[this.key] }\n}\n\n// StateField:: interface<T>\n// A plugin spec may provide a state field (under its\n// [`state`](#state.PluginSpec.state) property) of this type, which\n// describes the state it wants to keep. Functions provided here are\n// always called with the plugin instance as their `this` binding.\n//\n//   init:: (config: Object, instance: EditorState) \u2192 T\n//   Initialize the value of the field. `config` will be the object\n//   passed to [`EditorState.create`](#state.EditorState^create). Note\n//   that `instance` is a half-initialized state instance, and will\n//   not have values for plugin fields initialized after this one.\n//\n//   apply:: (tr: Transaction, value: T, oldState: EditorState, newState: EditorState) \u2192 T\n//   Apply the given transaction to this state field, producing a new\n//   field value. Note that the `newState` argument is again a partially\n//   constructed state does not yet contain the state from plugins\n//   coming after this one.\n//\n//   toJSON:: ?(value: T) \u2192 *\n//   Convert this field to JSON. Optional, can be left off to disable\n//   JSON serialization for the field.\n//\n//   fromJSON:: ?(config: Object, value: *, state: EditorState) \u2192 T\n//   Deserialize the JSON representation of this field. Note that the\n//   `state` argument is again a half-initialized state.\n\nconst keys = Object.create(null)\n\nfunction createKey(name) {\n  if (name in keys) return name + \"$\" + ++keys[name]\n  keys[name] = 0\n  return name + \"$\"\n}\n\n// ::- A key is used to [tag](#state.PluginSpec.key)\n// plugins in a way that makes it possible to find them, given an\n// editor state. Assigning a key does mean only one plugin of that\n// type can be active in a state.\nexport class PluginKey {\n  // :: (?string)\n  // Create a plugin key.\n  constructor(name = \"key\") { this.key = createKey(name) }\n\n  // :: (EditorState) \u2192 ?Plugin\n  // Get the active plugin with this key, if any, from an editor\n  // state.\n  get(state) { return state.config.pluginsByKey[this.key] }\n\n  // :: (EditorState) \u2192 ?any\n  // Get the plugin's state from an editor state.\n  getState(state) { return state[this.key] }\n}\n", "import {joinPoint, canJoin, findWrapping, liftTarget, canSplit, ReplaceAroundStep, replaceStep} from \"prosemirror-transform\"\nimport {Slice, Fragment} from \"prosemirror-model\"\nimport {Selection, TextSelection, NodeSelection, AllSelection} from \"prosemirror-state\"\n\n// :: (EditorState, ?(tr: Transaction)) \u2192 bool\n// Delete the selection, if there is one.\nexport function deleteSelection(state, dispatch) {\n  if (state.selection.empty) return false\n  if (dispatch) dispatch(state.tr.deleteSelection().scrollIntoView())\n  return true\n}\n\n// :: (EditorState, ?(tr: Transaction), ?EditorView) \u2192 bool\n// If the selection is empty and at the start of a textblock, try to\n// reduce the distance between that block and the one before it\u2014if\n// there's a block directly before it that can be joined, join them.\n// If not, try to move the selected block closer to the next one in\n// the document structure by lifting it out of its parent or moving it\n// into a parent of the previous block. Will use the view for accurate\n// (bidi-aware) start-of-textblock detection if given.\nexport function joinBackward(state, dispatch, view) {\n  let {$cursor} = state.selection\n  if (!$cursor || (view ? !view.endOfTextblock(\"backward\", state)\n                        : $cursor.parentOffset > 0))\n    return false\n\n  let $cut = findCutBefore($cursor)\n\n  // If there is no node before this, try to lift\n  if (!$cut) {\n    let range = $cursor.blockRange(), target = range && liftTarget(range)\n    if (target == null) return false\n    if (dispatch) dispatch(state.tr.lift(range, target).scrollIntoView())\n    return true\n  }\n\n  let before = $cut.nodeBefore\n  // Apply the joining algorithm\n  if (!before.type.spec.isolating && deleteBarrier(state, $cut, dispatch))\n    return true\n\n  // If the node below has no content and the node above is\n  // selectable, delete the node below and select the one above.\n  if ($cursor.parent.content.size == 0 &&\n      (textblockAt(before, \"end\") || NodeSelection.isSelectable(before))) {\n    let delStep = replaceStep(state.doc, $cursor.before(), $cursor.after(), Slice.empty)\n    if (delStep.slice.size < delStep.to - delStep.from) {\n      if (dispatch) {\n        let tr = state.tr.step(delStep)\n        tr.setSelection(textblockAt(before, \"end\") ? Selection.findFrom(tr.doc.resolve(tr.mapping.map($cut.pos, -1)), -1)\n                        : NodeSelection.create(tr.doc, $cut.pos - before.nodeSize))\n        dispatch(tr.scrollIntoView())\n      }\n      return true\n    }\n  }\n\n  // If the node before is an atom, delete it\n  if (before.isAtom && $cut.depth == $cursor.depth - 1) {\n    if (dispatch) dispatch(state.tr.delete($cut.pos - before.nodeSize, $cut.pos).scrollIntoView())\n    return true\n  }\n\n  return false\n}\n\nfunction textblockAt(node, side, only) {\n  for (; node; node = (side == \"start\" ? node.firstChild : node.lastChild)) {\n    if (node.isTextblock) return true\n    if (only && node.childCount != 1) return false\n  }\n  return false\n}\n\n// :: (EditorState, ?(tr: Transaction), ?EditorView) \u2192 bool\n// When the selection is empty and at the start of a textblock, select\n// the node before that textblock, if possible. This is intended to be\n// bound to keys like backspace, after\n// [`joinBackward`](#commands.joinBackward) or other deleting\n// commands, as a fall-back behavior when the schema doesn't allow\n// deletion at the selected point.\nexport function selectNodeBackward(state, dispatch, view) {\n  let {$head, empty} = state.selection, $cut = $head\n  if (!empty) return false\n\n  if ($head.parent.isTextblock) {\n    if (view ? !view.endOfTextblock(\"backward\", state) : $head.parentOffset > 0) return false\n    $cut = findCutBefore($head)\n  }\n  let node = $cut && $cut.nodeBefore\n  if (!node || !NodeSelection.isSelectable(node)) return false\n  if (dispatch)\n    dispatch(state.tr.setSelection(NodeSelection.create(state.doc, $cut.pos - node.nodeSize)).scrollIntoView())\n  return true\n}\n\nfunction findCutBefore($pos) {\n  if (!$pos.parent.type.spec.isolating) for (let i = $pos.depth - 1; i >= 0; i--) {\n    if ($pos.index(i) > 0) return $pos.doc.resolve($pos.before(i + 1))\n    if ($pos.node(i).type.spec.isolating) break\n  }\n  return null\n}\n\n// :: (EditorState, ?(tr: Transaction), ?EditorView) \u2192 bool\n// If the selection is empty and the cursor is at the end of a\n// textblock, try to reduce or remove the boundary between that block\n// and the one after it, either by joining them or by moving the other\n// block closer to this one in the tree structure. Will use the view\n// for accurate start-of-textblock detection if given.\nexport function joinForward(state, dispatch, view) {\n  let {$cursor} = state.selection\n  if (!$cursor || (view ? !view.endOfTextblock(\"forward\", state)\n                        : $cursor.parentOffset < $cursor.parent.content.size))\n    return false\n\n  let $cut = findCutAfter($cursor)\n\n  // If there is no node after this, there's nothing to do\n  if (!$cut) return false\n\n  let after = $cut.nodeAfter\n  // Try the joining algorithm\n  if (deleteBarrier(state, $cut, dispatch)) return true\n\n  // If the node above has no content and the node below is\n  // selectable, delete the node above and select the one below.\n  if ($cursor.parent.content.size == 0 &&\n      (textblockAt(after, \"start\") || NodeSelection.isSelectable(after))) {\n    let delStep = replaceStep(state.doc, $cursor.before(), $cursor.after(), Slice.empty)\n    if (delStep.slice.size < delStep.to - delStep.from) {\n      if (dispatch) {\n        let tr = state.tr.step(delStep)\n        tr.setSelection(textblockAt(after, \"start\") ? Selection.findFrom(tr.doc.resolve(tr.mapping.map($cut.pos)), 1)\n                        : NodeSelection.create(tr.doc, tr.mapping.map($cut.pos)))\n        dispatch(tr.scrollIntoView())\n      }\n      return true\n    }\n  }\n\n  // If the next node is an atom, delete it\n  if (after.isAtom && $cut.depth == $cursor.depth - 1) {\n    if (dispatch) dispatch(state.tr.delete($cut.pos, $cut.pos + after.nodeSize).scrollIntoView())\n    return true\n  }\n\n  return false\n}\n\n// :: (EditorState, ?(tr: Transaction), ?EditorView) \u2192 bool\n// When the selection is empty and at the end of a textblock, select\n// the node coming after that textblock, if possible. This is intended\n// to be bound to keys like delete, after\n// [`joinForward`](#commands.joinForward) and similar deleting\n// commands, to provide a fall-back behavior when the schema doesn't\n// allow deletion at the selected point.\nexport function selectNodeForward(state, dispatch, view) {\n  let {$head, empty} = state.selection, $cut = $head\n  if (!empty) return false\n  if ($head.parent.isTextblock) {\n    if (view ? !view.endOfTextblock(\"forward\", state) : $head.parentOffset < $head.parent.content.size)\n      return false\n    $cut = findCutAfter($head)\n  }\n  let node = $cut && $cut.nodeAfter\n  if (!node || !NodeSelection.isSelectable(node)) return false\n  if (dispatch)\n    dispatch(state.tr.setSelection(NodeSelection.create(state.doc, $cut.pos)).scrollIntoView())\n  return true\n}\n\nfunction findCutAfter($pos) {\n  if (!$pos.parent.type.spec.isolating) for (let i = $pos.depth - 1; i >= 0; i--) {\n    let parent = $pos.node(i)\n    if ($pos.index(i) + 1 < parent.childCount) return $pos.doc.resolve($pos.after(i + 1))\n    if (parent.type.spec.isolating) break\n  }\n  return null\n}\n\n// :: (EditorState, ?(tr: Transaction)) \u2192 bool\n// Join the selected block or, if there is a text selection, the\n// closest ancestor block of the selection that can be joined, with\n// the sibling above it.\nexport function joinUp(state, dispatch) {\n  let sel = state.selection, nodeSel = sel instanceof NodeSelection, point\n  if (nodeSel) {\n    if (sel.node.isTextblock || !canJoin(state.doc, sel.from)) return false\n    point = sel.from\n  } else {\n    point = joinPoint(state.doc, sel.from, -1)\n    if (point == null) return false\n  }\n  if (dispatch) {\n    let tr = state.tr.join(point)\n    if (nodeSel) tr.setSelection(NodeSelection.create(tr.doc, point - state.doc.resolve(point).nodeBefore.nodeSize))\n    dispatch(tr.scrollIntoView())\n  }\n  return true\n}\n\n// :: (EditorState, ?(tr: Transaction)) \u2192 bool\n// Join the selected block, or the closest ancestor of the selection\n// that can be joined, with the sibling after it.\nexport function joinDown(state, dispatch) {\n  let sel = state.selection, point\n  if (sel instanceof NodeSelection) {\n    if (sel.node.isTextblock || !canJoin(state.doc, sel.to)) return false\n    point = sel.to\n  } else {\n    point = joinPoint(state.doc, sel.to, 1)\n    if (point == null) return false\n  }\n  if (dispatch)\n    dispatch(state.tr.join(point).scrollIntoView())\n  return true\n}\n\n// :: (EditorState, ?(tr: Transaction)) \u2192 bool\n// Lift the selected block, or the closest ancestor block of the\n// selection that can be lifted, out of its parent node.\nexport function lift(state, dispatch) {\n  let {$from, $to} = state.selection\n  let range = $from.blockRange($to), target = range && liftTarget(range)\n  if (target == null) return false\n  if (dispatch) dispatch(state.tr.lift(range, target).scrollIntoView())\n  return true\n}\n\n// :: (EditorState, ?(tr: Transaction)) \u2192 bool\n// If the selection is in a node whose type has a truthy\n// [`code`](#model.NodeSpec.code) property in its spec, replace the\n// selection with a newline character.\nexport function newlineInCode(state, dispatch) {\n  let {$head, $anchor} = state.selection\n  if (!$head.parent.type.spec.code || !$head.sameParent($anchor)) return false\n  if (dispatch) dispatch(state.tr.insertText(\"\\n\").scrollIntoView())\n  return true\n}\n\nfunction defaultBlockAt(match) {\n  for (let i = 0; i < match.edgeCount; i++) {\n    let {type} = match.edge(i)\n    if (type.isTextblock && !type.hasRequiredAttrs()) return type\n  }\n  return null\n}\n\n// :: (EditorState, ?(tr: Transaction)) \u2192 bool\n// When the selection is in a node with a truthy\n// [`code`](#model.NodeSpec.code) property in its spec, create a\n// default block after the code block, and move the cursor there.\nexport function exitCode(state, dispatch) {\n  let {$head, $anchor} = state.selection\n  if (!$head.parent.type.spec.code || !$head.sameParent($anchor)) return false\n  let above = $head.node(-1), after = $head.indexAfter(-1), type = defaultBlockAt(above.contentMatchAt(after))\n  if (!above.canReplaceWith(after, after, type)) return false\n  if (dispatch) {\n    let pos = $head.after(), tr = state.tr.replaceWith(pos, pos, type.createAndFill())\n    tr.setSelection(Selection.near(tr.doc.resolve(pos), 1))\n    dispatch(tr.scrollIntoView())\n  }\n  return true\n}\n\n// :: (EditorState, ?(tr: Transaction)) \u2192 bool\n// If a block node is selected, create an empty paragraph before (if\n// it is its parent's first child) or after it.\nexport function createParagraphNear(state, dispatch) {\n  let sel = state.selection, {$from, $to} = sel\n  if (sel instanceof AllSelection || $from.parent.inlineContent || $to.parent.inlineContent) return false\n  let type = defaultBlockAt($to.parent.contentMatchAt($to.indexAfter()))\n  if (!type || !type.isTextblock) return false\n  if (dispatch) {\n    let side = (!$from.parentOffset && $to.index() < $to.parent.childCount ? $from : $to).pos\n    let tr = state.tr.insert(side, type.createAndFill())\n    tr.setSelection(TextSelection.create(tr.doc, side + 1))\n    dispatch(tr.scrollIntoView())\n  }\n  return true\n}\n\n// :: (EditorState, ?(tr: Transaction)) \u2192 bool\n// If the cursor is in an empty textblock that can be lifted, lift the\n// block.\nexport function liftEmptyBlock(state, dispatch) {\n  let {$cursor} = state.selection\n  if (!$cursor || $cursor.parent.content.size) return false\n  if ($cursor.depth > 1 && $cursor.after() != $cursor.end(-1)) {\n    let before = $cursor.before()\n    if (canSplit(state.doc, before)) {\n      if (dispatch) dispatch(state.tr.split(before).scrollIntoView())\n      return true\n    }\n  }\n  let range = $cursor.blockRange(), target = range && liftTarget(range)\n  if (target == null) return false\n  if (dispatch) dispatch(state.tr.lift(range, target).scrollIntoView())\n  return true\n}\n\n// :: (EditorState, ?(tr: Transaction)) \u2192 bool\n// Split the parent block of the selection. If the selection is a text\n// selection, also delete its content.\nexport function splitBlock(state, dispatch) {\n  let {$from, $to} = state.selection\n  if (state.selection instanceof NodeSelection && state.selection.node.isBlock) {\n    if (!$from.parentOffset || !canSplit(state.doc, $from.pos)) return false\n    if (dispatch) dispatch(state.tr.split($from.pos).scrollIntoView())\n    return true\n  }\n\n  if (!$from.parent.isBlock) return false\n\n  if (dispatch) {\n    let atEnd = $to.parentOffset == $to.parent.content.size\n    let tr = state.tr\n    if (state.selection instanceof TextSelection || state.selection instanceof AllSelection) tr.deleteSelection()\n    let deflt = $from.depth == 0 ? null : defaultBlockAt($from.node(-1).contentMatchAt($from.indexAfter(-1)))\n    let types = atEnd && deflt ? [{type: deflt}] : null\n    let can = canSplit(tr.doc, tr.mapping.map($from.pos), 1, types)\n    if (!types && !can && canSplit(tr.doc, tr.mapping.map($from.pos), 1, deflt && [{type: deflt}])) {\n      types = [{type: deflt}]\n      can = true\n    }\n    if (can) {\n      tr.split(tr.mapping.map($from.pos), 1, types)\n      if (!atEnd && !$from.parentOffset && $from.parent.type != deflt) {\n        let first = tr.mapping.map($from.before()), $first = tr.doc.resolve(first)\n        if ($from.node(-1).canReplaceWith($first.index(), $first.index() + 1, deflt))\n          tr.setNodeMarkup(tr.mapping.map($from.before()), deflt)\n      }\n    }\n    dispatch(tr.scrollIntoView())\n  }\n  return true\n}\n\n// :: (EditorState, ?(tr: Transaction)) \u2192 bool\n// Acts like [`splitBlock`](#commands.splitBlock), but without\n// resetting the set of active marks at the cursor.\nexport function splitBlockKeepMarks(state, dispatch) {\n  return splitBlock(state, dispatch && (tr => {\n    let marks = state.storedMarks || (state.selection.$to.parentOffset && state.selection.$from.marks())\n    if (marks) tr.ensureMarks(marks)\n    dispatch(tr)\n  }))\n}\n\n// :: (EditorState, ?(tr: Transaction)) \u2192 bool\n// Move the selection to the node wrapping the current selection, if\n// any. (Will not select the document node.)\nexport function selectParentNode(state, dispatch) {\n  let {$from, to} = state.selection, pos\n  let same = $from.sharedDepth(to)\n  if (same == 0) return false\n  pos = $from.before(same)\n  if (dispatch) dispatch(state.tr.setSelection(NodeSelection.create(state.doc, pos)))\n  return true\n}\n\n// :: (EditorState, ?(tr: Transaction)) \u2192 bool\n// Select the whole document.\nexport function selectAll(state, dispatch) {\n  if (dispatch) dispatch(state.tr.setSelection(new AllSelection(state.doc)))\n  return true\n}\n\nfunction joinMaybeClear(state, $pos, dispatch) {\n  let before = $pos.nodeBefore, after = $pos.nodeAfter, index = $pos.index()\n  if (!before || !after || !before.type.compatibleContent(after.type)) return false\n  if (!before.content.size && $pos.parent.canReplace(index - 1, index)) {\n    if (dispatch) dispatch(state.tr.delete($pos.pos - before.nodeSize, $pos.pos).scrollIntoView())\n    return true\n  }\n  if (!$pos.parent.canReplace(index, index + 1) || !(after.isTextblock || canJoin(state.doc, $pos.pos)))\n    return false\n  if (dispatch)\n    dispatch(state.tr\n             .clearIncompatible($pos.pos, before.type, before.contentMatchAt(before.childCount))\n             .join($pos.pos)\n             .scrollIntoView())\n  return true\n}\n\nfunction deleteBarrier(state, $cut, dispatch) {\n  let before = $cut.nodeBefore, after = $cut.nodeAfter, conn, match\n  if (before.type.spec.isolating || after.type.spec.isolating) return false\n  if (joinMaybeClear(state, $cut, dispatch)) return true\n\n  let canDelAfter = $cut.parent.canReplace($cut.index(), $cut.index() + 1)\n  if (canDelAfter &&\n      (conn = (match = before.contentMatchAt(before.childCount)).findWrapping(after.type)) &&\n      match.matchType(conn[0] || after.type).validEnd) {\n    if (dispatch) {\n      let end = $cut.pos + after.nodeSize, wrap = Fragment.empty\n      for (let i = conn.length - 1; i >= 0; i--)\n        wrap = Fragment.from(conn[i].create(null, wrap))\n      wrap = Fragment.from(before.copy(wrap))\n      let tr = state.tr.step(new ReplaceAroundStep($cut.pos - 1, end, $cut.pos, end, new Slice(wrap, 1, 0), conn.length, true))\n      let joinAt = end + 2 * conn.length\n      if (canJoin(tr.doc, joinAt)) tr.join(joinAt)\n      dispatch(tr.scrollIntoView())\n    }\n    return true\n  }\n\n  let selAfter = Selection.findFrom($cut, 1)\n  let range = selAfter && selAfter.$from.blockRange(selAfter.$to), target = range && liftTarget(range)\n  if (target != null && target >= $cut.depth) {\n    if (dispatch) dispatch(state.tr.lift(range, target).scrollIntoView())\n    return true\n  }\n\n  if (canDelAfter && textblockAt(after, \"start\", true) && textblockAt(before, \"end\")) {\n    let at = before, wrap = []\n    for (;;) {\n      wrap.push(at)\n      if (at.isTextblock) break\n      at = at.lastChild\n    }\n    let afterText = after, afterDepth = 1\n    for (; !afterText.isTextblock; afterText = afterText.firstChild) afterDepth++\n    if (at.canReplace(at.childCount, at.childCount, afterText.content)) {\n      if (dispatch) {\n        let end = Fragment.empty\n        for (let i = wrap.length - 1; i >= 0; i--) end = Fragment.from(wrap[i].copy(end))\n        let tr = state.tr.step(new ReplaceAroundStep($cut.pos - wrap.length, $cut.pos + after.nodeSize,\n                                                     $cut.pos + afterDepth, $cut.pos + after.nodeSize - afterDepth,\n                                                     new Slice(end, wrap.length, 0), 0, true))\n        dispatch(tr.scrollIntoView())\n      }\n      return true\n    }\n  }\n\n  return false\n}\n\nfunction selectTextblockSide(side) {\n  return function(state, dispatch) {\n    let sel = state.selection, $pos = side < 0 ? sel.$from : sel.$to\n    let depth = $pos.depth\n    while ($pos.node(depth).isInline) {\n      if (!depth) return false\n      depth--\n    }\n    if (!$pos.node(depth).isTextblock) return false\n    if (dispatch)\n      dispatch(state.tr.setSelection(TextSelection.create(\n        state.doc, side < 0 ? $pos.start(depth) : $pos.end(depth))))\n    return true\n  }\n}\n\n// :: (EditorState, ?(tr: Transaction)) \u2192 bool\n// Moves the cursor to the start of current text block.\nexport const selectTextblockStart = selectTextblockSide(-1)\n\n// :: (EditorState, ?(tr: Transaction)) \u2192 bool\n// Moves the cursor to the end of current text block.\nexport const selectTextblockEnd = selectTextblockSide(1)\n\n// Parameterized commands\n\n// :: (NodeType, ?Object) \u2192 (state: EditorState, dispatch: ?(tr: Transaction)) \u2192 bool\n// Wrap the selection in a node of the given type with the given\n// attributes.\nexport function wrapIn(nodeType, attrs) {\n  return function(state, dispatch) {\n    let {$from, $to} = state.selection\n    let range = $from.blockRange($to), wrapping = range && findWrapping(range, nodeType, attrs)\n    if (!wrapping) return false\n    if (dispatch) dispatch(state.tr.wrap(range, wrapping).scrollIntoView())\n    return true\n  }\n}\n\n// :: (NodeType, ?Object) \u2192 (state: EditorState, dispatch: ?(tr: Transaction)) \u2192 bool\n// Returns a command that tries to set the selected textblocks to the\n// given node type with the given attributes.\nexport function setBlockType(nodeType, attrs) {\n  return function(state, dispatch) {\n    let {from, to} = state.selection\n    let applicable = false\n    state.doc.nodesBetween(from, to, (node, pos) => {\n      if (applicable) return false\n      if (!node.isTextblock || node.hasMarkup(nodeType, attrs)) return\n      if (node.type == nodeType) {\n        applicable = true\n      } else {\n        let $pos = state.doc.resolve(pos), index = $pos.index()\n        applicable = $pos.parent.canReplaceWith(index, index + 1, nodeType)\n      }\n    })\n    if (!applicable) return false\n    if (dispatch) dispatch(state.tr.setBlockType(from, to, nodeType, attrs).scrollIntoView())\n    return true\n  }\n}\n\nfunction markApplies(doc, ranges, type) {\n  for (let i = 0; i < ranges.length; i++) {\n    let {$from, $to} = ranges[i]\n    let can = $from.depth == 0 ? doc.type.allowsMarkType(type) : false\n    doc.nodesBetween($from.pos, $to.pos, node => {\n      if (can) return false\n      can = node.inlineContent && node.type.allowsMarkType(type)\n    })\n    if (can) return true\n  }\n  return false\n}\n\n// :: (MarkType, ?Object) \u2192 (state: EditorState, dispatch: ?(tr: Transaction)) \u2192 bool\n// Create a command function that toggles the given mark with the\n// given attributes. Will return `false` when the current selection\n// doesn't support that mark. This will remove the mark if any marks\n// of that type exist in the selection, or add it otherwise. If the\n// selection is empty, this applies to the [stored\n// marks](#state.EditorState.storedMarks) instead of a range of the\n// document.\nexport function toggleMark(markType, attrs) {\n  return function(state, dispatch) {\n    let {empty, $cursor, ranges} = state.selection\n    if ((empty && !$cursor) || !markApplies(state.doc, ranges, markType)) return false\n    if (dispatch) {\n      if ($cursor) {\n        if (markType.isInSet(state.storedMarks || $cursor.marks()))\n          dispatch(state.tr.removeStoredMark(markType))\n        else\n          dispatch(state.tr.addStoredMark(markType.create(attrs)))\n      } else {\n        let has = false, tr = state.tr\n        for (let i = 0; !has && i < ranges.length; i++) {\n          let {$from, $to} = ranges[i]\n          has = state.doc.rangeHasMark($from.pos, $to.pos, markType)\n        }\n        for (let i = 0; i < ranges.length; i++) {\n          let {$from, $to} = ranges[i]\n          if (has) {\n            tr.removeMark($from.pos, $to.pos, markType)\n          } else {\n            let from = $from.pos, to = $to.pos, start = $from.nodeAfter, end = $to.nodeBefore\n            let spaceStart = start && start.isText ? /^\\s*/.exec(start.text)[0].length : 0\n            let spaceEnd = end && end.isText ? /\\s*$/.exec(end.text)[0].length : 0\n            if (from + spaceStart < to) { from += spaceStart; to -= spaceEnd }\n            tr.addMark(from, to, markType.create(attrs))\n          }\n        }\n        dispatch(tr.scrollIntoView())\n      }\n    }\n    return true\n  }\n}\n\nfunction wrapDispatchForJoin(dispatch, isJoinable) {\n  return tr => {\n    if (!tr.isGeneric) return dispatch(tr)\n\n    let ranges = []\n    for (let i = 0; i < tr.mapping.maps.length; i++) {\n      let map = tr.mapping.maps[i]\n      for (let j = 0; j < ranges.length; j++)\n        ranges[j] = map.map(ranges[j])\n      map.forEach((_s, _e, from, to) => ranges.push(from, to))\n    }\n\n    // Figure out which joinable points exist inside those ranges,\n    // by checking all node boundaries in their parent nodes.\n    let joinable = []\n    for (let i = 0; i < ranges.length; i += 2) {\n      let from = ranges[i], to = ranges[i + 1]\n      let $from = tr.doc.resolve(from), depth = $from.sharedDepth(to), parent = $from.node(depth)\n      for (let index = $from.indexAfter(depth), pos = $from.after(depth + 1); pos <= to; ++index) {\n        let after = parent.maybeChild(index)\n        if (!after) break\n        if (index && joinable.indexOf(pos) == -1) {\n          let before = parent.child(index - 1)\n          if (before.type == after.type && isJoinable(before, after))\n            joinable.push(pos)\n        }\n        pos += after.nodeSize\n      }\n    }\n    // Join the joinable points\n    joinable.sort((a, b) => a - b)\n    for (let i = joinable.length - 1; i >= 0; i--) {\n      if (canJoin(tr.doc, joinable[i])) tr.join(joinable[i])\n    }\n    dispatch(tr)\n  }\n}\n\n// :: ((state: EditorState, ?(tr: Transaction)) \u2192 bool, union<(before: Node, after: Node) \u2192 bool, [string]>) \u2192 (state: EditorState, ?(tr: Transaction)) \u2192 bool\n// Wrap a command so that, when it produces a transform that causes\n// two joinable nodes to end up next to each other, those are joined.\n// Nodes are considered joinable when they are of the same type and\n// when the `isJoinable` predicate returns true for them or, if an\n// array of strings was passed, if their node type name is in that\n// array.\nexport function autoJoin(command, isJoinable) {\n  if (Array.isArray(isJoinable)) {\n    let types = isJoinable\n    isJoinable = node => types.indexOf(node.type.name) > -1\n  }\n  return (state, dispatch, view) => command(state, dispatch && wrapDispatchForJoin(dispatch, isJoinable), view)\n}\n\n// :: (...[(EditorState, ?(tr: Transaction), ?EditorView) \u2192 bool]) \u2192 (EditorState, ?(tr: Transaction), ?EditorView) \u2192 bool\n// Combine a number of command functions into a single function (which\n// calls them one by one until one returns true).\nexport function chainCommands(...commands) {\n  return function(state, dispatch, view) {\n    for (let i = 0; i < commands.length; i++)\n      if (commands[i](state, dispatch, view)) return true\n    return false\n  }\n}\n\nlet backspace = chainCommands(deleteSelection, joinBackward, selectNodeBackward)\nlet del = chainCommands(deleteSelection, joinForward, selectNodeForward)\n\n// :: Object\n// A basic keymap containing bindings not specific to any schema.\n// Binds the following keys (when multiple commands are listed, they\n// are chained with [`chainCommands`](#commands.chainCommands)):\n//\n// * **Enter** to `newlineInCode`, `createParagraphNear`, `liftEmptyBlock`, `splitBlock`\n// * **Mod-Enter** to `exitCode`\n// * **Backspace** and **Mod-Backspace** to `deleteSelection`, `joinBackward`, `selectNodeBackward`\n// * **Delete** and **Mod-Delete** to `deleteSelection`, `joinForward`, `selectNodeForward`\n// * **Mod-Delete** to `deleteSelection`, `joinForward`, `selectNodeForward`\n// * **Mod-a** to `selectAll`\nexport let pcBaseKeymap = {\n  \"Enter\": chainCommands(newlineInCode, createParagraphNear, liftEmptyBlock, splitBlock),\n  \"Mod-Enter\": exitCode,\n  \"Backspace\": backspace,\n  \"Mod-Backspace\": backspace,\n  \"Shift-Backspace\": backspace,\n  \"Delete\": del,\n  \"Mod-Delete\": del,\n  \"Mod-a\": selectAll\n}\n\n// :: Object\n// A copy of `pcBaseKeymap` that also binds **Ctrl-h** like Backspace,\n// **Ctrl-d** like Delete, **Alt-Backspace** like Ctrl-Backspace, and\n// **Ctrl-Alt-Backspace**, **Alt-Delete**, and **Alt-d** like\n// Ctrl-Delete.\nexport let macBaseKeymap = {\n  \"Ctrl-h\": pcBaseKeymap[\"Backspace\"],\n  \"Alt-Backspace\": pcBaseKeymap[\"Mod-Backspace\"],\n  \"Ctrl-d\": pcBaseKeymap[\"Delete\"],\n  \"Ctrl-Alt-Backspace\": pcBaseKeymap[\"Mod-Delete\"],\n  \"Alt-Delete\": pcBaseKeymap[\"Mod-Delete\"],\n  \"Alt-d\": pcBaseKeymap[\"Mod-Delete\"],\n  \"Ctrl-a\": selectTextblockStart,\n  \"Ctrl-e\": selectTextblockEnd\n}\nfor (let key in pcBaseKeymap) macBaseKeymap[key] = pcBaseKeymap[key]\n\npcBaseKeymap.Home = selectTextblockStart\npcBaseKeymap.End = selectTextblockEnd\n\n// declare global: os, navigator\nconst mac = typeof navigator != \"undefined\" ? /Mac|iP(hone|[oa]d)/.test(navigator.platform)\n          : typeof os != \"undefined\" ? os.platform() == \"darwin\" : false\n\n// :: Object\n// Depending on the detected platform, this will hold\n// [`pcBasekeymap`](#commands.pcBaseKeymap) or\n// [`macBaseKeymap`](#commands.macBaseKeymap).\nexport let baseKeymap = mac ? macBaseKeymap : pcBaseKeymap\n", "import {findWrapping, liftTarget, canSplit, ReplaceAroundStep} from \"prosemirror-transform\"\nimport {Slice, Fragment, NodeRange} from \"prosemirror-model\"\n\nconst olDOM = [\"ol\", 0], ulDOM = [\"ul\", 0], liDOM = [\"li\", 0]\n\n// :: NodeSpec\n// An ordered list [node spec](#model.NodeSpec). Has a single\n// attribute, `order`, which determines the number at which the list\n// starts counting, and defaults to 1. Represented as an `<ol>`\n// element.\nexport const orderedList = {\n  attrs: {order: {default: 1}},\n  parseDOM: [{tag: \"ol\", getAttrs(dom) {\n    return {order: dom.hasAttribute(\"start\") ? +dom.getAttribute(\"start\") : 1}\n  }}],\n  toDOM(node) {\n    return node.attrs.order == 1 ? olDOM : [\"ol\", {start: node.attrs.order}, 0]\n  }\n}\n\n// :: NodeSpec\n// A bullet list node spec, represented in the DOM as `<ul>`.\nexport const bulletList = {\n  parseDOM: [{tag: \"ul\"}],\n  toDOM() { return ulDOM }\n}\n\n// :: NodeSpec\n// A list item (`<li>`) spec.\nexport const listItem = {\n  parseDOM: [{tag: \"li\"}],\n  toDOM() { return liDOM },\n  defining: true\n}\n\nfunction add(obj, props) {\n  let copy = {}\n  for (let prop in obj) copy[prop] = obj[prop]\n  for (let prop in props) copy[prop] = props[prop]\n  return copy\n}\n\n// :: (OrderedMap<NodeSpec>, string, ?string) \u2192 OrderedMap<NodeSpec>\n// Convenience function for adding list-related node types to a map\n// specifying the nodes for a schema. Adds\n// [`orderedList`](#schema-list.orderedList) as `\"ordered_list\"`,\n// [`bulletList`](#schema-list.bulletList) as `\"bullet_list\"`, and\n// [`listItem`](#schema-list.listItem) as `\"list_item\"`.\n//\n// `itemContent` determines the content expression for the list items.\n// If you want the commands defined in this module to apply to your\n// list structure, it should have a shape like `\"paragraph block*\"` or\n// `\"paragraph (ordered_list | bullet_list)*\"`. `listGroup` can be\n// given to assign a group name to the list node types, for example\n// `\"block\"`.\nexport function addListNodes(nodes, itemContent, listGroup) {\n  return nodes.append({\n    ordered_list: add(orderedList, {content: \"list_item+\", group: listGroup}),\n    bullet_list: add(bulletList, {content: \"list_item+\", group: listGroup}),\n    list_item: add(listItem, {content: itemContent})\n  })\n}\n\n// :: (NodeType, ?Object) \u2192 (state: EditorState, dispatch: ?(tr: Transaction)) \u2192 bool\n// Returns a command function that wraps the selection in a list with\n// the given type an attributes. If `dispatch` is null, only return a\n// value to indicate whether this is possible, but don't actually\n// perform the change.\nexport function wrapInList(listType, attrs) {\n  return function(state, dispatch) {\n    let {$from, $to} = state.selection\n    let range = $from.blockRange($to), doJoin = false, outerRange = range\n    if (!range) return false\n    // This is at the top of an existing list item\n    if (range.depth >= 2 && $from.node(range.depth - 1).type.compatibleContent(listType) && range.startIndex == 0) {\n      // Don't do anything if this is the top of the list\n      if ($from.index(range.depth - 1) == 0) return false\n      let $insert = state.doc.resolve(range.start - 2)\n      outerRange = new NodeRange($insert, $insert, range.depth)\n      if (range.endIndex < range.parent.childCount)\n        range = new NodeRange($from, state.doc.resolve($to.end(range.depth)), range.depth)\n      doJoin = true\n    }\n    let wrap = findWrapping(outerRange, listType, attrs, range)\n    if (!wrap) return false\n    if (dispatch) dispatch(doWrapInList(state.tr, range, wrap, doJoin, listType).scrollIntoView())\n    return true\n  }\n}\n\nfunction doWrapInList(tr, range, wrappers, joinBefore, listType) {\n  let content = Fragment.empty\n  for (let i = wrappers.length - 1; i >= 0; i--)\n    content = Fragment.from(wrappers[i].type.create(wrappers[i].attrs, content))\n\n  tr.step(new ReplaceAroundStep(range.start - (joinBefore ? 2 : 0), range.end, range.start, range.end,\n                                new Slice(content, 0, 0), wrappers.length, true))\n\n  let found = 0\n  for (let i = 0; i < wrappers.length; i++) if (wrappers[i].type == listType) found = i + 1\n  let splitDepth = wrappers.length - found\n\n  let splitPos = range.start + wrappers.length - (joinBefore ? 2 : 0), parent = range.parent\n  for (let i = range.startIndex, e = range.endIndex, first = true; i < e; i++, first = false) {\n    if (!first && canSplit(tr.doc, splitPos, splitDepth)) {\n      tr.split(splitPos, splitDepth)\n      splitPos += 2 * splitDepth\n    }\n    splitPos += parent.child(i).nodeSize\n  }\n  return tr\n}\n\n// :: (NodeType) \u2192 (state: EditorState, dispatch: ?(tr: Transaction)) \u2192 bool\n// Build a command that splits a non-empty textblock at the top level\n// of a list item by also splitting that list item.\nexport function splitListItem(itemType) {\n  return function(state, dispatch) {\n    let {$from, $to, node} = state.selection\n    if ((node && node.isBlock) || $from.depth < 2 || !$from.sameParent($to)) return false\n    let grandParent = $from.node(-1)\n    if (grandParent.type != itemType) return false\n    if ($from.parent.content.size == 0 && $from.node(-1).childCount == $from.indexAfter(-1)) {\n      // In an empty block. If this is a nested list, the wrapping\n      // list item should be split. Otherwise, bail out and let next\n      // command handle lifting.\n      if ($from.depth == 2 || $from.node(-3).type != itemType ||\n          $from.index(-2) != $from.node(-2).childCount - 1) return false\n      if (dispatch) {\n        let wrap = Fragment.empty\n        let depthBefore = $from.index(-1) ? 1 : $from.index(-2) ? 2 : 3\n        // Build a fragment containing empty versions of the structure\n        // from the outer list item to the parent node of the cursor\n        for (let d = $from.depth - depthBefore; d >= $from.depth - 3; d--)\n          wrap = Fragment.from($from.node(d).copy(wrap))\n        let depthAfter = $from.indexAfter(-1) < $from.node(-2).childCount ? 1\n            : $from.indexAfter(-2) < $from.node(-3).childCount ? 2 : 3\n        // Add a second list item with an empty default start node\n        wrap = wrap.append(Fragment.from(itemType.createAndFill()))\n        let start = $from.before($from.depth - (depthBefore - 1))\n        let tr = state.tr.replace(start, $from.after(-depthAfter), new Slice(wrap, 4 - depthBefore, 0))\n        let sel = -1\n        tr.doc.nodesBetween(start, tr.doc.content.size, (node, pos) => {\n          if (sel > -1) return false\n          if (node.isTextblock && node.content.size == 0) sel = pos + 1\n        })\n        if (sel > -1) tr.setSelection(state.selection.constructor.near(tr.doc.resolve(sel)))\n        dispatch(tr.scrollIntoView())\n      }\n      return true\n    }\n    let nextType = $to.pos == $from.end() ? grandParent.contentMatchAt(0).defaultType : null\n    let tr = state.tr.delete($from.pos, $to.pos)\n    let types = nextType && [null, {type: nextType}]\n    if (!canSplit(tr.doc, $from.pos, 2, types)) return false\n    if (dispatch) dispatch(tr.split($from.pos, 2, types).scrollIntoView())\n    return true\n  }\n}\n\n// :: (NodeType) \u2192 (state: EditorState, dispatch: ?(tr: Transaction)) \u2192 bool\n// Create a command to lift the list item around the selection up into\n// a wrapping list.\nexport function liftListItem(itemType) {\n  return function(state, dispatch) {\n    let {$from, $to} = state.selection\n    let range = $from.blockRange($to, node => node.childCount && node.firstChild.type == itemType)\n    if (!range) return false\n    if (!dispatch) return true\n    if ($from.node(range.depth - 1).type == itemType) // Inside a parent list\n      return liftToOuterList(state, dispatch, itemType, range)\n    else // Outer list node\n      return liftOutOfList(state, dispatch, range)\n  }\n}\n\nfunction liftToOuterList(state, dispatch, itemType, range) {\n  let tr = state.tr, end = range.end, endOfList = range.$to.end(range.depth)\n  if (end < endOfList) {\n    // There are siblings after the lifted items, which must become\n    // children of the last item\n    tr.step(new ReplaceAroundStep(end - 1, endOfList, end, endOfList,\n                                  new Slice(Fragment.from(itemType.create(null, range.parent.copy())), 1, 0), 1, true))\n    range = new NodeRange(tr.doc.resolve(range.$from.pos), tr.doc.resolve(endOfList), range.depth)\n  }\n  dispatch(tr.lift(range, liftTarget(range)).scrollIntoView())\n  return true\n}\n\nfunction liftOutOfList(state, dispatch, range) {\n  let tr = state.tr, list = range.parent\n  // Merge the list items into a single big item\n  for (let pos = range.end, i = range.endIndex - 1, e = range.startIndex; i > e; i--) {\n    pos -= list.child(i).nodeSize\n    tr.delete(pos - 1, pos + 1)\n  }\n  let $start = tr.doc.resolve(range.start), item = $start.nodeAfter\n  if (tr.mapping.map(range.end) != range.start + $start.nodeAfter.nodeSize) return false\n  let atStart = range.startIndex == 0, atEnd = range.endIndex == list.childCount\n  let parent = $start.node(-1), indexBefore = $start.index(-1)\n  if (!parent.canReplace(indexBefore + (atStart ? 0 : 1), indexBefore + 1,\n                         item.content.append(atEnd ? Fragment.empty : Fragment.from(list))))\n    return false\n  let start = $start.pos, end = start + item.nodeSize\n  // Strip off the surrounding list. At the sides where we're not at\n  // the end of the list, the existing list is closed. At sides where\n  // this is the end, it is overwritten to its end.\n  tr.step(new ReplaceAroundStep(start - (atStart ? 1 : 0), end + (atEnd ? 1 : 0), start + 1, end - 1,\n                                new Slice((atStart ? Fragment.empty : Fragment.from(list.copy(Fragment.empty)))\n                                          .append(atEnd ? Fragment.empty : Fragment.from(list.copy(Fragment.empty))),\n                                          atStart ? 0 : 1, atEnd ? 0 : 1), atStart ? 0 : 1))\n  dispatch(tr.scrollIntoView())\n  return true\n}\n\n// :: (NodeType) \u2192 (state: EditorState, dispatch: ?(tr: Transaction)) \u2192 bool\n// Create a command to sink the list item around the selection down\n// into an inner list.\nexport function sinkListItem(itemType) {\n  return function(state, dispatch) {\n    let {$from, $to} = state.selection\n    let range = $from.blockRange($to, node => node.childCount && node.firstChild.type == itemType)\n    if (!range) return false\n    let startIndex = range.startIndex\n    if (startIndex == 0) return false\n    let parent = range.parent, nodeBefore = parent.child(startIndex - 1)\n    if (nodeBefore.type != itemType) return false\n\n    if (dispatch) {\n      let nestedBefore = nodeBefore.lastChild && nodeBefore.lastChild.type == parent.type\n      let inner = Fragment.from(nestedBefore ? itemType.create() : null)\n      let slice = new Slice(Fragment.from(itemType.create(null, Fragment.from(parent.type.create(null, inner)))),\n                            nestedBefore ? 3 : 1, 0)\n      let before = range.start, after = range.end\n      dispatch(state.tr.step(new ReplaceAroundStep(before - (nestedBefore ? 3 : 1), after,\n                                                   before, after, slice, 1, true))\n               .scrollIntoView())\n    }\n    return true\n  }\n}\n", "const result = {}\nexport default result\n\nif (typeof navigator != \"undefined\" && typeof document != \"undefined\") {\n  const ie_edge = /Edge\\/(\\d+)/.exec(navigator.userAgent)\n  const ie_upto10 = /MSIE \\d/.test(navigator.userAgent)\n  const ie_11up = /Trident\\/(?:[7-9]|\\d{2,})\\..*rv:(\\d+)/.exec(navigator.userAgent)\n\n  let ie = result.ie = !!(ie_upto10 || ie_11up || ie_edge)\n  result.ie_version = ie_upto10 ? document.documentMode || 6 : ie_11up ? +ie_11up[1] : ie_edge ? +ie_edge[1] : null\n  result.gecko = !ie && /gecko\\/(\\d+)/i.test(navigator.userAgent)\n  result.gecko_version = result.gecko && +(/Firefox\\/(\\d+)/.exec(navigator.userAgent) || [0, 0])[1]\n  let chrome = !ie && /Chrome\\/(\\d+)/.exec(navigator.userAgent)\n  result.chrome = !!chrome\n  result.chrome_version = chrome && +chrome[1]\n  // Is true for both iOS and iPadOS for convenience\n  result.safari = !ie && /Apple Computer/.test(navigator.vendor)\n  result.ios = result.safari && (/Mobile\\/\\w+/.test(navigator.userAgent) || navigator.maxTouchPoints > 2)\n  result.mac = result.ios || /Mac/.test(navigator.platform)\n  result.android = /Android \\d/.test(navigator.userAgent)\n  result.webkit = \"webkitFontSmoothing\" in document.documentElement.style\n  result.webkit_version = result.webkit && +(/\\bAppleWebKit\\/(\\d+)/.exec(navigator.userAgent) || [0, 0])[1]\n}\n", "import browser from \"./browser\"\n\nexport const domIndex = function(node) {\n  for (var index = 0;; index++) {\n    node = node.previousSibling\n    if (!node) return index\n  }\n}\n\nexport const parentNode = function(node) {\n  let parent = node.assignedSlot || node.parentNode\n  return parent && parent.nodeType == 11 ? parent.host : parent\n}\n\nlet reusedRange = null\n\n// Note that this will always return the same range, because DOM range\n// objects are every expensive, and keep slowing down subsequent DOM\n// updates, for some reason.\nexport const textRange = function(node, from, to) {\n  let range = reusedRange || (reusedRange = document.createRange())\n  range.setEnd(node, to == null ? node.nodeValue.length : to)\n  range.setStart(node, from || 0)\n  return range\n}\n\n// Scans forward and backward through DOM positions equivalent to the\n// given one to see if the two are in the same place (i.e. after a\n// text node vs at the end of that text node)\nexport const isEquivalentPosition = function(node, off, targetNode, targetOff) {\n  return targetNode && (scanFor(node, off, targetNode, targetOff, -1) ||\n                        scanFor(node, off, targetNode, targetOff, 1))\n}\n\nconst atomElements = /^(img|br|input|textarea|hr)$/i\n\nfunction scanFor(node, off, targetNode, targetOff, dir) {\n  for (;;) {\n    if (node == targetNode && off == targetOff) return true\n    if (off == (dir < 0 ? 0 : nodeSize(node))) {\n      let parent = node.parentNode\n      if (parent.nodeType != 1 || hasBlockDesc(node) || atomElements.test(node.nodeName) || node.contentEditable == \"false\")\n        return false\n      off = domIndex(node) + (dir < 0 ? 0 : 1)\n      node = parent\n    } else if (node.nodeType == 1) {\n      node = node.childNodes[off + (dir < 0 ? -1 : 0)]\n      if (node.contentEditable == \"false\") return false\n      off = dir < 0 ? nodeSize(node) : 0\n    } else {\n      return false\n    }\n  }\n}\n\nexport function nodeSize(node) {\n  return node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length\n}\n\nexport function isOnEdge(node, offset, parent) {\n  for (let atStart = offset == 0, atEnd = offset == nodeSize(node); atStart || atEnd;) {\n    if (node == parent) return true\n    let index = domIndex(node)\n    node = node.parentNode\n    if (!node) return false\n    atStart = atStart && index == 0\n    atEnd = atEnd && index == nodeSize(node)\n  }\n}\n\nfunction hasBlockDesc(dom) {\n  let desc\n  for (let cur = dom; cur; cur = cur.parentNode) if (desc = cur.pmViewDesc) break\n  return desc && desc.node && desc.node.isBlock && (desc.dom == dom || desc.contentDOM == dom)\n}\n\n// Work around Chrome issue https://bugs.chromium.org/p/chromium/issues/detail?id=447523\n// (isCollapsed inappropriately returns true in shadow dom)\nexport const selectionCollapsed = function(domSel) {\n  let collapsed = domSel.isCollapsed\n  if (collapsed && browser.chrome && domSel.rangeCount && !domSel.getRangeAt(0).collapsed)\n    collapsed = false\n  return collapsed\n}\n\nexport function keyEvent(keyCode, key) {\n  let event = document.createEvent(\"Event\")\n  event.initEvent(\"keydown\", true, true)\n  event.keyCode = keyCode\n  event.key = event.code = key\n  return event\n}\n", "import {nodeSize, textRange, parentNode} from \"./dom\"\nimport browser from \"./browser\"\n\nfunction windowRect(doc) {\n  return {left: 0, right: doc.documentElement.clientWidth,\n          top: 0, bottom: doc.documentElement.clientHeight}\n}\n\nfunction getSide(value, side) {\n  return typeof value == \"number\" ? value : value[side]\n}\n\nfunction clientRect(node) {\n  let rect = node.getBoundingClientRect()\n  // Adjust for elements with style \"transform: scale()\"\n  let scaleX = (rect.width / node.offsetWidth) || 1\n  let scaleY = (rect.height / node.offsetHeight) || 1\n  // Make sure scrollbar width isn't included in the rectangle\n  return {left: rect.left, right: rect.left + node.clientWidth * scaleX,\n          top: rect.top, bottom: rect.top + node.clientHeight * scaleY}\n}\n\nexport function scrollRectIntoView(view, rect, startDOM) {\n  let scrollThreshold = view.someProp(\"scrollThreshold\") || 0, scrollMargin = view.someProp(\"scrollMargin\") || 5\n  let doc = view.dom.ownerDocument\n  for (let parent = startDOM || view.dom;; parent = parentNode(parent)) {\n    if (!parent) break\n    if (parent.nodeType != 1) continue\n    let atTop = parent == doc.body || parent.nodeType != 1\n    let bounding = atTop ? windowRect(doc) : clientRect(parent)\n    let moveX = 0, moveY = 0\n    if (rect.top < bounding.top + getSide(scrollThreshold, \"top\"))\n      moveY = -(bounding.top - rect.top + getSide(scrollMargin, \"top\"))\n    else if (rect.bottom > bounding.bottom - getSide(scrollThreshold, \"bottom\"))\n      moveY = rect.bottom - bounding.bottom + getSide(scrollMargin, \"bottom\")\n    if (rect.left < bounding.left + getSide(scrollThreshold, \"left\"))\n      moveX = -(bounding.left - rect.left + getSide(scrollMargin, \"left\"))\n    else if (rect.right > bounding.right - getSide(scrollThreshold, \"right\"))\n      moveX = rect.right - bounding.right + getSide(scrollMargin, \"right\")\n    if (moveX || moveY) {\n      if (atTop) {\n        doc.defaultView.scrollBy(moveX, moveY)\n      } else {\n        let startX = parent.scrollLeft, startY = parent.scrollTop\n        if (moveY) parent.scrollTop += moveY\n        if (moveX) parent.scrollLeft += moveX\n        let dX = parent.scrollLeft - startX, dY = parent.scrollTop - startY\n        rect = {left: rect.left - dX, top: rect.top - dY, right: rect.right - dX, bottom: rect.bottom - dY}\n      }\n    }\n    if (atTop) break\n  }\n}\n\n// Store the scroll position of the editor's parent nodes, along with\n// the top position of an element near the top of the editor, which\n// will be used to make sure the visible viewport remains stable even\n// when the size of the content above changes.\nexport function storeScrollPos(view) {\n  let rect = view.dom.getBoundingClientRect(), startY = Math.max(0, rect.top)\n  let refDOM, refTop\n  for (let x = (rect.left + rect.right) / 2, y = startY + 1;\n       y < Math.min(innerHeight, rect.bottom); y += 5) {\n    let dom = view.root.elementFromPoint(x, y)\n    if (dom == view.dom || !view.dom.contains(dom)) continue\n    let localRect = dom.getBoundingClientRect()\n    if (localRect.top >= startY - 20) {\n      refDOM = dom\n      refTop = localRect.top\n      break\n    }\n  }\n  return {refDOM, refTop, stack: scrollStack(view.dom)}\n}\n\nfunction scrollStack(dom) {\n  let stack = [], doc = dom.ownerDocument\n  for (; dom; dom = parentNode(dom)) {\n    stack.push({dom, top: dom.scrollTop, left: dom.scrollLeft})\n    if (dom == doc) break\n  }\n  return stack\n}\n\n// Reset the scroll position of the editor's parent nodes to that what\n// it was before, when storeScrollPos was called.\nexport function resetScrollPos({refDOM, refTop, stack}) {\n  let newRefTop = refDOM ? refDOM.getBoundingClientRect().top : 0\n  restoreScrollStack(stack, newRefTop == 0 ? 0 : newRefTop - refTop)\n}\n\nfunction restoreScrollStack(stack, dTop) {\n  for (let i = 0; i < stack.length; i++) {\n    let {dom, top, left} = stack[i]\n    if (dom.scrollTop != top + dTop) dom.scrollTop = top + dTop\n    if (dom.scrollLeft != left) dom.scrollLeft = left\n  }\n}\n\nlet preventScrollSupported = null\n// Feature-detects support for .focus({preventScroll: true}), and uses\n// a fallback kludge when not supported.\nexport function focusPreventScroll(dom) {\n  if (dom.setActive) return dom.setActive() // in IE\n  if (preventScrollSupported) return dom.focus(preventScrollSupported)\n\n  let stored = scrollStack(dom)\n  dom.focus(preventScrollSupported == null ? {\n    get preventScroll() {\n      preventScrollSupported = {preventScroll: true}\n      return true\n    }\n  } : undefined)\n  if (!preventScrollSupported) {\n    preventScrollSupported = false\n    restoreScrollStack(stored, 0)\n  }\n}\n\nfunction findOffsetInNode(node, coords) {\n  let closest, dxClosest = 2e8, coordsClosest, offset = 0\n  let rowBot = coords.top, rowTop = coords.top\n  for (let child = node.firstChild, childIndex = 0; child; child = child.nextSibling, childIndex++) {\n    let rects\n    if (child.nodeType == 1) rects = child.getClientRects()\n    else if (child.nodeType == 3) rects = textRange(child).getClientRects()\n    else continue\n\n    for (let i = 0; i < rects.length; i++) {\n      let rect = rects[i]\n      if (rect.top <= rowBot && rect.bottom >= rowTop) {\n        rowBot = Math.max(rect.bottom, rowBot)\n        rowTop = Math.min(rect.top, rowTop)\n        let dx = rect.left > coords.left ? rect.left - coords.left\n            : rect.right < coords.left ? coords.left - rect.right : 0\n        if (dx < dxClosest) {\n          closest = child\n          dxClosest = dx\n          coordsClosest = dx && closest.nodeType == 3 ? {left: rect.right < coords.left ? rect.right : rect.left, top: coords.top} : coords\n          if (child.nodeType == 1 && dx)\n            offset = childIndex + (coords.left >= (rect.left + rect.right) / 2 ? 1 : 0)\n          continue\n        }\n      }\n      if (!closest && (coords.left >= rect.right && coords.top >= rect.top ||\n                       coords.left >= rect.left && coords.top >= rect.bottom))\n        offset = childIndex + 1\n    }\n  }\n  if (closest && closest.nodeType == 3) return findOffsetInText(closest, coordsClosest)\n  if (!closest || (dxClosest && closest.nodeType == 1)) return {node, offset}\n  return findOffsetInNode(closest, coordsClosest)\n}\n\nfunction findOffsetInText(node, coords) {\n  let len = node.nodeValue.length\n  let range = document.createRange()\n  for (let i = 0; i < len; i++) {\n    range.setEnd(node, i + 1)\n    range.setStart(node, i)\n    let rect = singleRect(range, 1)\n    if (rect.top == rect.bottom) continue\n    if (inRect(coords, rect))\n      return {node, offset: i + (coords.left >= (rect.left + rect.right) / 2 ? 1 : 0)}\n  }\n  return {node, offset: 0}\n}\n\nfunction inRect(coords, rect) {\n  return coords.left >= rect.left - 1 && coords.left <= rect.right + 1&&\n    coords.top >= rect.top - 1 && coords.top <= rect.bottom + 1\n}\n\nfunction targetKludge(dom, coords) {\n  let parent = dom.parentNode\n  if (parent && /^li$/i.test(parent.nodeName) && coords.left < dom.getBoundingClientRect().left)\n    return parent\n  return dom\n}\n\nfunction posFromElement(view, elt, coords) {\n  let {node, offset} = findOffsetInNode(elt, coords), bias = -1\n  if (node.nodeType == 1 && !node.firstChild) {\n    let rect = node.getBoundingClientRect()\n    bias = rect.left != rect.right && coords.left > (rect.left + rect.right) / 2 ? 1 : -1\n  }\n  return view.docView.posFromDOM(node, offset, bias)\n}\n\nfunction posFromCaret(view, node, offset, coords) {\n  // Browser (in caretPosition/RangeFromPoint) will agressively\n  // normalize towards nearby inline nodes. Since we are interested in\n  // positions between block nodes too, we first walk up the hierarchy\n  // of nodes to see if there are block nodes that the coordinates\n  // fall outside of. If so, we take the position before/after that\n  // block. If not, we call `posFromDOM` on the raw node/offset.\n  let outside = -1\n  for (let cur = node;;) {\n    if (cur == view.dom) break\n    let desc = view.docView.nearestDesc(cur, true)\n    if (!desc) return null\n    if (desc.node.isBlock && desc.parent) {\n      let rect = desc.dom.getBoundingClientRect()\n      if (rect.left > coords.left || rect.top > coords.top) outside = desc.posBefore\n      else if (rect.right < coords.left || rect.bottom < coords.top) outside = desc.posAfter\n      else break\n    }\n    cur = desc.dom.parentNode\n  }\n  return outside > -1 ? outside : view.docView.posFromDOM(node, offset)\n}\n\nfunction elementFromPoint(element, coords, box) {\n  let len = element.childNodes.length\n  if (len && box.top < box.bottom) {\n    for (let startI = Math.max(0, Math.min(len - 1, Math.floor(len * (coords.top - box.top) / (box.bottom - box.top)) - 2)), i = startI;;) {\n      let child = element.childNodes[i]\n      if (child.nodeType == 1) {\n        let rects = child.getClientRects()\n        for (let j = 0; j < rects.length; j++) {\n          let rect = rects[j]\n          if (inRect(coords, rect)) return elementFromPoint(child, coords, rect)\n        }\n      }\n      if ((i = (i + 1) % len) == startI) break\n    }\n  }\n  return element\n}\n\n// Given an x,y position on the editor, get the position in the document.\nexport function posAtCoords(view, coords) {\n  let doc = view.dom.ownerDocument, node, offset\n  if (doc.caretPositionFromPoint) {\n    try { // Firefox throws for this call in hard-to-predict circumstances (#994)\n      let pos = doc.caretPositionFromPoint(coords.left, coords.top)\n      if (pos) ({offsetNode: node, offset} = pos)\n    } catch (_) {}\n  }\n  if (!node && doc.caretRangeFromPoint) {\n    let range = doc.caretRangeFromPoint(coords.left, coords.top)\n    if (range) ({startContainer: node, startOffset: offset} = range)\n  }\n\n  let elt = (view.root.elementFromPoint ? view.root : doc).elementFromPoint(coords.left, coords.top + 1), pos\n  if (!elt || !view.dom.contains(elt.nodeType != 1 ? elt.parentNode : elt)) {\n    let box = view.dom.getBoundingClientRect()\n    if (!inRect(coords, box)) return null\n    elt = elementFromPoint(view.dom, coords, box)\n    if (!elt) return null\n  }\n  // Safari's caretRangeFromPoint returns nonsense when on a draggable element\n  if (browser.safari) {\n    for (let p = elt; node && p; p = parentNode(p))\n      if (p.draggable) node = offset = null\n  }\n  elt = targetKludge(elt, coords)\n  if (node) {\n    if (browser.gecko && node.nodeType == 1) {\n      // Firefox will sometimes return offsets into <input> nodes, which\n      // have no actual children, from caretPositionFromPoint (#953)\n      offset = Math.min(offset, node.childNodes.length)\n      // It'll also move the returned position before image nodes,\n      // even if those are behind it.\n      if (offset < node.childNodes.length) {\n        let next = node.childNodes[offset], box\n        if (next.nodeName == \"IMG\" && (box = next.getBoundingClientRect()).right <= coords.left &&\n            box.bottom > coords.top)\n          offset++\n      }\n    }\n    // Suspiciously specific kludge to work around caret*FromPoint\n    // never returning a position at the end of the document\n    if (node == view.dom && offset == node.childNodes.length - 1 && node.lastChild.nodeType == 1 &&\n        coords.top > node.lastChild.getBoundingClientRect().bottom)\n      pos = view.state.doc.content.size\n    // Ignore positions directly after a BR, since caret*FromPoint\n    // 'round up' positions that would be more accurately placed\n    // before the BR node.\n    else if (offset == 0 || node.nodeType != 1 || node.childNodes[offset - 1].nodeName != \"BR\")\n      pos = posFromCaret(view, node, offset, coords)\n  }\n  if (pos == null) pos = posFromElement(view, elt, coords)\n\n  let desc = view.docView.nearestDesc(elt, true)\n  return {pos, inside: desc ? desc.posAtStart - desc.border : -1}\n}\n\nfunction singleRect(object, bias) {\n  let rects = object.getClientRects()\n  return !rects.length ? object.getBoundingClientRect() : rects[bias < 0 ? 0 : rects.length - 1]\n}\n\nconst BIDI = /[\\u0590-\\u05f4\\u0600-\\u06ff\\u0700-\\u08ac]/\n\n// : (EditorView, number, number) \u2192 {left: number, top: number, right: number, bottom: number}\n// Given a position in the document model, get a bounding box of the\n// character at that position, relative to the window.\nexport function coordsAtPos(view, pos, side) {\n  let {node, offset} = view.docView.domFromPos(pos, side < 0 ? -1 : 1)\n\n  let supportEmptyRange = browser.webkit || browser.gecko\n  if (node.nodeType == 3) {\n    // These browsers support querying empty text ranges. Prefer that in\n    // bidi context or when at the end of a node.\n    if (supportEmptyRange && (BIDI.test(node.nodeValue) || (side < 0 ? !offset : offset == node.nodeValue.length))) {\n      let rect = singleRect(textRange(node, offset, offset), side)\n      // Firefox returns bad results (the position before the space)\n      // when querying a position directly after line-broken\n      // whitespace. Detect this situation and and kludge around it\n      if (browser.gecko && offset && /\\s/.test(node.nodeValue[offset - 1]) && offset < node.nodeValue.length) {\n        let rectBefore = singleRect(textRange(node, offset - 1, offset - 1), -1)\n        if (rectBefore.top == rect.top) {\n          let rectAfter = singleRect(textRange(node, offset, offset + 1), -1)\n          if (rectAfter.top != rect.top)\n            return flattenV(rectAfter, rectAfter.left < rectBefore.left)\n        }\n      }\n      return rect\n    } else {\n      let from = offset, to = offset, takeSide = side < 0 ? 1 : -1\n      if (side < 0 && !offset) { to++; takeSide = -1 }\n      else if (side >= 0 && offset == node.nodeValue.length) { from--; takeSide = 1 }\n      else if (side < 0) { from-- }\n      else { to ++ }\n      return flattenV(singleRect(textRange(node, from, to), takeSide), takeSide < 0)\n    }\n  }\n\n  // Return a horizontal line in block context\n  if (!view.state.doc.resolve(pos).parent.inlineContent) {\n    if (offset && (side < 0 || offset == nodeSize(node))) {\n      let before = node.childNodes[offset - 1]\n      if (before.nodeType == 1) return flattenH(before.getBoundingClientRect(), false)\n    }\n    if (offset < nodeSize(node)) {\n      let after = node.childNodes[offset]\n      if (after.nodeType == 1) return flattenH(after.getBoundingClientRect(), true)\n    }\n    return flattenH(node.getBoundingClientRect(), side >= 0)\n  }\n\n  // Inline, not in text node (this is not Bidi-safe)\n  if (offset && (side < 0 || offset == nodeSize(node))) {\n    let before = node.childNodes[offset - 1]\n    let target = before.nodeType == 3 ? textRange(before, nodeSize(before) - (supportEmptyRange ? 0 : 1))\n        // BR nodes tend to only return the rectangle before them.\n        // Only use them if they are the last element in their parent\n        : before.nodeType == 1 && (before.nodeName != \"BR\" || !before.nextSibling) ? before : null\n    if (target) return flattenV(singleRect(target, 1), false)\n  }\n  if (offset < nodeSize(node)) {\n    let after = node.childNodes[offset]\n    while (after.pmViewDesc && after.pmViewDesc.ignoreForCoords) after = after.nextSibling\n    let target = !after ? null : after.nodeType == 3 ? textRange(after, 0, (supportEmptyRange ? 0 : 1))\n        : after.nodeType == 1 ? after : null\n    if (target) return flattenV(singleRect(target, -1), true)\n  }\n  // All else failed, just try to get a rectangle for the target node\n  return flattenV(singleRect(node.nodeType == 3 ? textRange(node) : node, -side), side >= 0)\n}\n\nfunction flattenV(rect, left) {\n  if (rect.width == 0) return rect\n  let x = left ? rect.left : rect.right\n  return {top: rect.top, bottom: rect.bottom, left: x, right: x}\n}\n\nfunction flattenH(rect, top) {\n  if (rect.height == 0) return rect\n  let y = top ? rect.top : rect.bottom\n  return {top: y, bottom: y, left: rect.left, right: rect.right}\n}\n\nfunction withFlushedState(view, state, f) {\n  let viewState = view.state, active = view.root.activeElement\n  if (viewState != state) view.updateState(state)\n  if (active != view.dom) view.focus()\n  try {\n    return f()\n  } finally {\n    if (viewState != state) view.updateState(viewState)\n    if (active != view.dom && active) active.focus()\n  }\n}\n\n// : (EditorView, number, number)\n// Whether vertical position motion in a given direction\n// from a position would leave a text block.\nfunction endOfTextblockVertical(view, state, dir) {\n  let sel = state.selection\n  let $pos = dir == \"up\" ? sel.$from : sel.$to\n  return withFlushedState(view, state, () => {\n    let {node: dom} = view.docView.domFromPos($pos.pos, dir == \"up\" ? -1 : 1)\n    for (;;) {\n      let nearest = view.docView.nearestDesc(dom, true)\n      if (!nearest) break\n      if (nearest.node.isBlock) { dom = nearest.dom; break }\n      dom = nearest.dom.parentNode\n    }\n    let coords = coordsAtPos(view, $pos.pos, 1)\n    for (let child = dom.firstChild; child; child = child.nextSibling) {\n      let boxes\n      if (child.nodeType == 1) boxes = child.getClientRects()\n      else if (child.nodeType == 3) boxes = textRange(child, 0, child.nodeValue.length).getClientRects()\n      else continue\n      for (let i = 0; i < boxes.length; i++) {\n        let box = boxes[i]\n        if (box.bottom > box.top + 1 &&\n            (dir == \"up\" ? coords.top - box.top > (box.bottom - coords.top) * 2\n             : box.bottom - coords.bottom > (coords.bottom - box.top) * 2))\n          return false\n      }\n    }\n    return true\n  })\n}\n\nconst maybeRTL = /[\\u0590-\\u08ac]/\n\nfunction endOfTextblockHorizontal(view, state, dir) {\n  let {$head} = state.selection\n  if (!$head.parent.isTextblock) return false\n  let offset = $head.parentOffset, atStart = !offset, atEnd = offset == $head.parent.content.size\n  let sel = view.root.getSelection()\n  // If the textblock is all LTR, or the browser doesn't support\n  // Selection.modify (Edge), fall back to a primitive approach\n  if (!maybeRTL.test($head.parent.textContent) || !sel.modify)\n    return dir == \"left\" || dir == \"backward\" ? atStart : atEnd\n\n  return withFlushedState(view, state, () => {\n    // This is a huge hack, but appears to be the best we can\n    // currently do: use `Selection.modify` to move the selection by\n    // one character, and see if that moves the cursor out of the\n    // textblock (or doesn't move it at all, when at the start/end of\n    // the document).\n    let oldRange = sel.getRangeAt(0), oldNode = sel.focusNode, oldOff = sel.focusOffset\n    let oldBidiLevel = sel.caretBidiLevel // Only for Firefox\n    sel.modify(\"move\", dir, \"character\")\n    let parentDOM = $head.depth ? view.docView.domAfterPos($head.before()) : view.dom\n    let result = !parentDOM.contains(sel.focusNode.nodeType == 1 ? sel.focusNode : sel.focusNode.parentNode) ||\n        (oldNode == sel.focusNode && oldOff == sel.focusOffset)\n    // Restore the previous selection\n    sel.removeAllRanges()\n    sel.addRange(oldRange)\n    if (oldBidiLevel != null) sel.caretBidiLevel = oldBidiLevel\n    return result\n  })\n}\n\nlet cachedState = null, cachedDir = null, cachedResult = false\nexport function endOfTextblock(view, state, dir) {\n  if (cachedState == state && cachedDir == dir) return cachedResult\n  cachedState = state; cachedDir = dir\n  return cachedResult = dir == \"up\" || dir == \"down\"\n    ? endOfTextblockVertical(view, state, dir)\n    : endOfTextblockHorizontal(view, state, dir)\n}\n", "import {DOMSerializer, Fragment, Mark} from \"prosemirror-model\"\nimport {TextSelection} from \"prosemirror-state\"\n\nimport {domIndex, isEquivalentPosition, nodeSize} from \"./dom\"\nimport browser from \"./browser\"\n\n// NodeView:: interface\n//\n// By default, document nodes are rendered using the result of the\n// [`toDOM`](#model.NodeSpec.toDOM) method of their spec, and managed\n// entirely by the editor. For some use cases, such as embedded\n// node-specific editing interfaces, you want more control over\n// the behavior of a node's in-editor representation, and need to\n// [define](#view.EditorProps.nodeViews) a custom node view.\n//\n// Mark views only support `dom` and `contentDOM`, and don't support\n// any of the node view methods.\n//\n// Objects returned as node views must conform to this interface.\n//\n//   dom:: ?dom.Node\n//   The outer DOM node that represents the document node. When not\n//   given, the default strategy is used to create a DOM node.\n//\n//   contentDOM:: ?dom.Node\n//   The DOM node that should hold the node's content. Only meaningful\n//   if the node view also defines a `dom` property and if its node\n//   type is not a leaf node type. When this is present, ProseMirror\n//   will take care of rendering the node's children into it. When it\n//   is not present, the node view itself is responsible for rendering\n//   (or deciding not to render) its child nodes.\n//\n//   update:: ?(node: Node, decorations: [Decoration], innerDecorations: DecorationSource) \u2192 bool\n//   When given, this will be called when the view is updating itself.\n//   It will be given a node (possibly of a different type), an array\n//   of active decorations around the node (which are automatically\n//   drawn, and the node view may ignore if it isn't interested in\n//   them), and a [decoration source](#view.DecorationSource) that\n//   represents any decorations that apply to the content of the node\n//   (which again may be ignored). It should return true if it was\n//   able to update to that node, and false otherwise. If the node\n//   view has a `contentDOM` property (or no `dom` property), updating\n//   its child nodes will be handled by ProseMirror.\n//\n//   selectNode:: ?()\n//   Can be used to override the way the node's selected status (as a\n//   node selection) is displayed.\n//\n//   deselectNode:: ?()\n//   When defining a `selectNode` method, you should also provide a\n//   `deselectNode` method to remove the effect again.\n//\n//   setSelection:: ?(anchor: number, head: number, root: dom.Document)\n//   This will be called to handle setting the selection inside the\n//   node. The `anchor` and `head` positions are relative to the start\n//   of the node. By default, a DOM selection will be created between\n//   the DOM positions corresponding to those positions, but if you\n//   override it you can do something else.\n//\n//   stopEvent:: ?(event: dom.Event) \u2192 bool\n//   Can be used to prevent the editor view from trying to handle some\n//   or all DOM events that bubble up from the node view. Events for\n//   which this returns true are not handled by the editor.\n//\n//   ignoreMutation:: ?(dom.MutationRecord) \u2192 bool\n//   Called when a DOM\n//   [mutation](https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver)\n//   or a selection change happens within the view. When the change is\n//   a selection change, the record will have a `type` property of\n//   `\"selection\"` (which doesn't occur for native mutation records).\n//   Return false if the editor should re-read the selection or\n//   re-parse the range around the mutation, true if it can safely be\n//   ignored.\n//\n//   destroy:: ?()\n//   Called when the node view is removed from the editor or the whole\n//   editor is destroyed. (Not available for marks.)\n\n// View descriptions are data structures that describe the DOM that is\n// used to represent the editor's content. They are used for:\n//\n// - Incremental redrawing when the document changes\n//\n// - Figuring out what part of the document a given DOM position\n//   corresponds to\n//\n// - Wiring in custom implementations of the editing interface for a\n//   given node\n//\n// They form a doubly-linked mutable tree, starting at `view.docView`.\n\nconst NOT_DIRTY = 0, CHILD_DIRTY = 1, CONTENT_DIRTY = 2, NODE_DIRTY = 3\n\n// Superclass for the various kinds of descriptions. Defines their\n// basic structure and shared methods.\nclass ViewDesc {\n  // : (?ViewDesc, [ViewDesc], dom.Node, ?dom.Node)\n  constructor(parent, children, dom, contentDOM) {\n    this.parent = parent\n    this.children = children\n    this.dom = dom\n    // An expando property on the DOM node provides a link back to its\n    // description.\n    dom.pmViewDesc = this\n    // This is the node that holds the child views. It may be null for\n    // descs that don't have children.\n    this.contentDOM = contentDOM\n    this.dirty = NOT_DIRTY\n  }\n\n  // Used to check whether a given description corresponds to a\n  // widget/mark/node.\n  matchesWidget() { return false }\n  matchesMark() { return false }\n  matchesNode() { return false }\n  matchesHack(_nodeName) { return false }\n\n  // : () \u2192 ?ParseRule\n  // When parsing in-editor content (in domchange.js), we allow\n  // descriptions to determine the parse rules that should be used to\n  // parse them.\n  parseRule() { return null }\n\n  // : (dom.Event) \u2192 bool\n  // Used by the editor's event handler to ignore events that come\n  // from certain descs.\n  stopEvent() { return false }\n\n  // The size of the content represented by this desc.\n  get size() {\n    let size = 0\n    for (let i = 0; i < this.children.length; i++) size += this.children[i].size\n    return size\n  }\n\n  // For block nodes, this represents the space taken up by their\n  // start/end tokens.\n  get border() { return 0 }\n\n  destroy() {\n    this.parent = null\n    if (this.dom.pmViewDesc == this) this.dom.pmViewDesc = null\n    for (let i = 0; i < this.children.length; i++)\n      this.children[i].destroy()\n  }\n\n  posBeforeChild(child) {\n    for (let i = 0, pos = this.posAtStart; i < this.children.length; i++) {\n      let cur = this.children[i]\n      if (cur == child) return pos\n      pos += cur.size\n    }\n  }\n\n  get posBefore() {\n    return this.parent.posBeforeChild(this)\n  }\n\n  get posAtStart() {\n    return this.parent ? this.parent.posBeforeChild(this) + this.border : 0\n  }\n\n  get posAfter() {\n    return this.posBefore + this.size\n  }\n\n  get posAtEnd() {\n    return this.posAtStart + this.size - 2 * this.border\n  }\n\n  // : (dom.Node, number, ?number) \u2192 number\n  localPosFromDOM(dom, offset, bias) {\n    // If the DOM position is in the content, use the child desc after\n    // it to figure out a position.\n    if (this.contentDOM && this.contentDOM.contains(dom.nodeType == 1 ? dom : dom.parentNode)) {\n      if (bias < 0) {\n        let domBefore, desc\n        if (dom == this.contentDOM) {\n          domBefore = dom.childNodes[offset - 1]\n        } else {\n          while (dom.parentNode != this.contentDOM) dom = dom.parentNode\n          domBefore = dom.previousSibling\n        }\n        while (domBefore && !((desc = domBefore.pmViewDesc) && desc.parent == this)) domBefore = domBefore.previousSibling\n        return domBefore ? this.posBeforeChild(desc) + desc.size : this.posAtStart\n      } else {\n        let domAfter, desc\n        if (dom == this.contentDOM) {\n          domAfter = dom.childNodes[offset]\n        } else {\n          while (dom.parentNode != this.contentDOM) dom = dom.parentNode\n          domAfter = dom.nextSibling\n        }\n        while (domAfter && !((desc = domAfter.pmViewDesc) && desc.parent == this)) domAfter = domAfter.nextSibling\n        return domAfter ? this.posBeforeChild(desc) : this.posAtEnd\n      }\n    }\n    // Otherwise, use various heuristics, falling back on the bias\n    // parameter, to determine whether to return the position at the\n    // start or at the end of this view desc.\n    let atEnd\n    if (dom == this.dom && this.contentDOM) {\n      atEnd = offset > domIndex(this.contentDOM)\n    } else if (this.contentDOM && this.contentDOM != this.dom && this.dom.contains(this.contentDOM)) {\n      atEnd = dom.compareDocumentPosition(this.contentDOM) & 2\n    } else if (this.dom.firstChild) {\n      if (offset == 0) for (let search = dom;; search = search.parentNode) {\n        if (search == this.dom) { atEnd = false; break }\n        if (search.parentNode.firstChild != search) break\n      }\n      if (atEnd == null && offset == dom.childNodes.length) for (let search = dom;; search = search.parentNode) {\n        if (search == this.dom) { atEnd = true; break }\n        if (search.parentNode.lastChild != search) break\n      }\n    }\n    return (atEnd == null ? bias > 0 : atEnd) ? this.posAtEnd : this.posAtStart\n  }\n\n  // Scan up the dom finding the first desc that is a descendant of\n  // this one.\n  nearestDesc(dom, onlyNodes) {\n    for (let first = true, cur = dom; cur; cur = cur.parentNode) {\n      let desc = this.getDesc(cur)\n      if (desc && (!onlyNodes || desc.node)) {\n        // If dom is outside of this desc's nodeDOM, don't count it.\n        if (first && desc.nodeDOM &&\n            !(desc.nodeDOM.nodeType == 1 ? desc.nodeDOM.contains(dom.nodeType == 1 ? dom : dom.parentNode) : desc.nodeDOM == dom))\n          first = false\n        else\n          return desc\n      }\n    }\n  }\n\n  getDesc(dom) {\n    let desc = dom.pmViewDesc\n    for (let cur = desc; cur; cur = cur.parent) if (cur == this) return desc\n  }\n\n  posFromDOM(dom, offset, bias) {\n    for (let scan = dom; scan; scan = scan.parentNode) {\n      let desc = this.getDesc(scan)\n      if (desc) return desc.localPosFromDOM(dom, offset, bias)\n    }\n    return -1\n  }\n\n  // : (number) \u2192 ?NodeViewDesc\n  // Find the desc for the node after the given pos, if any. (When a\n  // parent node overrode rendering, there might not be one.)\n  descAt(pos) {\n    for (let i = 0, offset = 0; i < this.children.length; i++) {\n      let child = this.children[i], end = offset + child.size\n      if (offset == pos && end != offset) {\n        while (!child.border && child.children.length) child = child.children[0]\n        return child\n      }\n      if (pos < end) return child.descAt(pos - offset - child.border)\n      offset = end\n    }\n  }\n\n  // : (number, number) \u2192 {node: dom.Node, offset: number}\n  domFromPos(pos, side) {\n    if (!this.contentDOM) return {node: this.dom, offset: 0}\n    // First find the position in the child array\n    let i = 0, offset = 0\n    for (let curPos = 0; i < this.children.length; i++) {\n      let child = this.children[i], end = curPos + child.size\n      if (end > pos || child instanceof TrailingHackViewDesc) { offset = pos - curPos; break }\n      curPos = end\n    }\n    // If this points into the middle of a child, call through\n    if (offset) return this.children[i].domFromPos(offset - this.children[i].border, side)\n    // Go back if there were any zero-length widgets with side >= 0 before this point\n    for (let prev; i && !(prev = this.children[i - 1]).size && prev instanceof WidgetViewDesc && prev.widget.type.side >= 0; i--) {}\n    // Scan towards the first useable node\n    if (side <= 0) {\n      let prev, enter = true\n      for (;; i--, enter = false) {\n        prev = i ? this.children[i - 1] : null\n        if (!prev || prev.dom.parentNode == this.contentDOM) break\n      }\n      if (prev && side && enter && !prev.border && !prev.domAtom) return prev.domFromPos(prev.size, side)\n      return {node: this.contentDOM, offset: prev ? domIndex(prev.dom) + 1 : 0}\n    } else {\n      let next, enter = true\n      for (;; i++, enter = false) {\n        next = i < this.children.length ? this.children[i] : null\n        if (!next || next.dom.parentNode == this.contentDOM) break\n      }\n      if (next && enter && !next.border && !next.domAtom) return next.domFromPos(0, side)\n      return {node: this.contentDOM, offset: next ? domIndex(next.dom) : this.contentDOM.childNodes.length}\n    }\n  }\n\n  // Used to find a DOM range in a single parent for a given changed\n  // range.\n  parseRange(from, to, base = 0) {\n    if (this.children.length == 0)\n      return {node: this.contentDOM, from, to, fromOffset: 0, toOffset: this.contentDOM.childNodes.length}\n\n    let fromOffset = -1, toOffset = -1\n    for (let offset = base, i = 0;; i++) {\n      let child = this.children[i], end = offset + child.size\n      if (fromOffset == -1 && from <= end) {\n        let childBase = offset + child.border\n        // FIXME maybe descend mark views to parse a narrower range?\n        if (from >= childBase && to <= end - child.border && child.node &&\n            child.contentDOM && this.contentDOM.contains(child.contentDOM))\n          return child.parseRange(from, to, childBase)\n\n        from = offset\n        for (let j = i; j > 0; j--) {\n          let prev = this.children[j - 1]\n          if (prev.size && prev.dom.parentNode == this.contentDOM && !prev.emptyChildAt(1)) {\n            fromOffset = domIndex(prev.dom) + 1\n            break\n          }\n          from -= prev.size\n        }\n        if (fromOffset == -1) fromOffset = 0\n      }\n      if (fromOffset > -1 && (end > to || i == this.children.length - 1)) {\n        to = end\n        for (let j = i + 1; j < this.children.length; j++) {\n          let next = this.children[j]\n          if (next.size && next.dom.parentNode == this.contentDOM && !next.emptyChildAt(-1)) {\n            toOffset = domIndex(next.dom)\n            break\n          }\n          to += next.size\n        }\n        if (toOffset == -1) toOffset = this.contentDOM.childNodes.length\n        break\n      }\n      offset = end\n    }\n    return {node: this.contentDOM, from, to, fromOffset, toOffset}\n  }\n\n  emptyChildAt(side) {\n    if (this.border || !this.contentDOM || !this.children.length) return false\n    let child = this.children[side < 0 ? 0 : this.children.length - 1]\n    return child.size == 0 || child.emptyChildAt(side)\n  }\n\n  // : (number) \u2192 dom.Node\n  domAfterPos(pos) {\n    let {node, offset} = this.domFromPos(pos, 0)\n    if (node.nodeType != 1 || offset == node.childNodes.length)\n      throw new RangeError(\"No node after pos \" + pos)\n    return node.childNodes[offset]\n  }\n\n  // : (number, number, dom.Document)\n  // View descs are responsible for setting any selection that falls\n  // entirely inside of them, so that custom implementations can do\n  // custom things with the selection. Note that this falls apart when\n  // a selection starts in such a node and ends in another, in which\n  // case we just use whatever domFromPos produces as a best effort.\n  setSelection(anchor, head, root, force) {\n    // If the selection falls entirely in a child, give it to that child\n    let from = Math.min(anchor, head), to = Math.max(anchor, head)\n    for (let i = 0, offset = 0; i < this.children.length; i++) {\n      let child = this.children[i], end = offset + child.size\n      if (from > offset && to < end)\n        return child.setSelection(anchor - offset - child.border, head - offset - child.border, root, force)\n      offset = end\n    }\n\n    let anchorDOM = this.domFromPos(anchor, anchor ? -1 : 1)\n    let headDOM = head == anchor ? anchorDOM : this.domFromPos(head, head ? -1 : 1)\n    let domSel = root.getSelection()\n\n    let brKludge = false\n    // On Firefox, using Selection.collapse to put the cursor after a\n    // BR node for some reason doesn't always work (#1073). On Safari,\n    // the cursor sometimes inexplicable visually lags behind its\n    // reported position in such situations (#1092).\n    if ((browser.gecko || browser.safari) && anchor == head) {\n      let {node, offset} = anchorDOM\n      if (node.nodeType == 3) {\n        brKludge = offset && node.nodeValue[offset - 1] == \"\\n\"\n        // Issue #1128\n        if (brKludge && offset == node.nodeValue.length) {\n          for (let scan = node, after; scan; scan = scan.parentNode) {\n            if (after = scan.nextSibling) {\n              if (after.nodeName == \"BR\")\n                anchorDOM = headDOM = {node: after.parentNode, offset: domIndex(after) + 1}\n              break\n            }\n            let desc = scan.pmViewDesc\n            if (desc && desc.node && desc.node.isBlock) break\n          }\n        }\n      } else {\n        let prev = node.childNodes[offset - 1]\n        brKludge = prev && (prev.nodeName == \"BR\" || prev.contentEditable == \"false\")\n      }\n    }\n    // Firefox can act strangely when the selection is in front of an\n    // uneditable node. See #1163 and https://bugzilla.mozilla.org/show_bug.cgi?id=1709536\n    if (browser.gecko && domSel.focusNode && domSel.focusNode != headDOM.node && domSel.focusNode.nodeType == 1) {\n      let after = domSel.focusNode.childNodes[domSel.focusOffset]\n      if (after && after.contentEditable == \"false\") force = true\n    }\n\n    if (!(force || brKludge && browser.safari) &&\n        isEquivalentPosition(anchorDOM.node, anchorDOM.offset, domSel.anchorNode, domSel.anchorOffset) &&\n        isEquivalentPosition(headDOM.node, headDOM.offset, domSel.focusNode, domSel.focusOffset))\n      return\n\n    // Selection.extend can be used to create an 'inverted' selection\n    // (one where the focus is before the anchor), but not all\n    // browsers support it yet.\n    let domSelExtended = false\n    if ((domSel.extend || anchor == head) && !brKludge) {\n      domSel.collapse(anchorDOM.node, anchorDOM.offset)\n      try {\n        if (anchor != head) domSel.extend(headDOM.node, headDOM.offset)\n        domSelExtended = true\n      } catch (err) {\n        // In some cases with Chrome the selection is empty after calling\n        // collapse, even when it should be valid. This appears to be a bug, but\n        // it is difficult to isolate. If this happens fallback to the old path\n        // without using extend.\n        if (!(err instanceof DOMException)) throw err\n        // declare global: DOMException\n      }\n    }\n    if (!domSelExtended) {\n      if (anchor > head) { let tmp = anchorDOM; anchorDOM = headDOM; headDOM = tmp }\n      let range = document.createRange()\n      range.setEnd(headDOM.node, headDOM.offset)\n      range.setStart(anchorDOM.node, anchorDOM.offset)\n      domSel.removeAllRanges()\n      domSel.addRange(range)\n    }\n  }\n\n  // : (dom.MutationRecord) \u2192 bool\n  ignoreMutation(mutation) {\n    return !this.contentDOM && mutation.type != \"selection\"\n  }\n\n  get contentLost() {\n    return this.contentDOM && this.contentDOM != this.dom && !this.dom.contains(this.contentDOM)\n  }\n\n  // Remove a subtree of the element tree that has been touched\n  // by a DOM change, so that the next update will redraw it.\n  markDirty(from, to) {\n    for (let offset = 0, i = 0; i < this.children.length; i++) {\n      let child = this.children[i], end = offset + child.size\n      if (offset == end ? from <= end && to >= offset : from < end && to > offset) {\n        let startInside = offset + child.border, endInside = end - child.border\n        if (from >= startInside && to <= endInside) {\n          this.dirty = from == offset || to == end ? CONTENT_DIRTY : CHILD_DIRTY\n          if (from == startInside && to == endInside &&\n              (child.contentLost || child.dom.parentNode != this.contentDOM)) child.dirty = NODE_DIRTY\n          else child.markDirty(from - startInside, to - startInside)\n          return\n        } else {\n          child.dirty = child.dom == child.contentDOM && child.dom.parentNode == this.contentDOM && !child.children.length\n            ? CONTENT_DIRTY : NODE_DIRTY\n        }\n      }\n      offset = end\n    }\n    this.dirty = CONTENT_DIRTY\n  }\n\n  markParentsDirty() {\n    let level = 1\n    for (let node = this.parent; node; node = node.parent, level++) {\n      let dirty = level == 1 ? CONTENT_DIRTY : CHILD_DIRTY\n      if (node.dirty < dirty) node.dirty = dirty\n    }\n  }\n\n  get domAtom() { return false }\n\n  get ignoreForCoords() { return false }\n}\n\n// Reused array to avoid allocating fresh arrays for things that will\n// stay empty anyway.\nconst nothing = []\n\n// A widget desc represents a widget decoration, which is a DOM node\n// drawn between the document nodes.\nclass WidgetViewDesc extends ViewDesc {\n  // : (ViewDesc, Decoration)\n  constructor(parent, widget, view, pos) {\n    let self, dom = widget.type.toDOM\n    if (typeof dom == \"function\") dom = dom(view, () => {\n      if (!self) return pos\n      if (self.parent) return self.parent.posBeforeChild(self)\n    })\n    if (!widget.type.spec.raw) {\n      if (dom.nodeType != 1) {\n        let wrap = document.createElement(\"span\")\n        wrap.appendChild(dom)\n        dom = wrap\n      }\n      dom.contentEditable = false\n      dom.classList.add(\"ProseMirror-widget\")\n    }\n    super(parent, nothing, dom, null)\n    this.widget = widget\n    self = this\n  }\n\n  matchesWidget(widget) {\n    return this.dirty == NOT_DIRTY && widget.type.eq(this.widget.type)\n  }\n\n  parseRule() { return {ignore: true} }\n\n  stopEvent(event) {\n    let stop = this.widget.spec.stopEvent\n    return stop ? stop(event) : false\n  }\n\n  ignoreMutation(mutation) {\n    return mutation.type != \"selection\" || this.widget.spec.ignoreSelection\n  }\n\n  destroy() {\n    this.widget.type.destroy(this.dom)\n    super.destroy()\n  }\n\n  get domAtom() { return true }\n}\n\nclass CompositionViewDesc extends ViewDesc {\n  constructor(parent, dom, textDOM, text) {\n    super(parent, nothing, dom, null)\n    this.textDOM = textDOM\n    this.text = text\n  }\n\n  get size() { return this.text.length }\n\n  localPosFromDOM(dom, offset) {\n    if (dom != this.textDOM) return this.posAtStart + (offset ? this.size : 0)\n    return this.posAtStart + offset\n  }\n\n  domFromPos(pos) {\n    return {node: this.textDOM, offset: pos}\n  }\n\n  ignoreMutation(mut) {\n    return mut.type === 'characterData' && mut.target.nodeValue == mut.oldValue\n   }\n}\n\n// A mark desc represents a mark. May have multiple children,\n// depending on how the mark is split. Note that marks are drawn using\n// a fixed nesting order, for simplicity and predictability, so in\n// some cases they will be split more often than would appear\n// necessary.\nclass MarkViewDesc extends ViewDesc {\n  // : (ViewDesc, Mark, dom.Node)\n  constructor(parent, mark, dom, contentDOM) {\n    super(parent, [], dom, contentDOM)\n    this.mark = mark\n  }\n\n  static create(parent, mark, inline, view) {\n    let custom = view.nodeViews[mark.type.name]\n    let spec = custom && custom(mark, view, inline)\n    if (!spec || !spec.dom)\n      spec = DOMSerializer.renderSpec(document, mark.type.spec.toDOM(mark, inline))\n    return new MarkViewDesc(parent, mark, spec.dom, spec.contentDOM || spec.dom)\n  }\n\n  parseRule() {\n    if ((this.dirty & NODE_DIRTY) || this.mark.type.spec.reparseInView) return null\n    return {mark: this.mark.type.name, attrs: this.mark.attrs, contentElement: this.contentDOM}\n  }\n\n  matchesMark(mark) { return this.dirty != NODE_DIRTY && this.mark.eq(mark) }\n\n  markDirty(from, to) {\n    super.markDirty(from, to)\n    // Move dirty info to nearest node view\n    if (this.dirty != NOT_DIRTY) {\n      let parent = this.parent\n      while (!parent.node) parent = parent.parent\n      if (parent.dirty < this.dirty) parent.dirty = this.dirty\n      this.dirty = NOT_DIRTY\n    }\n  }\n\n  slice(from, to, view) {\n    let copy = MarkViewDesc.create(this.parent, this.mark, true, view)\n    let nodes = this.children, size = this.size\n    if (to < size) nodes = replaceNodes(nodes, to, size, view)\n    if (from > 0) nodes = replaceNodes(nodes, 0, from, view)\n    for (let i = 0; i < nodes.length; i++) nodes[i].parent = copy\n    copy.children = nodes\n    return copy\n  }\n}\n\n// Node view descs are the main, most common type of view desc, and\n// correspond to an actual node in the document. Unlike mark descs,\n// they populate their child array themselves.\nclass NodeViewDesc extends ViewDesc {\n  // : (?ViewDesc, Node, [Decoration], DecorationSource, dom.Node, ?dom.Node, EditorView)\n  constructor(parent, node, outerDeco, innerDeco, dom, contentDOM, nodeDOM, view, pos) {\n    super(parent, node.isLeaf ? nothing : [], dom, contentDOM)\n    this.nodeDOM = nodeDOM\n    this.node = node\n    this.outerDeco = outerDeco\n    this.innerDeco = innerDeco\n    if (contentDOM) this.updateChildren(view, pos)\n  }\n\n  // By default, a node is rendered using the `toDOM` method from the\n  // node type spec. But client code can use the `nodeViews` spec to\n  // supply a custom node view, which can influence various aspects of\n  // the way the node works.\n  //\n  // (Using subclassing for this was intentionally decided against,\n  // since it'd require exposing a whole slew of finicky\n  // implementation details to the user code that they probably will\n  // never need.)\n  static create(parent, node, outerDeco, innerDeco, view, pos) {\n    let custom = view.nodeViews[node.type.name], descObj\n    let spec = custom && custom(node, view, () => {\n      // (This is a function that allows the custom view to find its\n      // own position)\n      if (!descObj) return pos\n      if (descObj.parent) return descObj.parent.posBeforeChild(descObj)\n    }, outerDeco, innerDeco)\n\n    let dom = spec && spec.dom, contentDOM = spec && spec.contentDOM\n    if (node.isText) {\n      if (!dom) dom = document.createTextNode(node.text)\n      else if (dom.nodeType != 3) throw new RangeError(\"Text must be rendered as a DOM text node\")\n    } else if (!dom) {\n      ;({dom, contentDOM} = DOMSerializer.renderSpec(document, node.type.spec.toDOM(node)))\n    }\n    if (!contentDOM && !node.isText && dom.nodeName != \"BR\") { // Chrome gets confused by <br contenteditable=false>\n      if (!dom.hasAttribute(\"contenteditable\")) dom.contentEditable = false\n      if (node.type.spec.draggable) dom.draggable = true\n    }\n\n    let nodeDOM = dom\n    dom = applyOuterDeco(dom, outerDeco, node)\n\n    if (spec)\n      return descObj = new CustomNodeViewDesc(parent, node, outerDeco, innerDeco, dom, contentDOM, nodeDOM,\n                                              spec, view, pos + 1)\n    else if (node.isText)\n      return new TextViewDesc(parent, node, outerDeco, innerDeco, dom, nodeDOM, view)\n    else\n      return new NodeViewDesc(parent, node, outerDeco, innerDeco, dom, contentDOM, nodeDOM, view, pos + 1)\n  }\n\n  parseRule() {\n    // Experimental kludge to allow opt-in re-parsing of nodes\n    if (this.node.type.spec.reparseInView) return null\n    // FIXME the assumption that this can always return the current\n    // attrs means that if the user somehow manages to change the\n    // attrs in the dom, that won't be picked up. Not entirely sure\n    // whether this is a problem\n    let rule = {node: this.node.type.name, attrs: this.node.attrs}\n    if (this.node.type.whitespace == \"pre\") rule.preserveWhitespace = \"full\"\n    if (this.contentDOM && !this.contentLost) rule.contentElement = this.contentDOM\n    else rule.getContent = () => this.contentDOM ? Fragment.empty : this.node.content\n    return rule\n  }\n\n  matchesNode(node, outerDeco, innerDeco) {\n    return this.dirty == NOT_DIRTY && node.eq(this.node) &&\n      sameOuterDeco(outerDeco, this.outerDeco) && innerDeco.eq(this.innerDeco)\n  }\n\n  get size() { return this.node.nodeSize }\n\n  get border() { return this.node.isLeaf ? 0 : 1 }\n\n  // Syncs `this.children` to match `this.node.content` and the local\n  // decorations, possibly introducing nesting for marks. Then, in a\n  // separate step, syncs the DOM inside `this.contentDOM` to\n  // `this.children`.\n  updateChildren(view, pos) {\n    let inline = this.node.inlineContent, off = pos\n    let composition = view.composing && this.localCompositionInfo(view, pos)\n    let localComposition = composition && composition.pos > -1 ? composition : null\n    let compositionInChild = composition && composition.pos < 0\n    let updater = new ViewTreeUpdater(this, localComposition && localComposition.node)\n    iterDeco(this.node, this.innerDeco, (widget, i, insideNode) => {\n      if (widget.spec.marks)\n        updater.syncToMarks(widget.spec.marks, inline, view)\n      else if (widget.type.side >= 0 && !insideNode)\n        updater.syncToMarks(i == this.node.childCount ? Mark.none : this.node.child(i).marks, inline, view)\n      // If the next node is a desc matching this widget, reuse it,\n      // otherwise insert the widget as a new view desc.\n      updater.placeWidget(widget, view, off)\n    }, (child, outerDeco, innerDeco, i) => {\n      // Make sure the wrapping mark descs match the node's marks.\n      updater.syncToMarks(child.marks, inline, view)\n      // Try several strategies for drawing this node\n      let compIndex\n      if (updater.findNodeMatch(child, outerDeco, innerDeco, i)) {\n        // Found precise match with existing node view\n      } else if (compositionInChild && view.state.selection.from > off &&\n                 view.state.selection.to < off + child.nodeSize &&\n                 (compIndex = updater.findIndexWithChild(composition.node)) > -1 &&\n                 updater.updateNodeAt(child, outerDeco, innerDeco, compIndex, view)) {\n        // Updated the specific node that holds the composition\n      } else if (updater.updateNextNode(child, outerDeco, innerDeco, view, i)) {\n        // Could update an existing node to reflect this node\n      } else {\n        // Add it as a new view\n        updater.addNode(child, outerDeco, innerDeco, view, off)\n      }\n      off += child.nodeSize\n    })\n    // Drop all remaining descs after the current position.\n    updater.syncToMarks(nothing, inline, view)\n    if (this.node.isTextblock) updater.addTextblockHacks()\n    updater.destroyRest()\n\n    // Sync the DOM if anything changed\n    if (updater.changed || this.dirty == CONTENT_DIRTY) {\n      // May have to protect focused DOM from being changed if a composition is active\n      if (localComposition) this.protectLocalComposition(view, localComposition)\n      renderDescs(this.contentDOM, this.children, view)\n      if (browser.ios) iosHacks(this.dom)\n    }\n  }\n\n  localCompositionInfo(view, pos) {\n    // Only do something if both the selection and a focused text node\n    // are inside of this node\n    let {from, to} = view.state.selection\n    if (!(view.state.selection instanceof TextSelection) || from < pos || to > pos + this.node.content.size) return\n    let sel = view.root.getSelection()\n    let textNode = nearbyTextNode(sel.focusNode, sel.focusOffset)\n    if (!textNode || !this.dom.contains(textNode.parentNode)) return\n\n    if (this.node.inlineContent) {\n      // Find the text in the focused node in the node, stop if it's not\n      // there (may have been modified through other means, in which\n      // case it should overwritten)\n      let text = textNode.nodeValue\n      let textPos = findTextInFragment(this.node.content, text, from - pos, to - pos)\n      return textPos < 0 ? null : {node: textNode, pos: textPos, text}\n    } else {\n      return {node: textNode, pos: -1}\n    }\n  }\n\n  protectLocalComposition(view, {node, pos, text}) {\n    // The node is already part of a local view desc, leave it there\n    if (this.getDesc(node)) return\n\n    // Create a composition view for the orphaned nodes\n    let topNode = node\n    for (;; topNode = topNode.parentNode) {\n      if (topNode.parentNode == this.contentDOM) break\n      while (topNode.previousSibling) topNode.parentNode.removeChild(topNode.previousSibling)\n      while (topNode.nextSibling) topNode.parentNode.removeChild(topNode.nextSibling)\n      if (topNode.pmViewDesc) topNode.pmViewDesc = null\n    }\n    let desc = new CompositionViewDesc(this, topNode, node, text)\n    view.compositionNodes.push(desc)\n\n    // Patch up this.children to contain the composition view\n    this.children = replaceNodes(this.children, pos, pos + text.length, view, desc)\n  }\n\n  // : (Node, [Decoration], DecorationSource, EditorView) \u2192 bool\n  // If this desc be updated to match the given node decoration,\n  // do so and return true.\n  update(node, outerDeco, innerDeco, view) {\n    if (this.dirty == NODE_DIRTY ||\n        !node.sameMarkup(this.node)) return false\n    this.updateInner(node, outerDeco, innerDeco, view)\n    return true\n  }\n\n  updateInner(node, outerDeco, innerDeco, view) {\n    this.updateOuterDeco(outerDeco)\n    this.node = node\n    this.innerDeco = innerDeco\n    if (this.contentDOM) this.updateChildren(view, this.posAtStart)\n    this.dirty = NOT_DIRTY\n  }\n\n  updateOuterDeco(outerDeco) {\n    if (sameOuterDeco(outerDeco, this.outerDeco)) return\n    let needsWrap = this.nodeDOM.nodeType != 1\n    let oldDOM = this.dom\n    this.dom = patchOuterDeco(this.dom, this.nodeDOM,\n                              computeOuterDeco(this.outerDeco, this.node, needsWrap),\n                              computeOuterDeco(outerDeco, this.node, needsWrap))\n    if (this.dom != oldDOM) {\n      oldDOM.pmViewDesc = null\n      this.dom.pmViewDesc = this\n    }\n    this.outerDeco = outerDeco\n  }\n\n  // Mark this node as being the selected node.\n  selectNode() {\n    this.nodeDOM.classList.add(\"ProseMirror-selectednode\")\n    if (this.contentDOM || !this.node.type.spec.draggable) this.dom.draggable = true\n  }\n\n  // Remove selected node marking from this node.\n  deselectNode() {\n    this.nodeDOM.classList.remove(\"ProseMirror-selectednode\")\n    if (this.contentDOM || !this.node.type.spec.draggable) this.dom.removeAttribute(\"draggable\")\n  }\n\n  get domAtom() { return this.node.isAtom }\n}\n\n// Create a view desc for the top-level document node, to be exported\n// and used by the view class.\nexport function docViewDesc(doc, outerDeco, innerDeco, dom, view) {\n  applyOuterDeco(dom, outerDeco, doc)\n  return new NodeViewDesc(null, doc, outerDeco, innerDeco, dom, dom, dom, view, 0)\n}\n\nclass TextViewDesc extends NodeViewDesc {\n  constructor(parent, node, outerDeco, innerDeco, dom, nodeDOM, view) {\n    super(parent, node, outerDeco, innerDeco, dom, null, nodeDOM, view)\n  }\n\n  parseRule() {\n    let skip = this.nodeDOM.parentNode\n    while (skip && skip != this.dom && !skip.pmIsDeco) skip = skip.parentNode\n    return {skip: skip || true}\n  }\n\n  update(node, outerDeco, _, view) {\n    if (this.dirty == NODE_DIRTY || (this.dirty != NOT_DIRTY && !this.inParent()) ||\n        !node.sameMarkup(this.node)) return false\n    this.updateOuterDeco(outerDeco)\n    if ((this.dirty != NOT_DIRTY || node.text != this.node.text) && node.text != this.nodeDOM.nodeValue) {\n      this.nodeDOM.nodeValue = node.text\n      if (view.trackWrites == this.nodeDOM) view.trackWrites = null\n    }\n    this.node = node\n    this.dirty = NOT_DIRTY\n    return true\n  }\n\n  inParent() {\n    let parentDOM = this.parent.contentDOM\n    for (let n = this.nodeDOM; n; n = n.parentNode) if (n == parentDOM) return true\n    return false\n  }\n\n  domFromPos(pos) {\n    return {node: this.nodeDOM, offset: pos}\n  }\n\n  localPosFromDOM(dom, offset, bias) {\n    if (dom == this.nodeDOM) return this.posAtStart + Math.min(offset, this.node.text.length)\n    return super.localPosFromDOM(dom, offset, bias)\n  }\n\n  ignoreMutation(mutation) {\n    return mutation.type != \"characterData\" && mutation.type != \"selection\"\n  }\n\n  slice(from, to, view) {\n    let node = this.node.cut(from, to), dom = document.createTextNode(node.text)\n    return new TextViewDesc(this.parent, node, this.outerDeco, this.innerDeco, dom, dom, view)\n  }\n\n  markDirty(from, to) {\n    super.markDirty(from, to)\n    if (this.dom != this.nodeDOM && (from == 0 || to == this.nodeDOM.nodeValue.length))\n      this.dirty = NODE_DIRTY\n  }\n\n  get domAtom() { return false }\n}\n\n// A dummy desc used to tag trailing BR or IMG nodes created to work\n// around contentEditable terribleness.\nclass TrailingHackViewDesc extends ViewDesc {\n  parseRule() { return {ignore: true} }\n  matchesHack(nodeName) { return this.dirty == NOT_DIRTY && this.dom.nodeName == nodeName }\n  get domAtom() { return true }\n  get ignoreForCoords() { return this.dom.nodeName == \"IMG\" }\n}\n\n// A separate subclass is used for customized node views, so that the\n// extra checks only have to be made for nodes that are actually\n// customized.\nclass CustomNodeViewDesc extends NodeViewDesc {\n  // : (?ViewDesc, Node, [Decoration], DecorationSource, dom.Node, ?dom.Node, NodeView, EditorView)\n  constructor(parent, node, outerDeco, innerDeco, dom, contentDOM, nodeDOM, spec, view, pos) {\n    super(parent, node, outerDeco, innerDeco, dom, contentDOM, nodeDOM, view, pos)\n    this.spec = spec\n  }\n\n  // A custom `update` method gets to decide whether the update goes\n  // through. If it does, and there's a `contentDOM` node, our logic\n  // updates the children.\n  update(node, outerDeco, innerDeco, view) {\n    if (this.dirty == NODE_DIRTY) return false\n    if (this.spec.update) {\n      let result = this.spec.update(node, outerDeco, innerDeco)\n      if (result) this.updateInner(node, outerDeco, innerDeco, view)\n      return result\n    } else if (!this.contentDOM && !node.isLeaf) {\n      return false\n    } else {\n      return super.update(node, outerDeco, innerDeco, view)\n    }\n  }\n\n  selectNode() {\n    this.spec.selectNode ? this.spec.selectNode() : super.selectNode()\n  }\n\n  deselectNode() {\n    this.spec.deselectNode ? this.spec.deselectNode() : super.deselectNode()\n  }\n\n  setSelection(anchor, head, root, force) {\n    this.spec.setSelection ? this.spec.setSelection(anchor, head, root)\n      : super.setSelection(anchor, head, root, force)\n  }\n\n  destroy() {\n    if (this.spec.destroy) this.spec.destroy()\n    super.destroy()\n  }\n\n  stopEvent(event) {\n    return this.spec.stopEvent ? this.spec.stopEvent(event) : false\n  }\n\n  ignoreMutation(mutation) {\n    return this.spec.ignoreMutation ? this.spec.ignoreMutation(mutation) : super.ignoreMutation(mutation)\n  }\n}\n\n// : (dom.Node, [ViewDesc])\n// Sync the content of the given DOM node with the nodes associated\n// with the given array of view descs, recursing into mark descs\n// because this should sync the subtree for a whole node at a time.\nfunction renderDescs(parentDOM, descs, view) {\n  let dom = parentDOM.firstChild, written = false\n  for (let i = 0; i < descs.length; i++) {\n    let desc = descs[i], childDOM = desc.dom\n    if (childDOM.parentNode == parentDOM) {\n      while (childDOM != dom) { dom = rm(dom); written = true }\n      dom = dom.nextSibling\n    } else {\n      written = true\n      parentDOM.insertBefore(childDOM, dom)\n    }\n    if (desc instanceof MarkViewDesc) {\n      let pos = dom ? dom.previousSibling : parentDOM.lastChild\n      renderDescs(desc.contentDOM, desc.children, view)\n      dom = pos ? pos.nextSibling : parentDOM.firstChild\n    }\n  }\n  while (dom) { dom = rm(dom); written = true }\n  if (written && view.trackWrites == parentDOM) view.trackWrites = null\n}\n\nfunction OuterDecoLevel(nodeName) {\n  if (nodeName) this.nodeName = nodeName\n}\nOuterDecoLevel.prototype = Object.create(null)\n\nconst noDeco = [new OuterDecoLevel]\n\nfunction computeOuterDeco(outerDeco, node, needsWrap) {\n  if (outerDeco.length == 0) return noDeco\n\n  let top = needsWrap ? noDeco[0] : new OuterDecoLevel, result = [top]\n\n  for (let i = 0; i < outerDeco.length; i++) {\n    let attrs = outerDeco[i].type.attrs\n    if (!attrs) continue\n    if (attrs.nodeName)\n      result.push(top = new OuterDecoLevel(attrs.nodeName))\n\n    for (let name in attrs) {\n      let val = attrs[name]\n      if (val == null) continue\n      if (needsWrap && result.length == 1)\n        result.push(top = new OuterDecoLevel(node.isInline ? \"span\" : \"div\"))\n      if (name == \"class\") top.class = (top.class ? top.class + \" \" : \"\") + val\n      else if (name == \"style\") top.style = (top.style ? top.style + \";\" : \"\") + val\n      else if (name != \"nodeName\") top[name] = val\n    }\n  }\n\n  return result\n}\n\nfunction patchOuterDeco(outerDOM, nodeDOM, prevComputed, curComputed) {\n  // Shortcut for trivial case\n  if (prevComputed == noDeco && curComputed == noDeco) return nodeDOM\n\n  let curDOM = nodeDOM\n  for (let i = 0; i < curComputed.length; i++) {\n    let deco = curComputed[i], prev = prevComputed[i]\n    if (i) {\n      let parent\n      if (prev && prev.nodeName == deco.nodeName && curDOM != outerDOM &&\n          (parent = curDOM.parentNode) && parent.tagName.toLowerCase() == deco.nodeName) {\n        curDOM = parent\n      } else {\n        parent = document.createElement(deco.nodeName)\n        parent.pmIsDeco = true\n        parent.appendChild(curDOM)\n        prev = noDeco[0]\n        curDOM = parent\n      }\n    }\n    patchAttributes(curDOM, prev || noDeco[0], deco)\n  }\n  return curDOM\n}\n\nfunction patchAttributes(dom, prev, cur) {\n  for (let name in prev)\n    if (name != \"class\" && name != \"style\" && name != \"nodeName\" && !(name in cur))\n      dom.removeAttribute(name)\n  for (let name in cur)\n    if (name != \"class\" && name != \"style\" && name != \"nodeName\" && cur[name] != prev[name])\n      dom.setAttribute(name, cur[name])\n  if (prev.class != cur.class) {\n    let prevList = prev.class ? prev.class.split(\" \").filter(Boolean) : nothing\n    let curList = cur.class ? cur.class.split(\" \").filter(Boolean) : nothing\n    for (let i = 0; i < prevList.length; i++) if (curList.indexOf(prevList[i]) == -1)\n      dom.classList.remove(prevList[i])\n    for (let i = 0; i < curList.length; i++) if (prevList.indexOf(curList[i]) == -1)\n      dom.classList.add(curList[i])\n    if (dom.classList.length == 0)\n      dom.removeAttribute(\"class\")\n  }\n  if (prev.style != cur.style) {\n    if (prev.style) {\n      let prop = /\\s*([\\w\\-\\xa1-\\uffff]+)\\s*:(?:\"(?:\\\\.|[^\"])*\"|'(?:\\\\.|[^'])*'|\\(.*?\\)|[^;])*/g, m\n      while (m = prop.exec(prev.style))\n        dom.style.removeProperty(m[1])\n    }\n    if (cur.style)\n      dom.style.cssText += cur.style\n  }\n}\n\nfunction applyOuterDeco(dom, deco, node) {\n  return patchOuterDeco(dom, dom, noDeco, computeOuterDeco(deco, node, dom.nodeType != 1))\n}\n\n// : ([Decoration], [Decoration]) \u2192 bool\nfunction sameOuterDeco(a, b) {\n  if (a.length != b.length) return false\n  for (let i = 0; i < a.length; i++) if (!a[i].type.eq(b[i].type)) return false\n  return true\n}\n\n// Remove a DOM node and return its next sibling.\nfunction rm(dom) {\n  let next = dom.nextSibling\n  dom.parentNode.removeChild(dom)\n  return next\n}\n\n// Helper class for incrementally updating a tree of mark descs and\n// the widget and node descs inside of them.\nclass ViewTreeUpdater {\n  // : (NodeViewDesc)\n  constructor(top, lockedNode) {\n    this.top = top\n    this.lock = lockedNode\n    // Index into `this.top`'s child array, represents the current\n    // update position.\n    this.index = 0\n    // When entering a mark, the current top and index are pushed\n    // onto this.\n    this.stack = []\n    // Tracks whether anything was changed\n    this.changed = false\n\n    this.preMatch = preMatch(top.node.content, top)\n  }\n\n  // Destroy and remove the children between the given indices in\n  // `this.top`.\n  destroyBetween(start, end) {\n    if (start == end) return\n    for (let i = start; i < end; i++) this.top.children[i].destroy()\n    this.top.children.splice(start, end - start)\n    this.changed = true\n  }\n\n  // Destroy all remaining children in `this.top`.\n  destroyRest() {\n    this.destroyBetween(this.index, this.top.children.length)\n  }\n\n  // : ([Mark], EditorView)\n  // Sync the current stack of mark descs with the given array of\n  // marks, reusing existing mark descs when possible.\n  syncToMarks(marks, inline, view) {\n    let keep = 0, depth = this.stack.length >> 1\n    let maxKeep = Math.min(depth, marks.length)\n    while (keep < maxKeep &&\n           (keep == depth - 1 ? this.top : this.stack[(keep + 1) << 1]).matchesMark(marks[keep]) && marks[keep].type.spec.spanning !== false)\n      keep++\n\n    while (keep < depth) {\n      this.destroyRest()\n      this.top.dirty = NOT_DIRTY\n      this.index = this.stack.pop()\n      this.top = this.stack.pop()\n      depth--\n    }\n    while (depth < marks.length) {\n      this.stack.push(this.top, this.index + 1)\n      let found = -1\n      for (let i = this.index; i < Math.min(this.index + 3, this.top.children.length); i++) {\n        if (this.top.children[i].matchesMark(marks[depth])) { found = i; break }\n      }\n      if (found > -1) {\n        if (found > this.index) {\n          this.changed = true\n          this.destroyBetween(this.index, found)\n        }\n        this.top = this.top.children[this.index]\n      } else {\n        let markDesc = MarkViewDesc.create(this.top, marks[depth], inline, view)\n        this.top.children.splice(this.index, 0, markDesc)\n        this.top = markDesc\n        this.changed = true\n      }\n      this.index = 0\n      depth++\n    }\n  }\n\n  // : (Node, [Decoration], DecorationSource) \u2192 bool\n  // Try to find a node desc matching the given data. Skip over it and\n  // return true when successful.\n  findNodeMatch(node, outerDeco, innerDeco, index) {\n    let found = -1, targetDesc\n    if (index >= this.preMatch.index &&\n        (targetDesc = this.preMatch.matches[index - this.preMatch.index]).parent == this.top &&\n        targetDesc.matchesNode(node, outerDeco, innerDeco)) {\n      found = this.top.children.indexOf(targetDesc, this.index)\n    } else {\n      for (let i = this.index, e = Math.min(this.top.children.length, i + 5); i < e; i++) {\n        let child = this.top.children[i]\n        if (child.matchesNode(node, outerDeco, innerDeco) && !this.preMatch.matched.has(child)) {\n          found = i\n          break\n        }\n      }\n    }\n    if (found < 0) return false\n    this.destroyBetween(this.index, found)\n    this.index++\n    return true\n  }\n\n  updateNodeAt(node, outerDeco, innerDeco, index, view) {\n    let child = this.top.children[index]\n    if (!child.update(node, outerDeco, innerDeco, view)) return false\n    this.destroyBetween(this.index, index)\n    this.index = index + 1\n    return true\n  }\n\n  findIndexWithChild(domNode) {\n    for (;;) {\n      let parent = domNode.parentNode\n      if (!parent) return -1\n      if (parent == this.top.contentDOM) {\n        let desc = domNode.pmViewDesc\n        if (desc) for (let i = this.index; i < this.top.children.length; i++) {\n          if (this.top.children[i] == desc) return i\n        }\n        return -1\n      }\n      domNode = parent\n    }\n  }\n\n  // : (Node, [Decoration], DecorationSource, EditorView, Fragment, number) \u2192 bool\n  // Try to update the next node, if any, to the given data. Checks\n  // pre-matches to avoid overwriting nodes that could still be used.\n  updateNextNode(node, outerDeco, innerDeco, view, index) {\n    for (let i = this.index; i < this.top.children.length; i++) {\n      let next = this.top.children[i]\n      if (next instanceof NodeViewDesc) {\n        let preMatch = this.preMatch.matched.get(next)\n        if (preMatch != null && preMatch != index) return false\n        let nextDOM = next.dom\n\n        // Can't update if nextDOM is or contains this.lock, except if\n        // it's a text node whose content already matches the new text\n        // and whose decorations match the new ones.\n        let locked = this.lock && (nextDOM == this.lock || nextDOM.nodeType == 1 && nextDOM.contains(this.lock.parentNode)) &&\n            !(node.isText && next.node && next.node.isText && next.nodeDOM.nodeValue == node.text &&\n              next.dirty != NODE_DIRTY && sameOuterDeco(outerDeco, next.outerDeco))\n        if (!locked && next.update(node, outerDeco, innerDeco, view)) {\n          this.destroyBetween(this.index, i)\n          if (next.dom != nextDOM) this.changed = true\n          this.index++\n          return true\n        }\n        break\n      }\n    }\n    return false\n  }\n\n  // : (Node, [Decoration], DecorationSource, EditorView)\n  // Insert the node as a newly created node desc.\n  addNode(node, outerDeco, innerDeco, view, pos) {\n    this.top.children.splice(this.index++, 0, NodeViewDesc.create(this.top, node, outerDeco, innerDeco, view, pos))\n    this.changed = true\n  }\n\n  placeWidget(widget, view, pos) {\n    let next = this.index < this.top.children.length ? this.top.children[this.index] : null\n    if (next && next.matchesWidget(widget) && (widget == next.widget || !next.widget.type.toDOM.parentNode)) {\n      this.index++\n    } else {\n      let desc = new WidgetViewDesc(this.top, widget, view, pos)\n      this.top.children.splice(this.index++, 0, desc)\n      this.changed = true\n    }\n  }\n\n  // Make sure a textblock looks and behaves correctly in\n  // contentEditable.\n  addTextblockHacks() {\n    let lastChild = this.top.children[this.index - 1]\n    while (lastChild instanceof MarkViewDesc) lastChild = lastChild.children[lastChild.children.length - 1]\n\n    if (!lastChild || // Empty textblock\n        !(lastChild instanceof TextViewDesc) ||\n        /\\n$/.test(lastChild.node.text)) {\n      // Avoid bugs in Safari's cursor drawing (#1165) and Chrome's mouse selection (#1152)\n      if ((browser.safari || browser.chrome) && lastChild && lastChild.dom.contentEditable == \"false\")\n        this.addHackNode(\"IMG\")\n      this.addHackNode(\"BR\")\n    }\n  }\n\n  addHackNode(nodeName) {\n    if (this.index < this.top.children.length && this.top.children[this.index].matchesHack(nodeName)) {\n      this.index++\n    } else {\n      let dom = document.createElement(nodeName)\n      if (nodeName == \"IMG\") dom.className = \"ProseMirror-separator\"\n      if (nodeName == \"BR\") dom.className = \"ProseMirror-trailingBreak\"\n      this.top.children.splice(this.index++, 0, new TrailingHackViewDesc(this.top, nothing, dom, null))\n      this.changed = true\n    }\n  }\n}\n\n// : (Fragment, [ViewDesc]) \u2192 {index: number, matched: Map<ViewDesc, number>, matches: ViewDesc[]}\n// Iterate from the end of the fragment and array of descs to find\n// directly matching ones, in order to avoid overeagerly reusing those\n// for other nodes. Returns the fragment index of the first node that\n// is part of the sequence of matched nodes at the end of the\n// fragment.\nfunction preMatch(frag, parentDesc) {\n  let curDesc = parentDesc, descI = curDesc.children.length\n  let fI = frag.childCount, matched = new Map, matches = []\n  outer: while (fI > 0) {\n    let desc\n    for (;;) {\n      if (descI) {\n        let next = curDesc.children[descI - 1]\n        if (next instanceof MarkViewDesc) {\n          curDesc = next\n          descI = next.children.length\n        } else {\n          desc = next\n          descI--\n          break\n        }\n      } else if (curDesc == parentDesc) {\n        break outer\n      } else {\n        // FIXME\n        descI = curDesc.parent.children.indexOf(curDesc)\n        curDesc = curDesc.parent\n      }\n    }\n    let node = desc.node\n    if (!node) continue\n    if (node != frag.child(fI - 1)) break\n    --fI\n    matched.set(desc, fI)\n    matches.push(desc)\n  }\n  return {index: fI, matched, matches: matches.reverse()}\n}\n\nfunction compareSide(a, b) { return a.type.side - b.type.side }\n\n// : (ViewDesc, DecorationSource, (Decoration, number), (Node, [Decoration], DecorationSource, number))\n// This function abstracts iterating over the nodes and decorations in\n// a fragment. Calls `onNode` for each node, with its local and child\n// decorations. Splits text nodes when there is a decoration starting\n// or ending inside of them. Calls `onWidget` for each widget.\nfunction iterDeco(parent, deco, onWidget, onNode) {\n  let locals = deco.locals(parent), offset = 0\n  // Simple, cheap variant for when there are no local decorations\n  if (locals.length == 0) {\n    for (let i = 0; i < parent.childCount; i++) {\n      let child = parent.child(i)\n      onNode(child, locals, deco.forChild(offset, child), i)\n      offset += child.nodeSize\n    }\n    return\n  }\n\n  let decoIndex = 0, active = [], restNode = null\n  for (let parentIndex = 0;;) {\n    if (decoIndex < locals.length && locals[decoIndex].to == offset) {\n      let widget = locals[decoIndex++], widgets\n      while (decoIndex < locals.length && locals[decoIndex].to == offset)\n        (widgets || (widgets = [widget])).push(locals[decoIndex++])\n      if (widgets) {\n        widgets.sort(compareSide)\n        for (let i = 0; i < widgets.length; i++) onWidget(widgets[i], parentIndex, !!restNode)\n      } else {\n        onWidget(widget, parentIndex, !!restNode)\n      }\n    }\n\n    let child, index\n    if (restNode) {\n      index = -1\n      child = restNode\n      restNode = null\n    } else if (parentIndex < parent.childCount) {\n      index = parentIndex\n      child = parent.child(parentIndex++)\n    } else {\n      break\n    }\n\n    for (let i = 0; i < active.length; i++) if (active[i].to <= offset) active.splice(i--, 1)\n    while (decoIndex < locals.length && locals[decoIndex].from <= offset && locals[decoIndex].to > offset)\n      active.push(locals[decoIndex++])\n\n    let end = offset + child.nodeSize\n    if (child.isText) {\n      let cutAt = end\n      if (decoIndex < locals.length && locals[decoIndex].from < cutAt) cutAt = locals[decoIndex].from\n      for (let i = 0; i < active.length; i++) if (active[i].to < cutAt) cutAt = active[i].to\n      if (cutAt < end) {\n        restNode = child.cut(cutAt - offset)\n        child = child.cut(0, cutAt - offset)\n        end = cutAt\n        index = -1\n      }\n    }\n\n    let outerDeco = !active.length ? nothing\n        : child.isInline && !child.isLeaf ? active.filter(d => !d.inline)\n        : active.slice()\n    onNode(child, outerDeco, deco.forChild(offset, child), index)\n    offset = end\n  }\n}\n\n// List markers in Mobile Safari will mysteriously disappear\n// sometimes. This works around that.\nfunction iosHacks(dom) {\n  if (dom.nodeName == \"UL\" || dom.nodeName == \"OL\") {\n    let oldCSS = dom.style.cssText\n    dom.style.cssText = oldCSS + \"; list-style: square !important\"\n    window.getComputedStyle(dom).listStyle\n    dom.style.cssText = oldCSS\n  }\n}\n\nfunction nearbyTextNode(node, offset) {\n  for (;;) {\n    if (node.nodeType == 3) return node\n    if (node.nodeType == 1 && offset > 0) {\n      if (node.childNodes.length > offset && node.childNodes[offset].nodeType == 3)\n        return node.childNodes[offset]\n      node = node.childNodes[offset - 1]\n      offset = nodeSize(node)\n    } else if (node.nodeType == 1 && offset < node.childNodes.length) {\n      node = node.childNodes[offset]\n      offset = 0\n    } else {\n      return null\n    }\n  }\n}\n\n// Find a piece of text in an inline fragment, overlapping from-to\nfunction findTextInFragment(frag, text, from, to) {\n  for (let i = 0, pos = 0; i < frag.childCount && pos <= to;) {\n    let child = frag.child(i++), childStart = pos\n    pos += child.nodeSize\n    if (!child.isText) continue\n    let str = child.text\n    while (i < frag.childCount) {\n      let next = frag.child(i++)\n      pos += next.nodeSize\n      if (!next.isText) break\n      str += next.text\n    }\n    if (pos >= from && childStart < to) {\n      let found = str.lastIndexOf(text, to - childStart - 1)\n      if (found >= 0 && found + text.length + childStart >= from)\n        return childStart + found\n    }\n  }\n  return -1\n}\n\n// Replace range from-to in an array of view descs with replacement\n// (may be null to just delete). This goes very much against the grain\n// of the rest of this code, which tends to create nodes with the\n// right shape in one go, rather than messing with them after\n// creation, but is necessary in the composition hack.\nfunction replaceNodes(nodes, from, to, view, replacement) {\n  let result = []\n  for (let i = 0, off = 0; i < nodes.length; i++) {\n    let child = nodes[i], start = off, end = off += child.size\n    if (start >= to || end <= from) {\n      result.push(child)\n    } else {\n      if (start < from) result.push(child.slice(0, from - start, view))\n      if (replacement) {\n        result.push(replacement)\n        replacement = null\n      }\n      if (end > to) result.push(child.slice(to - start, child.size, view))\n    }\n  }\n  return result\n}\n", "import {TextSelection, NodeSelection} from \"prosemirror-state\"\n\nimport browser from \"./browser\"\nimport {selectionCollapsed, isEquivalentPosition, domIndex, isOnEdge} from \"./dom\"\n\nexport function selectionFromDOM(view, origin) {\n  let domSel = view.root.getSelection(), doc = view.state.doc\n  if (!domSel.focusNode) return null\n  let nearestDesc = view.docView.nearestDesc(domSel.focusNode), inWidget = nearestDesc && nearestDesc.size == 0\n  let head = view.docView.posFromDOM(domSel.focusNode, domSel.focusOffset)\n  if (head < 0) return null\n  let $head = doc.resolve(head), $anchor, selection\n  if (selectionCollapsed(domSel)) {\n    $anchor = $head\n    while (nearestDesc && !nearestDesc.node) nearestDesc = nearestDesc.parent\n    if (nearestDesc && nearestDesc.node.isAtom && NodeSelection.isSelectable(nearestDesc.node) && nearestDesc.parent\n        && !(nearestDesc.node.isInline && isOnEdge(domSel.focusNode, domSel.focusOffset, nearestDesc.dom))) {\n      let pos = nearestDesc.posBefore\n      selection = new NodeSelection(head == pos ? $head : doc.resolve(pos))\n    }\n  } else {\n    let anchor = view.docView.posFromDOM(domSel.anchorNode, domSel.anchorOffset)\n    if (anchor < 0) return null\n    $anchor = doc.resolve(anchor)\n  }\n\n  if (!selection) {\n    let bias = origin == \"pointer\" || (view.state.selection.head < $head.pos && !inWidget) ? 1 : -1\n    selection = selectionBetween(view, $anchor, $head, bias)\n  }\n  return selection\n}\n\nfunction editorOwnsSelection(view) {\n  return view.editable ? view.hasFocus() :\n    hasSelection(view) && document.activeElement && document.activeElement.contains(view.dom)\n}\n\nexport function selectionToDOM(view, force) {\n  let sel = view.state.selection\n  syncNodeSelection(view, sel)\n\n  if (!editorOwnsSelection(view)) return\n\n  // The delayed drag selection causes issues with Cell Selections\n  // in Safari. And the drag selection delay is to workarond issues\n  // which only present in Chrome.\n  if (!force && view.mouseDown && view.mouseDown.allowDefault && browser.chrome) {\n    let domSel = view.root.getSelection(), curSel = view.domObserver.currentSelection\n    if (domSel.anchorNode && isEquivalentPosition(domSel.anchorNode, domSel.anchorOffset,\n                                                  curSel.anchorNode, curSel.anchorOffset)) {\n      view.mouseDown.delayedSelectionSync = true\n      view.domObserver.setCurSelection()\n      return\n    }\n  }\n\n  view.domObserver.disconnectSelection()\n\n  if (view.cursorWrapper) {\n    selectCursorWrapper(view)\n  } else {\n    let {anchor, head} = sel, resetEditableFrom, resetEditableTo\n    if (brokenSelectBetweenUneditable && !(sel instanceof TextSelection)) {\n      if (!sel.$from.parent.inlineContent)\n        resetEditableFrom = temporarilyEditableNear(view, sel.from)\n      if (!sel.empty && !sel.$from.parent.inlineContent)\n        resetEditableTo = temporarilyEditableNear(view, sel.to)\n    }\n    view.docView.setSelection(anchor, head, view.root, force)\n    if (brokenSelectBetweenUneditable) {\n      if (resetEditableFrom) resetEditable(resetEditableFrom)\n      if (resetEditableTo) resetEditable(resetEditableTo)\n    }\n    if (sel.visible) {\n      view.dom.classList.remove(\"ProseMirror-hideselection\")\n    } else {\n      view.dom.classList.add(\"ProseMirror-hideselection\")\n      if (\"onselectionchange\" in document) removeClassOnSelectionChange(view)\n    }\n  }\n\n  view.domObserver.setCurSelection()\n  view.domObserver.connectSelection()\n}\n\n// Kludge to work around Webkit not allowing a selection to start/end\n// between non-editable block nodes. We briefly make something\n// editable, set the selection, then set it uneditable again.\n\nconst brokenSelectBetweenUneditable = browser.safari || browser.chrome && browser.chrome_version < 63\n\nfunction temporarilyEditableNear(view, pos) {\n  let {node, offset} = view.docView.domFromPos(pos, 0)\n  let after = offset < node.childNodes.length ? node.childNodes[offset] : null\n  let before = offset ? node.childNodes[offset - 1] : null\n  if (browser.safari && after && after.contentEditable == \"false\") return setEditable(after)\n  if ((!after || after.contentEditable == \"false\") && (!before || before.contentEditable == \"false\")) {\n    if (after) return setEditable(after)\n    else if (before) return setEditable(before)\n  }\n}\n\nfunction setEditable(element) {\n  element.contentEditable = \"true\"\n  if (browser.safari && element.draggable) { element.draggable = false; element.wasDraggable = true }\n  return element\n}\n\nfunction resetEditable(element) {\n  element.contentEditable = \"false\"\n  if (element.wasDraggable) { element.draggable = true; element.wasDraggable = null }\n}\n\nfunction removeClassOnSelectionChange(view) {\n  let doc = view.dom.ownerDocument\n  doc.removeEventListener(\"selectionchange\", view.hideSelectionGuard)\n  let domSel = view.root.getSelection()\n  let node = domSel.anchorNode, offset = domSel.anchorOffset\n  doc.addEventListener(\"selectionchange\", view.hideSelectionGuard = () => {\n    if (domSel.anchorNode != node || domSel.anchorOffset != offset) {\n      doc.removeEventListener(\"selectionchange\", view.hideSelectionGuard)\n      setTimeout(() => {\n        if (!editorOwnsSelection(view) || view.state.selection.visible)\n          view.dom.classList.remove(\"ProseMirror-hideselection\")\n      }, 20)\n    }\n  })\n}\n\nfunction selectCursorWrapper(view) {\n  let domSel = view.root.getSelection(), range = document.createRange()\n  let node = view.cursorWrapper.dom, img = node.nodeName == \"IMG\"\n  if (img) range.setEnd(node.parentNode, domIndex(node) + 1)\n  else range.setEnd(node, 0)\n  range.collapse(false)\n  domSel.removeAllRanges()\n  domSel.addRange(range)\n  // Kludge to kill 'control selection' in IE11 when selecting an\n  // invisible cursor wrapper, since that would result in those weird\n  // resize handles and a selection that considers the absolutely\n  // positioned wrapper, rather than the root editable node, the\n  // focused element.\n  if (!img && !view.state.selection.visible && browser.ie && browser.ie_version <= 11) {\n    node.disabled = true\n    node.disabled = false\n  }\n}\n\nexport function syncNodeSelection(view, sel) {\n  if (sel instanceof NodeSelection) {\n    let desc = view.docView.descAt(sel.from)\n    if (desc != view.lastSelectedViewDesc) {\n      clearNodeSelection(view)\n      if (desc) desc.selectNode()\n      view.lastSelectedViewDesc = desc\n    }\n  } else {\n    clearNodeSelection(view)\n  }\n}\n\n// Clear all DOM statefulness of the last node selection.\nfunction clearNodeSelection(view) {\n  if (view.lastSelectedViewDesc) {\n    if (view.lastSelectedViewDesc.parent)\n      view.lastSelectedViewDesc.deselectNode()\n    view.lastSelectedViewDesc = null\n  }\n}\n\nexport function selectionBetween(view, $anchor, $head, bias) {\n  return view.someProp(\"createSelectionBetween\", f => f(view, $anchor, $head))\n    || TextSelection.between($anchor, $head, bias)\n}\n\nexport function hasFocusAndSelection(view) {\n  if (view.editable && view.root.activeElement != view.dom) return false\n  return hasSelection(view)\n}\n\nexport function hasSelection(view) {\n  let sel = view.root.getSelection()\n  if (!sel.anchorNode) return false\n  try {\n    // Firefox will raise 'permission denied' errors when accessing\n    // properties of `sel.anchorNode` when it's in a generated CSS\n    // element.\n    return view.dom.contains(sel.anchorNode.nodeType == 3 ? sel.anchorNode.parentNode : sel.anchorNode) &&\n      (view.editable || view.dom.contains(sel.focusNode.nodeType == 3 ? sel.focusNode.parentNode : sel.focusNode))\n  } catch(_) {\n    return false\n  }\n}\n\nexport function anchorInRightPlace(view) {\n  let anchorDOM = view.docView.domFromPos(view.state.selection.anchor, 0)\n  let domSel = view.root.getSelection()\n  return isEquivalentPosition(anchorDOM.node, anchorDOM.offset, domSel.anchorNode, domSel.anchorOffset)\n}\n", "import {Selection, NodeSelection, TextSelection, AllSelection} from \"prosemirror-state\"\nimport browser from \"./browser\"\nimport {domIndex, selectionCollapsed} from \"./dom\"\nimport {selectionToDOM} from \"./selection\"\n\nfunction moveSelectionBlock(state, dir) {\n  let {$anchor, $head} = state.selection\n  let $side = dir > 0 ? $anchor.max($head) : $anchor.min($head)\n  let $start = !$side.parent.inlineContent ? $side : $side.depth ? state.doc.resolve(dir > 0 ? $side.after() : $side.before()) : null\n  return $start && Selection.findFrom($start, dir)\n}\n\nfunction apply(view, sel) {\n  view.dispatch(view.state.tr.setSelection(sel).scrollIntoView())\n  return true\n}\n\nfunction selectHorizontally(view, dir, mods) {\n  let sel = view.state.selection\n  if (sel instanceof TextSelection) {\n    if (!sel.empty || mods.indexOf(\"s\") > -1) {\n      return false\n    } else if (view.endOfTextblock(dir > 0 ? \"right\" : \"left\")) {\n      let next = moveSelectionBlock(view.state, dir)\n      if (next && (next instanceof NodeSelection)) return apply(view, next)\n      return false\n    } else if (!(browser.mac && mods.indexOf(\"m\") > -1)) {\n      let $head = sel.$head, node = $head.textOffset ? null : dir < 0 ? $head.nodeBefore : $head.nodeAfter, desc\n      if (!node || node.isText) return false\n      let nodePos = dir < 0 ? $head.pos - node.nodeSize : $head.pos\n      if (!(node.isAtom || (desc = view.docView.descAt(nodePos)) && !desc.contentDOM)) return false\n      if (NodeSelection.isSelectable(node)) {\n        return apply(view, new NodeSelection(dir < 0 ? view.state.doc.resolve($head.pos - node.nodeSize) : $head))\n      } else if (browser.webkit) {\n        // Chrome and Safari will introduce extra pointless cursor\n        // positions around inline uneditable nodes, so we have to\n        // take over and move the cursor past them (#937)\n        return apply(view, new TextSelection(view.state.doc.resolve(dir < 0 ? nodePos : nodePos + node.nodeSize)))\n      } else {\n        return false\n      }\n    }\n  } else if (sel instanceof NodeSelection && sel.node.isInline) {\n    return apply(view, new TextSelection(dir > 0 ? sel.$to : sel.$from))\n  } else {\n    let next = moveSelectionBlock(view.state, dir)\n    if (next) return apply(view, next)\n    return false\n  }\n}\n\nfunction nodeLen(node) {\n  return node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length\n}\n\nfunction isIgnorable(dom) {\n  let desc = dom.pmViewDesc\n  return desc && desc.size == 0 && (dom.nextSibling || dom.nodeName != \"BR\")\n}\n\n// Make sure the cursor isn't directly after one or more ignored\n// nodes, which will confuse the browser's cursor motion logic.\nfunction skipIgnoredNodesLeft(view) {\n  let sel = view.root.getSelection()\n  let node = sel.focusNode, offset = sel.focusOffset\n  if (!node) return\n  let moveNode, moveOffset, force = false\n  // Gecko will do odd things when the selection is directly in front\n  // of a non-editable node, so in that case, move it into the next\n  // node if possible. Issue prosemirror/prosemirror#832.\n  if (browser.gecko && node.nodeType == 1 && offset < nodeLen(node) && isIgnorable(node.childNodes[offset])) force = true\n  for (;;) {\n    if (offset > 0) {\n      if (node.nodeType != 1) {\n        break\n      } else {\n        let before = node.childNodes[offset - 1]\n        if (isIgnorable(before)) {\n          moveNode = node\n          moveOffset = --offset\n        } else if (before.nodeType == 3) {\n          node = before\n          offset = node.nodeValue.length\n        } else break\n      }\n    } else if (isBlockNode(node)) {\n      break\n    } else {\n      let prev = node.previousSibling\n      while (prev && isIgnorable(prev)) {\n        moveNode = node.parentNode\n        moveOffset = domIndex(prev)\n        prev = prev.previousSibling\n      }\n      if (!prev) {\n        node = node.parentNode\n        if (node == view.dom) break\n        offset = 0\n      } else {\n        node = prev\n        offset = nodeLen(node)\n      }\n    }\n  }\n  if (force) setSelFocus(view, sel, node, offset)\n  else if (moveNode) setSelFocus(view, sel, moveNode, moveOffset)\n}\n\n// Make sure the cursor isn't directly before one or more ignored\n// nodes.\nfunction skipIgnoredNodesRight(view) {\n  let sel = view.root.getSelection()\n  let node = sel.focusNode, offset = sel.focusOffset\n  if (!node) return\n  let len = nodeLen(node)\n  let moveNode, moveOffset\n  for (;;) {\n    if (offset < len) {\n      if (node.nodeType != 1) break\n      let after = node.childNodes[offset]\n      if (isIgnorable(after)) {\n        moveNode = node\n        moveOffset = ++offset\n      }\n      else break\n    } else if (isBlockNode(node)) {\n      break\n    } else {\n      let next = node.nextSibling\n      while (next && isIgnorable(next)) {\n        moveNode = next.parentNode\n        moveOffset = domIndex(next) + 1\n        next = next.nextSibling\n      }\n      if (!next) {\n        node = node.parentNode\n        if (node == view.dom) break\n        offset = len = 0\n      } else {\n        node = next\n        offset = 0\n        len = nodeLen(node)\n      }\n    }\n  }\n  if (moveNode) setSelFocus(view, sel, moveNode, moveOffset)\n}\n\nfunction isBlockNode(dom) {\n  let desc = dom.pmViewDesc\n  return desc && desc.node && desc.node.isBlock\n}\n\nfunction setSelFocus(view, sel, node, offset) {\n  if (selectionCollapsed(sel)) {\n    let range = document.createRange()\n    range.setEnd(node, offset)\n    range.setStart(node, offset)\n    sel.removeAllRanges()\n    sel.addRange(range)\n  } else if (sel.extend) {\n    sel.extend(node, offset)\n  }\n  view.domObserver.setCurSelection()\n  let {state} = view\n  // If no state update ends up happening, reset the selection.\n  setTimeout(() => {\n    if (view.state == state) selectionToDOM(view)\n  }, 50)\n}\n\n// : (EditorState, number)\n// Check whether vertical selection motion would involve node\n// selections. If so, apply it (if not, the result is left to the\n// browser)\nfunction selectVertically(view, dir, mods) {\n  let sel = view.state.selection\n  if (sel instanceof TextSelection && !sel.empty || mods.indexOf(\"s\") > -1) return false\n  if (browser.mac && mods.indexOf(\"m\") > -1) return false\n  let {$from, $to} = sel\n\n  if (!$from.parent.inlineContent || view.endOfTextblock(dir < 0 ? \"up\" : \"down\")) {\n    let next = moveSelectionBlock(view.state, dir)\n    if (next && (next instanceof NodeSelection))\n      return apply(view, next)\n  }\n  if (!$from.parent.inlineContent) {\n    let side = dir < 0 ? $from : $to\n    let beyond = sel instanceof AllSelection ? Selection.near(side, dir) : Selection.findFrom(side, dir)\n    return beyond ? apply(view, beyond) : false\n  }\n  return false\n}\n\nfunction stopNativeHorizontalDelete(view, dir) {\n  if (!(view.state.selection instanceof TextSelection)) return true\n  let {$head, $anchor, empty} = view.state.selection\n  if (!$head.sameParent($anchor)) return true\n  if (!empty) return false\n  if (view.endOfTextblock(dir > 0 ? \"forward\" : \"backward\")) return true\n  let nextNode = !$head.textOffset && (dir < 0 ? $head.nodeBefore : $head.nodeAfter)\n  if (nextNode && !nextNode.isText) {\n    let tr = view.state.tr\n    if (dir < 0) tr.delete($head.pos - nextNode.nodeSize, $head.pos)\n    else tr.delete($head.pos, $head.pos + nextNode.nodeSize)\n    view.dispatch(tr)\n    return true\n  }\n  return false\n}\n\nfunction switchEditable(view, node, state) {\n  view.domObserver.stop()\n  node.contentEditable = state\n  view.domObserver.start()\n}\n\n// Issue #867 / #1090 / https://bugs.chromium.org/p/chromium/issues/detail?id=903821\n// In which Safari (and at some point in the past, Chrome) does really\n// wrong things when the down arrow is pressed when the cursor is\n// directly at the start of a textblock and has an uneditable node\n// after it\nfunction safariDownArrowBug(view) {\n  if (!browser.safari || view.state.selection.$head.parentOffset > 0) return\n  let {focusNode, focusOffset} = view.root.getSelection()\n  if (focusNode && focusNode.nodeType == 1 && focusOffset == 0 &&\n      focusNode.firstChild && focusNode.firstChild.contentEditable == \"false\") {\n    let child = focusNode.firstChild\n    switchEditable(view, child, true)\n    setTimeout(() => switchEditable(view, child, false), 20)\n  }\n}\n\n// A backdrop key mapping used to make sure we always suppress keys\n// that have a dangerous default effect, even if the commands they are\n// bound to return false, and to make sure that cursor-motion keys\n// find a cursor (as opposed to a node selection) when pressed. For\n// cursor-motion keys, the code in the handlers also takes care of\n// block selections.\n\nfunction getMods(event) {\n  let result = \"\"\n  if (event.ctrlKey) result += \"c\"\n  if (event.metaKey) result += \"m\"\n  if (event.altKey) result += \"a\"\n  if (event.shiftKey) result += \"s\"\n  return result\n}\n\nexport function captureKeyDown(view, event) {\n  let code = event.keyCode, mods = getMods(event)\n  if (code == 8 || (browser.mac && code == 72 && mods == \"c\")) { // Backspace, Ctrl-h on Mac\n    return stopNativeHorizontalDelete(view, -1) || skipIgnoredNodesLeft(view)\n  } else if (code == 46 || (browser.mac && code == 68 && mods == \"c\")) { // Delete, Ctrl-d on Mac\n    return stopNativeHorizontalDelete(view, 1) || skipIgnoredNodesRight(view)\n  } else if (code == 13 || code == 27) { // Enter, Esc\n    return true\n  } else if (code == 37) { // Left arrow\n    return selectHorizontally(view, -1, mods) || skipIgnoredNodesLeft(view)\n  } else if (code == 39) { // Right arrow\n    return selectHorizontally(view, 1, mods) || skipIgnoredNodesRight(view)\n  } else if (code == 38) { // Up arrow\n    return selectVertically(view, -1, mods) || skipIgnoredNodesLeft(view)\n  } else if (code == 40) { // Down arrow\n    return safariDownArrowBug(view) || selectVertically(view, 1, mods) || skipIgnoredNodesRight(view)\n  } else if (mods == (browser.mac ? \"m\" : \"c\") &&\n             (code == 66 || code == 73 || code == 89 || code == 90)) { // Mod-[biyz]\n    return true\n  }\n  return false\n}\n", "import {Fragment, DOMParser} from \"prosemirror-model\"\nimport {Selection, TextSelection} from \"prosemirror-state\"\n\nimport {selectionBetween, selectionFromDOM, selectionToDOM} from \"./selection\"\nimport {selectionCollapsed, keyEvent} from \"./dom\"\nimport browser from \"./browser\"\n\n// Note that all referencing and parsing is done with the\n// start-of-operation selection and document, since that's the one\n// that the DOM represents. If any changes came in in the meantime,\n// the modification is mapped over those before it is applied, in\n// readDOMChange.\n\nfunction parseBetween(view, from_, to_) {\n  let {node: parent, fromOffset, toOffset, from, to} = view.docView.parseRange(from_, to_)\n\n  let domSel = view.root.getSelection(), find = null, anchor = domSel.anchorNode\n  if (anchor && view.dom.contains(anchor.nodeType == 1 ? anchor : anchor.parentNode)) {\n    find = [{node: anchor, offset: domSel.anchorOffset}]\n    if (!selectionCollapsed(domSel))\n      find.push({node: domSel.focusNode, offset: domSel.focusOffset})\n  }\n  // Work around issue in Chrome where backspacing sometimes replaces\n  // the deleted content with a random BR node (issues #799, #831)\n  if (browser.chrome && view.lastKeyCode === 8) {\n    for (let off = toOffset; off > fromOffset; off--) {\n      let node = parent.childNodes[off - 1], desc = node.pmViewDesc\n      if (node.nodeName == \"BR\" && !desc) { toOffset = off; break }\n      if (!desc || desc.size) break\n    }\n  }\n  let startDoc = view.state.doc\n  let parser = view.someProp(\"domParser\") || DOMParser.fromSchema(view.state.schema)\n  let $from = startDoc.resolve(from)\n\n  let sel = null, doc = parser.parse(parent, {\n    topNode: $from.parent,\n    topMatch: $from.parent.contentMatchAt($from.index()),\n    topOpen: true,\n    from: fromOffset,\n    to: toOffset,\n    preserveWhitespace: $from.parent.type.whitespace == \"pre\" ? \"full\" : true,\n    editableContent: true,\n    findPositions: find,\n    ruleFromNode,\n    context: $from\n  })\n  if (find && find[0].pos != null) {\n    let anchor = find[0].pos, head = find[1] && find[1].pos\n    if (head == null) head = anchor\n    sel = {anchor: anchor + from, head: head + from}\n  }\n  return {doc, sel, from, to}\n}\n\nfunction ruleFromNode(dom) {\n  let desc = dom.pmViewDesc\n  if (desc) {\n    return desc.parseRule()\n  } else if (dom.nodeName == \"BR\" && dom.parentNode) {\n    // Safari replaces the list item or table cell with a BR\n    // directly in the list node (?!) if you delete the last\n    // character in a list item or table cell (#708, #862)\n    if (browser.safari && /^(ul|ol)$/i.test(dom.parentNode.nodeName)) {\n      let skip = document.createElement(\"div\")\n      skip.appendChild(document.createElement(\"li\"))\n      return {skip}\n    } else if (dom.parentNode.lastChild == dom || browser.safari && /^(tr|table)$/i.test(dom.parentNode.nodeName)) {\n      return {ignore: true}\n    }\n  } else if (dom.nodeName == \"IMG\" && dom.getAttribute(\"mark-placeholder\")) {\n    return {ignore: true}\n  }\n}\n\nexport function readDOMChange(view, from, to, typeOver, addedNodes) {\n  if (from < 0) {\n    let origin = view.lastSelectionTime > Date.now() - 50 ? view.lastSelectionOrigin : null\n    let newSel = selectionFromDOM(view, origin)\n    if (newSel && !view.state.selection.eq(newSel)) {\n      let tr = view.state.tr.setSelection(newSel)\n      if (origin == \"pointer\") tr.setMeta(\"pointer\", true)\n      else if (origin == \"key\") tr.scrollIntoView()\n      view.dispatch(tr)\n    }\n    return\n  }\n\n  let $before = view.state.doc.resolve(from)\n  let shared = $before.sharedDepth(to)\n  from = $before.before(shared + 1)\n  to = view.state.doc.resolve(to).after(shared + 1)\n\n  let sel = view.state.selection\n  let parse = parseBetween(view, from, to)\n  // Chrome sometimes leaves the cursor before the inserted text when\n  // composing after a cursor wrapper. This moves it forward.\n  if (browser.chrome && view.cursorWrapper && parse.sel && parse.sel.anchor == view.cursorWrapper.deco.from) {\n    let text = view.cursorWrapper.deco.type.toDOM.nextSibling\n    let size = text && text.nodeValue ? text.nodeValue.length : 1\n    parse.sel = {anchor: parse.sel.anchor + size, head: parse.sel.anchor + size}\n  }\n\n  let doc = view.state.doc, compare = doc.slice(parse.from, parse.to)\n  let preferredPos, preferredSide\n  // Prefer anchoring to end when Backspace is pressed\n  if (view.lastKeyCode === 8 && Date.now() - 100 < view.lastKeyCodeTime) {\n    preferredPos = view.state.selection.to\n    preferredSide = \"end\"\n  } else {\n    preferredPos = view.state.selection.from\n    preferredSide = \"start\"\n  }\n  view.lastKeyCode = null\n\n  let change = findDiff(compare.content, parse.doc.content, parse.from, preferredPos, preferredSide)\n  if (!change) {\n    if (typeOver && sel instanceof TextSelection && !sel.empty && sel.$head.sameParent(sel.$anchor) &&\n        !view.composing && !(parse.sel && parse.sel.anchor != parse.sel.head)) {\n      change = {start: sel.from, endA: sel.to, endB: sel.to}\n    } else if ((browser.ios && view.lastIOSEnter > Date.now() - 225 || browser.android) &&\n               addedNodes.some(n => n.nodeName == \"DIV\" || n.nodeName == \"P\") &&\n               view.someProp(\"handleKeyDown\", f => f(view, keyEvent(13, \"Enter\")))) {\n      view.lastIOSEnter = 0\n      return\n    } else {\n      if (parse.sel) {\n        let sel = resolveSelection(view, view.state.doc, parse.sel)\n        if (sel && !sel.eq(view.state.selection)) view.dispatch(view.state.tr.setSelection(sel))\n      }\n      return\n    }\n  }\n  view.domChangeCount++\n  // Handle the case where overwriting a selection by typing matches\n  // the start or end of the selected content, creating a change\n  // that's smaller than what was actually overwritten.\n  if (view.state.selection.from < view.state.selection.to &&\n      change.start == change.endB &&\n      view.state.selection instanceof TextSelection) {\n    if (change.start > view.state.selection.from && change.start <= view.state.selection.from + 2) {\n      change.start = view.state.selection.from\n    } else if (change.endA < view.state.selection.to && change.endA >= view.state.selection.to - 2) {\n      change.endB += (view.state.selection.to - change.endA)\n      change.endA = view.state.selection.to\n    }\n  }\n\n  // IE11 will insert a non-breaking space _ahead_ of the space after\n  // the cursor space when adding a space before another space. When\n  // that happened, adjust the change to cover the space instead.\n  if (browser.ie && browser.ie_version <= 11 && change.endB == change.start + 1 &&\n      change.endA == change.start && change.start > parse.from &&\n      parse.doc.textBetween(change.start - parse.from - 1, change.start - parse.from + 1) == \" \\u00a0\") {\n    change.start--\n    change.endA--\n    change.endB--\n  }\n\n  let $from = parse.doc.resolveNoCache(change.start - parse.from)\n  let $to = parse.doc.resolveNoCache(change.endB - parse.from)\n  let inlineChange = $from.sameParent($to) && $from.parent.inlineContent\n  let nextSel\n  // If this looks like the effect of pressing Enter (or was recorded\n  // as being an iOS enter press), just dispatch an Enter key instead.\n  if (((browser.ios && view.lastIOSEnter > Date.now() - 225 &&\n        (!inlineChange || addedNodes.some(n => n.nodeName == \"DIV\" || n.nodeName == \"P\"))) ||\n       (!inlineChange && $from.pos < parse.doc.content.size &&\n        (nextSel = Selection.findFrom(parse.doc.resolve($from.pos + 1), 1, true)) &&\n        nextSel.head == $to.pos)) &&\n      view.someProp(\"handleKeyDown\", f => f(view, keyEvent(13, \"Enter\")))) {\n    view.lastIOSEnter = 0\n    return\n  }\n  // Same for backspace\n  if (view.state.selection.anchor > change.start &&\n      looksLikeJoin(doc, change.start, change.endA, $from, $to) &&\n      view.someProp(\"handleKeyDown\", f => f(view, keyEvent(8, \"Backspace\")))) {\n    if (browser.android && browser.chrome) view.domObserver.suppressSelectionUpdates() // #820\n    return\n  }\n\n  // Chrome Android will occasionally, during composition, delete the\n  // entire composition and then immediately insert it again. This is\n  // used to detect that situation.\n  if (browser.chrome && browser.android && change.toB == change.from)\n    view.lastAndroidDelete = Date.now()\n\n  // This tries to detect Android virtual keyboard\n  // enter-and-pick-suggestion action. That sometimes (see issue\n  // #1059) first fires a DOM mutation, before moving the selection to\n  // the newly created block. And then, because ProseMirror cleans up\n  // the DOM selection, it gives up moving the selection entirely,\n  // leaving the cursor in the wrong place. When that happens, we drop\n  // the new paragraph from the initial change, and fire a simulated\n  // enter key afterwards.\n  if (browser.android && !inlineChange && $from.start() != $to.start() && $to.parentOffset == 0 && $from.depth == $to.depth &&\n      parse.sel && parse.sel.anchor == parse.sel.head && parse.sel.head == change.endA) {\n    change.endB -= 2\n    $to = parse.doc.resolveNoCache(change.endB - parse.from)\n    setTimeout(() => {\n      view.someProp(\"handleKeyDown\", function (f) { return f(view, keyEvent(13, \"Enter\")); })\n    }, 20)\n  }\n\n  let chFrom = change.start, chTo = change.endA\n\n  let tr, storedMarks, markChange, $from1\n  if (inlineChange) {\n    if ($from.pos == $to.pos) { // Deletion\n      // IE11 sometimes weirdly moves the DOM selection around after\n      // backspacing out the first element in a textblock\n      if (browser.ie && browser.ie_version <= 11 && $from.parentOffset == 0) {\n        view.domObserver.suppressSelectionUpdates()\n        setTimeout(() => selectionToDOM(view), 20)\n      }\n      tr = view.state.tr.delete(chFrom, chTo)\n      storedMarks = doc.resolve(change.start).marksAcross(doc.resolve(change.endA))\n    } else if ( // Adding or removing a mark\n      change.endA == change.endB && ($from1 = doc.resolve(change.start)) &&\n      (markChange = isMarkChange($from.parent.content.cut($from.parentOffset, $to.parentOffset),\n                                 $from1.parent.content.cut($from1.parentOffset, change.endA - $from1.start())))\n    ) {\n      tr = view.state.tr\n      if (markChange.type == \"add\") tr.addMark(chFrom, chTo, markChange.mark)\n      else tr.removeMark(chFrom, chTo, markChange.mark)\n    } else if ($from.parent.child($from.index()).isText && $from.index() == $to.index() - ($to.textOffset ? 0 : 1)) {\n      // Both positions in the same text node -- simply insert text\n      let text = $from.parent.textBetween($from.parentOffset, $to.parentOffset)\n      if (view.someProp(\"handleTextInput\", f => f(view, chFrom, chTo, text))) return\n      tr = view.state.tr.insertText(text, chFrom, chTo)\n    }\n  }\n\n  if (!tr)\n    tr = view.state.tr.replace(chFrom, chTo, parse.doc.slice(change.start - parse.from, change.endB - parse.from))\n  if (parse.sel) {\n    let sel = resolveSelection(view, tr.doc, parse.sel)\n    // Chrome Android will sometimes, during composition, report the\n    // selection in the wrong place. If it looks like that is\n    // happening, don't update the selection.\n    // Edge just doesn't move the cursor forward when you start typing\n    // in an empty block or between br nodes.\n    if (sel && !(browser.chrome && browser.android && view.composing && sel.empty &&\n                 (change.start != change.endB || view.lastAndroidDelete < Date.now() - 100) &&\n                 (sel.head == chFrom || sel.head == tr.mapping.map(chTo) - 1) ||\n                 browser.ie && sel.empty && sel.head == chFrom))\n      tr.setSelection(sel)\n  }\n  if (storedMarks) tr.ensureMarks(storedMarks)\n  view.dispatch(tr.scrollIntoView())\n}\n\nfunction resolveSelection(view, doc, parsedSel) {\n  if (Math.max(parsedSel.anchor, parsedSel.head) > doc.content.size) return null\n  return selectionBetween(view, doc.resolve(parsedSel.anchor), doc.resolve(parsedSel.head))\n}\n\n// : (Fragment, Fragment) \u2192 ?{mark: Mark, type: string}\n// Given two same-length, non-empty fragments of inline content,\n// determine whether the first could be created from the second by\n// removing or adding a single mark type.\nfunction isMarkChange(cur, prev) {\n  let curMarks = cur.firstChild.marks, prevMarks = prev.firstChild.marks\n  let added = curMarks, removed = prevMarks, type, mark, update\n  for (let i = 0; i < prevMarks.length; i++) added = prevMarks[i].removeFromSet(added)\n  for (let i = 0; i < curMarks.length; i++) removed = curMarks[i].removeFromSet(removed)\n  if (added.length == 1 && removed.length == 0) {\n    mark = added[0]\n    type = \"add\"\n    update = node => node.mark(mark.addToSet(node.marks))\n  } else if (added.length == 0 && removed.length == 1) {\n    mark = removed[0]\n    type = \"remove\"\n    update = node => node.mark(mark.removeFromSet(node.marks))\n  } else {\n    return null\n  }\n  let updated = []\n  for (let i = 0; i < prev.childCount; i++) updated.push(update(prev.child(i)))\n  if (Fragment.from(updated).eq(cur)) return {mark, type}\n}\n\nfunction looksLikeJoin(old, start, end, $newStart, $newEnd) {\n  if (!$newStart.parent.isTextblock ||\n      // The content must have shrunk\n      end - start <= $newEnd.pos - $newStart.pos ||\n      // newEnd must point directly at or after the end of the block that newStart points into\n      skipClosingAndOpening($newStart, true, false) < $newEnd.pos)\n    return false\n\n  let $start = old.resolve(start)\n  // Start must be at the end of a block\n  if ($start.parentOffset < $start.parent.content.size || !$start.parent.isTextblock)\n    return false\n  let $next = old.resolve(skipClosingAndOpening($start, true, true))\n  // The next textblock must start before end and end near it\n  if (!$next.parent.isTextblock || $next.pos > end ||\n      skipClosingAndOpening($next, true, false) < end)\n    return false\n\n  // The fragments after the join point must match\n  return $newStart.parent.content.cut($newStart.parentOffset).eq($next.parent.content)\n}\n\nfunction skipClosingAndOpening($pos, fromEnd, mayOpen) {\n  let depth = $pos.depth, end = fromEnd ? $pos.end() : $pos.pos\n  while (depth > 0 && (fromEnd || $pos.indexAfter(depth) == $pos.node(depth).childCount)) {\n    depth--\n    end++\n    fromEnd = false\n  }\n  if (mayOpen) {\n    let next = $pos.node(depth).maybeChild($pos.indexAfter(depth))\n    while (next && !next.isLeaf) {\n      next = next.firstChild\n      end++\n    }\n  }\n  return end\n}\n\nfunction findDiff(a, b, pos, preferredPos, preferredSide) {\n  let start = a.findDiffStart(b, pos)\n  if (start == null) return null\n  let {a: endA, b: endB} = a.findDiffEnd(b, pos + a.size, pos + b.size)\n  if (preferredSide == \"end\") {\n    let adjust = Math.max(0, start - Math.min(endA, endB))\n    preferredPos -= endA + adjust - start\n  }\n  if (endA < start && a.size < b.size) {\n    let move = preferredPos <= start && preferredPos >= endA ? start - preferredPos : 0\n    start -= move\n    endB = start + (endB - endA)\n    endA = start\n  } else if (endB < start) {\n    let move = preferredPos <= start && preferredPos >= endB ? start - preferredPos : 0\n    start -= move\n    endA = start + (endA - endB)\n    endB = start\n  }\n  return {start, endA, endB}\n}\n", "import {Slice, Fragment, DOMParser, DOMSerializer} from \"prosemirror-model\"\nimport browser from \"./browser\"\n\nexport function serializeForClipboard(view, slice) {\n  let context = [], {content, openStart, openEnd} = slice\n  while (openStart > 1 && openEnd > 1 && content.childCount == 1 && content.firstChild.childCount == 1) {\n    openStart--\n    openEnd--\n    let node = content.firstChild\n    context.push(node.type.name, node.attrs != node.type.defaultAttrs ? node.attrs : null)\n    content = node.content\n  }\n\n  let serializer = view.someProp(\"clipboardSerializer\") || DOMSerializer.fromSchema(view.state.schema)\n  let doc = detachedDoc(), wrap = doc.createElement(\"div\")\n  wrap.appendChild(serializer.serializeFragment(content, {document: doc}))\n\n  let firstChild = wrap.firstChild, needsWrap\n  while (firstChild && firstChild.nodeType == 1 && (needsWrap = wrapMap[firstChild.nodeName.toLowerCase()])) {\n    for (let i = needsWrap.length - 1; i >= 0; i--) {\n      let wrapper = doc.createElement(needsWrap[i])\n      while (wrap.firstChild) wrapper.appendChild(wrap.firstChild)\n      wrap.appendChild(wrapper)\n      if (needsWrap[i] != \"tbody\") {\n        openStart++\n        openEnd++\n      }\n    }\n    firstChild = wrap.firstChild\n  }\n\n  if (firstChild && firstChild.nodeType == 1)\n    firstChild.setAttribute(\"data-pm-slice\", `${openStart} ${openEnd} ${JSON.stringify(context)}`)\n\n  let text = view.someProp(\"clipboardTextSerializer\", f => f(slice)) ||\n      slice.content.textBetween(0, slice.content.size, \"\\n\\n\")\n\n  return {dom: wrap, text}\n}\n\n// : (EditorView, string, string, ?bool, ResolvedPos) \u2192 ?Slice\n// Read a slice of content from the clipboard (or drop data).\nexport function parseFromClipboard(view, text, html, plainText, $context) {\n  let dom, inCode = $context.parent.type.spec.code, slice\n  if (!html && !text) return null\n  let asText = text && (plainText || inCode || !html)\n  if (asText) {\n    view.someProp(\"transformPastedText\", f => { text = f(text, inCode || plainText) })\n    if (inCode) return text ? new Slice(Fragment.from(view.state.schema.text(text.replace(/\\r\\n?/g, \"\\n\"))), 0, 0) : Slice.empty\n    let parsed = view.someProp(\"clipboardTextParser\", f => f(text, $context, plainText))\n    if (parsed) {\n      slice = parsed\n    } else {\n      let marks = $context.marks()\n      let {schema} = view.state, serializer = DOMSerializer.fromSchema(schema)\n      dom = document.createElement(\"div\")\n      text.split(/(?:\\r\\n?|\\n)+/).forEach(block => {\n        let p = dom.appendChild(document.createElement(\"p\"))\n        if (block) p.appendChild(serializer.serializeNode(schema.text(block, marks)))\n      })\n    }\n  } else {\n    view.someProp(\"transformPastedHTML\", f => { html = f(html) })\n    dom = readHTML(html)\n    if (browser.webkit) restoreReplacedSpaces(dom)\n  }\n\n  let contextNode = dom && dom.querySelector(\"[data-pm-slice]\")\n  let sliceData = contextNode && /^(\\d+) (\\d+) (.*)/.exec(contextNode.getAttribute(\"data-pm-slice\"))\n  if (!slice) {\n    let parser = view.someProp(\"clipboardParser\") || view.someProp(\"domParser\") || DOMParser.fromSchema(view.state.schema)\n    slice = parser.parseSlice(dom, {\n      preserveWhitespace: !!(asText || sliceData),\n      context: $context,\n      ruleFromNode(dom) {\n        if (dom.nodeName == \"BR\" && !dom.nextSibling &&\n            dom.parentNode && !inlineParents.test(dom.parentNode.nodeName)) return {ignore: true}\n      }\n    })\n  }\n  if (sliceData) {\n    slice = addContext(closeSlice(slice, +sliceData[1], +sliceData[2]), sliceData[3])\n  } else { // HTML wasn't created by ProseMirror. Make sure top-level siblings are coherent\n    slice = Slice.maxOpen(normalizeSiblings(slice.content, $context), true)\n    if (slice.openStart || slice.openEnd) {\n      let openStart = 0, openEnd = 0\n      for (let node = slice.content.firstChild; openStart < slice.openStart && !node.type.spec.isolating;\n           openStart++, node = node.firstChild) {}\n      for (let node = slice.content.lastChild; openEnd < slice.openEnd && !node.type.spec.isolating;\n           openEnd++, node = node.lastChild) {}\n      slice = closeSlice(slice, openStart, openEnd)\n    }\n  }\n\n  view.someProp(\"transformPasted\", f => { slice = f(slice) })\n  return slice\n}\n\nconst inlineParents = /^(a|abbr|acronym|b|cite|code|del|em|i|ins|kbd|label|output|q|ruby|s|samp|span|strong|sub|sup|time|u|tt|var)$/i\n\n// Takes a slice parsed with parseSlice, which means there hasn't been\n// any content-expression checking done on the top nodes, tries to\n// find a parent node in the current context that might fit the nodes,\n// and if successful, rebuilds the slice so that it fits into that parent.\n//\n// This addresses the problem that Transform.replace expects a\n// coherent slice, and will fail to place a set of siblings that don't\n// fit anywhere in the schema.\nfunction normalizeSiblings(fragment, $context) {\n  if (fragment.childCount < 2) return fragment\n  for (let d = $context.depth; d >= 0; d--) {\n    let parent = $context.node(d)\n    let match = parent.contentMatchAt($context.index(d))\n    let lastWrap, result = []\n    fragment.forEach(node => {\n      if (!result) return\n      let wrap = match.findWrapping(node.type), inLast\n      if (!wrap) return result = null\n      if (inLast = result.length && lastWrap.length && addToSibling(wrap, lastWrap, node, result[result.length - 1], 0)) {\n        result[result.length - 1] = inLast\n      } else {\n        if (result.length) result[result.length - 1] = closeRight(result[result.length - 1], lastWrap.length)\n        let wrapped = withWrappers(node, wrap)\n        result.push(wrapped)\n        match = match.matchType(wrapped.type, wrapped.attrs)\n        lastWrap = wrap\n      }\n    })\n    if (result) return Fragment.from(result)\n  }\n  return fragment\n}\n\nfunction withWrappers(node, wrap, from = 0) {\n  for (let i = wrap.length - 1; i >= from; i--)\n    node = wrap[i].create(null, Fragment.from(node))\n  return node\n}\n\n// Used to group adjacent nodes wrapped in similar parents by\n// normalizeSiblings into the same parent node\nfunction addToSibling(wrap, lastWrap, node, sibling, depth) {\n  if (depth < wrap.length && depth < lastWrap.length && wrap[depth] == lastWrap[depth]) {\n    let inner = addToSibling(wrap, lastWrap, node, sibling.lastChild, depth + 1)\n    if (inner) return sibling.copy(sibling.content.replaceChild(sibling.childCount - 1, inner))\n    let match = sibling.contentMatchAt(sibling.childCount)\n    if (match.matchType(depth == wrap.length - 1 ? node.type : wrap[depth + 1]))\n      return sibling.copy(sibling.content.append(Fragment.from(withWrappers(node, wrap, depth + 1))))\n  }\n}\n\nfunction closeRight(node, depth) {\n  if (depth == 0) return node\n  let fragment = node.content.replaceChild(node.childCount - 1, closeRight(node.lastChild, depth - 1))\n  let fill = node.contentMatchAt(node.childCount).fillBefore(Fragment.empty, true)\n  return node.copy(fragment.append(fill))\n}\n\nfunction closeRange(fragment, side, from, to, depth, openEnd) {\n  let node = side < 0 ? fragment.firstChild : fragment.lastChild, inner = node.content\n  if (depth < to - 1) inner = closeRange(inner, side, from, to, depth + 1, openEnd)\n  if (depth >= from)\n    inner = side < 0 ? node.contentMatchAt(0).fillBefore(inner, fragment.childCount > 1 || openEnd <= depth).append(inner)\n      : inner.append(node.contentMatchAt(node.childCount).fillBefore(Fragment.empty, true))\n  return fragment.replaceChild(side < 0 ? 0 : fragment.childCount - 1, node.copy(inner))\n}\n\nfunction closeSlice(slice, openStart, openEnd) {\n  if (openStart < slice.openStart)\n    slice = new Slice(closeRange(slice.content, -1, openStart, slice.openStart, 0, slice.openEnd), openStart, slice.openEnd)\n  if (openEnd < slice.openEnd)\n    slice = new Slice(closeRange(slice.content, 1, openEnd, slice.openEnd, 0, 0), slice.openStart, openEnd)\n  return slice\n}\n\n// Trick from jQuery -- some elements must be wrapped in other\n// elements for innerHTML to work. I.e. if you do `div.innerHTML =\n// \"<td>..</td>\"` the table cells are ignored.\nconst wrapMap = {\n  thead: [\"table\"],\n  tbody: [\"table\"],\n  tfoot: [\"table\"],\n  caption: [\"table\"],\n  colgroup: [\"table\"],\n  col: [\"table\", \"colgroup\"],\n  tr: [\"table\", \"tbody\"],\n  td: [\"table\", \"tbody\", \"tr\"],\n  th: [\"table\", \"tbody\", \"tr\"]\n}\n\nlet _detachedDoc = null\nfunction detachedDoc() {\n  return _detachedDoc || (_detachedDoc = document.implementation.createHTMLDocument(\"title\"))\n}\n\nfunction readHTML(html) {\n  let metas = /^(\\s*<meta [^>]*>)*/.exec(html)\n  if (metas) html = html.slice(metas[0].length)\n  let elt = detachedDoc().createElement(\"div\")\n  let firstTag = /<([a-z][^>\\s]+)/i.exec(html), wrap\n  if (wrap = firstTag && wrapMap[firstTag[1].toLowerCase()])\n    html = wrap.map(n => \"<\" + n + \">\").join(\"\") + html + wrap.map(n => \"</\" + n + \">\").reverse().join(\"\")\n  elt.innerHTML = html\n  if (wrap) for (let i = 0; i < wrap.length; i++) elt = elt.querySelector(wrap[i]) || elt\n  return elt\n}\n\n// Webkit browsers do some hard-to-predict replacement of regular\n// spaces with non-breaking spaces when putting content on the\n// clipboard. This tries to convert such non-breaking spaces (which\n// will be wrapped in a plain span on Chrome, a span with class\n// Apple-converted-space on Safari) back to regular spaces.\nfunction restoreReplacedSpaces(dom) {\n  let nodes = dom.querySelectorAll(browser.chrome ? \"span:not([class]):not([style])\" : \"span.Apple-converted-space\")\n  for (let i = 0; i < nodes.length; i++) {\n    let node = nodes[i]\n    if (node.childNodes.length == 1 && node.textContent == \"\\u00a0\" && node.parentNode)\n      node.parentNode.replaceChild(dom.ownerDocument.createTextNode(\" \"), node)\n  }\n}\n\nfunction addContext(slice, context) {\n  if (!slice.size) return slice\n  let schema = slice.content.firstChild.type.schema, array\n  try { array = JSON.parse(context) }\n  catch(e) { return slice }\n  let {content, openStart, openEnd} = slice\n  for (let i = array.length - 2; i >= 0; i -= 2) {\n    let type = schema.nodes[array[i]]\n    if (!type || type.hasRequiredAttrs()) break\n    content = Fragment.from(type.create(array[i + 1], content))\n    openStart++; openEnd++\n  }\n  return new Slice(content, openStart, openEnd)\n}\n", "import browser from \"./browser\"\nimport {domIndex, isEquivalentPosition} from \"./dom\"\nimport {hasFocusAndSelection, hasSelection, selectionToDOM} from \"./selection\"\n\nconst observeOptions = {\n  childList: true,\n  characterData: true,\n  characterDataOldValue: true,\n  attributes: true,\n  attributeOldValue: true,\n  subtree: true\n}\n// IE11 has very broken mutation observers, so we also listen to DOMCharacterDataModified\nconst useCharData = browser.ie && browser.ie_version <= 11\n\nclass SelectionState {\n  constructor() {\n    this.anchorNode = this.anchorOffset = this.focusNode = this.focusOffset = null\n  }\n\n  set(sel) {\n    this.anchorNode = sel.anchorNode; this.anchorOffset = sel.anchorOffset\n    this.focusNode = sel.focusNode; this.focusOffset = sel.focusOffset\n  }\n\n  eq(sel) {\n    return sel.anchorNode == this.anchorNode && sel.anchorOffset == this.anchorOffset &&\n      sel.focusNode == this.focusNode && sel.focusOffset == this.focusOffset\n  }\n}\n\nexport class DOMObserver {\n  constructor(view, handleDOMChange) {\n    this.view = view\n    this.handleDOMChange = handleDOMChange\n    this.queue = []\n    this.flushingSoon = -1\n    this.observer = window.MutationObserver &&\n      new window.MutationObserver(mutations => {\n        for (let i = 0; i < mutations.length; i++) this.queue.push(mutations[i])\n        // IE11 will sometimes (on backspacing out a single character\n        // text node after a BR node) call the observer callback\n        // before actually updating the DOM, which will cause\n        // ProseMirror to miss the change (see #930)\n        if (browser.ie && browser.ie_version <= 11 && mutations.some(\n          m => m.type == \"childList\" && m.removedNodes.length ||\n               m.type == \"characterData\" && m.oldValue.length > m.target.nodeValue.length))\n          this.flushSoon()\n        else\n          this.flush()\n      })\n    this.currentSelection = new SelectionState\n    if (useCharData) {\n      this.onCharData = e => {\n        this.queue.push({target: e.target, type: \"characterData\", oldValue: e.prevValue})\n        this.flushSoon()\n      }\n    }\n    this.onSelectionChange = this.onSelectionChange.bind(this)\n    this.suppressingSelectionUpdates = false\n  }\n\n  flushSoon() {\n    if (this.flushingSoon < 0)\n      this.flushingSoon = window.setTimeout(() => { this.flushingSoon = -1; this.flush() }, 20)\n  }\n\n  forceFlush() {\n    if (this.flushingSoon > -1) {\n      window.clearTimeout(this.flushingSoon)\n      this.flushingSoon = -1\n      this.flush()\n    }\n  }\n\n  start() {\n    if (this.observer)\n      this.observer.observe(this.view.dom, observeOptions)\n    if (useCharData)\n      this.view.dom.addEventListener(\"DOMCharacterDataModified\", this.onCharData)\n    this.connectSelection()\n  }\n\n  stop() {\n    if (this.observer) {\n      let take = this.observer.takeRecords()\n      if (take.length) {\n        for (let i = 0; i < take.length; i++) this.queue.push(take[i])\n        window.setTimeout(() => this.flush(), 20)\n      }\n      this.observer.disconnect()\n    }\n    if (useCharData) this.view.dom.removeEventListener(\"DOMCharacterDataModified\", this.onCharData)\n    this.disconnectSelection()\n  }\n\n  connectSelection() {\n    this.view.dom.ownerDocument.addEventListener(\"selectionchange\", this.onSelectionChange)\n  }\n\n  disconnectSelection() {\n    this.view.dom.ownerDocument.removeEventListener(\"selectionchange\", this.onSelectionChange)\n  }\n\n  suppressSelectionUpdates() {\n    this.suppressingSelectionUpdates = true\n    setTimeout(() => this.suppressingSelectionUpdates = false, 50)\n  }\n\n  onSelectionChange() {\n    if (!hasFocusAndSelection(this.view)) return\n    if (this.suppressingSelectionUpdates) return selectionToDOM(this.view)\n    // Deletions on IE11 fire their events in the wrong order, giving\n    // us a selection change event before the DOM changes are\n    // reported.\n    if (browser.ie && browser.ie_version <= 11 && !this.view.state.selection.empty) {\n      let sel = this.view.root.getSelection()\n      // Selection.isCollapsed isn't reliable on IE\n      if (sel.focusNode && isEquivalentPosition(sel.focusNode, sel.focusOffset, sel.anchorNode, sel.anchorOffset))\n        return this.flushSoon()\n    }\n    this.flush()\n  }\n\n  setCurSelection() {\n    this.currentSelection.set(this.view.root.getSelection())\n  }\n\n  ignoreSelectionChange(sel) {\n    if (sel.rangeCount == 0) return true\n    let container = sel.getRangeAt(0).commonAncestorContainer\n    let desc = this.view.docView.nearestDesc(container)\n    if (desc && desc.ignoreMutation({type: \"selection\", target: container.nodeType == 3 ? container.parentNode : container})) {\n      this.setCurSelection()\n      return true\n    }\n  }\n\n  flush() {\n    if (!this.view.docView || this.flushingSoon > -1) return\n    let mutations = this.observer ? this.observer.takeRecords() : []\n    if (this.queue.length) {\n      mutations = this.queue.concat(mutations)\n      this.queue.length = 0\n    }\n\n    let sel = this.view.root.getSelection()\n    let newSel = !this.suppressingSelectionUpdates && !this.currentSelection.eq(sel) && hasSelection(this.view) && !this.ignoreSelectionChange(sel)\n\n    let from = -1, to = -1, typeOver = false, added = []\n    if (this.view.editable) {\n      for (let i = 0; i < mutations.length; i++) {\n        let result = this.registerMutation(mutations[i], added)\n        if (result) {\n          from = from < 0 ? result.from : Math.min(result.from, from)\n          to = to < 0 ? result.to : Math.max(result.to, to)\n          if (result.typeOver) typeOver = true\n        }\n      }\n    }\n\n    if (browser.gecko && added.length > 1) {\n      let brs = added.filter(n => n.nodeName == \"BR\")\n      if (brs.length == 2) {\n        let [a, b] = brs\n        if (a.parentNode && a.parentNode.parentNode == b.parentNode) b.remove()\n        else a.remove()\n      }\n    }\n\n    if (from > -1 || newSel) {\n      if (from > -1) {\n        this.view.docView.markDirty(from, to)\n        checkCSS(this.view)\n      }\n      this.handleDOMChange(from, to, typeOver, added)\n      if (this.view.docView.dirty) this.view.updateState(this.view.state)\n      else if (!this.currentSelection.eq(sel)) selectionToDOM(this.view)\n      this.currentSelection.set(sel)\n    }\n  }\n\n  registerMutation(mut, added) {\n    // Ignore mutations inside nodes that were already noted as inserted\n    if (added.indexOf(mut.target) > -1) return null\n    let desc = this.view.docView.nearestDesc(mut.target)\n    if (mut.type == \"attributes\" &&\n        (desc == this.view.docView || mut.attributeName == \"contenteditable\" ||\n         // Firefox sometimes fires spurious events for null/empty styles\n         (mut.attributeName == \"style\" && !mut.oldValue && !mut.target.getAttribute(\"style\"))))\n      return null\n    if (!desc || desc.ignoreMutation(mut)) return null\n\n    if (mut.type == \"childList\") {\n      for (let i = 0; i < mut.addedNodes.length; i++) added.push(mut.addedNodes[i])\n      if (desc.contentDOM && desc.contentDOM != desc.dom && !desc.contentDOM.contains(mut.target))\n        return {from: desc.posBefore, to: desc.posAfter}\n      let prev = mut.previousSibling, next = mut.nextSibling\n      if (browser.ie && browser.ie_version <= 11 && mut.addedNodes.length) {\n        // IE11 gives us incorrect next/prev siblings for some\n        // insertions, so if there are added nodes, recompute those\n        for (let i = 0; i < mut.addedNodes.length; i++) {\n          let {previousSibling, nextSibling} = mut.addedNodes[i]\n          if (!previousSibling || Array.prototype.indexOf.call(mut.addedNodes, previousSibling) < 0) prev = previousSibling\n          if (!nextSibling || Array.prototype.indexOf.call(mut.addedNodes, nextSibling) < 0) next = nextSibling\n        }\n      }\n      let fromOffset = prev && prev.parentNode == mut.target\n          ? domIndex(prev) + 1 : 0\n      let from = desc.localPosFromDOM(mut.target, fromOffset, -1)\n      let toOffset = next && next.parentNode == mut.target\n          ? domIndex(next) : mut.target.childNodes.length\n      let to = desc.localPosFromDOM(mut.target, toOffset, 1)\n      return {from, to}\n    } else if (mut.type == \"attributes\") {\n      return {from: desc.posAtStart - desc.border, to: desc.posAtEnd + desc.border}\n    } else { // \"characterData\"\n      return {\n        from: desc.posAtStart,\n        to: desc.posAtEnd,\n        // An event was generated for a text change that didn't change\n        // any text. Mark the dom change to fall back to assuming the\n        // selection was typed over with an identical value if it can't\n        // find another change.\n        typeOver: mut.target.nodeValue == mut.oldValue\n      }\n    }\n  }\n}\n\nlet cssChecked = false\n\nfunction checkCSS(view) {\n  if (cssChecked) return\n  cssChecked = true\n  if (getComputedStyle(view.dom).whiteSpace == \"normal\")\n    console[\"warn\"](\"ProseMirror expects the CSS white-space property to be set, preferably to 'pre-wrap'. It is recommended to load style/prosemirror.css from the prosemirror-view package.\")\n}\n", "import {Selection, NodeSelection, TextSelection} from \"prosemirror-state\"\nimport {dropPoint} from \"prosemirror-transform\"\nimport {Slice} from \"prosemirror-model\"\n\nimport browser from \"./browser\"\nimport {captureKeyDown} from \"./capturekeys\"\nimport {readDOMChange} from \"./domchange\"\nimport {parseFromClipboard, serializeForClipboard} from \"./clipboard\"\nimport {DOMObserver} from \"./domobserver\"\nimport {selectionBetween, selectionToDOM, selectionFromDOM} from \"./selection\"\nimport {keyEvent} from \"./dom\"\n\n// A collection of DOM events that occur within the editor, and callback functions\n// to invoke when the event fires.\nconst handlers = {}, editHandlers = {}\n\nexport function initInput(view) {\n  view.shiftKey = false\n  view.mouseDown = null\n  view.lastKeyCode = null\n  view.lastKeyCodeTime = 0\n  view.lastClick = {time: 0, x: 0, y: 0, type: \"\"}\n  view.lastSelectionOrigin = null\n  view.lastSelectionTime = 0\n\n  view.lastIOSEnter = 0\n  view.lastIOSEnterFallbackTimeout = null\n  view.lastAndroidDelete = 0\n\n  view.composing = false\n  view.composingTimeout = null\n  view.compositionNodes = []\n  view.compositionEndedAt = -2e8\n\n  view.domObserver = new DOMObserver(view, (from, to, typeOver, added) => readDOMChange(view, from, to, typeOver, added))\n  view.domObserver.start()\n  // Used by hacks like the beforeinput handler to check whether anything happened in the DOM\n  view.domChangeCount = 0\n\n  view.eventHandlers = Object.create(null)\n  for (let event in handlers) {\n    let handler = handlers[event]\n    view.dom.addEventListener(event, view.eventHandlers[event] = event => {\n      if (eventBelongsToView(view, event) && !runCustomHandler(view, event) &&\n          (view.editable || !(event.type in editHandlers)))\n        handler(view, event)\n    })\n  }\n  // On Safari, for reasons beyond my understanding, adding an input\n  // event handler makes an issue where the composition vanishes when\n  // you press enter go away.\n  if (browser.safari) view.dom.addEventListener(\"input\", () => null)\n\n  ensureListeners(view)\n}\n\nfunction setSelectionOrigin(view, origin) {\n  view.lastSelectionOrigin = origin\n  view.lastSelectionTime = Date.now()\n}\n\nexport function destroyInput(view) {\n  view.domObserver.stop()\n  for (let type in view.eventHandlers)\n    view.dom.removeEventListener(type, view.eventHandlers[type])\n  clearTimeout(view.composingTimeout)\n  clearTimeout(view.lastIOSEnterFallbackTimeout)\n}\n\nexport function ensureListeners(view) {\n  view.someProp(\"handleDOMEvents\", currentHandlers => {\n    for (let type in currentHandlers) if (!view.eventHandlers[type])\n      view.dom.addEventListener(type, view.eventHandlers[type] = event => runCustomHandler(view, event))\n  })\n}\n\nfunction runCustomHandler(view, event) {\n  return view.someProp(\"handleDOMEvents\", handlers => {\n    let handler = handlers[event.type]\n    return handler ? handler(view, event) || event.defaultPrevented : false\n  })\n}\n\nfunction eventBelongsToView(view, event) {\n  if (!event.bubbles) return true\n  if (event.defaultPrevented) return false\n  for (let node = event.target; node != view.dom; node = node.parentNode)\n    if (!node || node.nodeType == 11 ||\n        (node.pmViewDesc && node.pmViewDesc.stopEvent(event)))\n      return false\n  return true\n}\n\nexport function dispatchEvent(view, event) {\n  if (!runCustomHandler(view, event) && handlers[event.type] &&\n      (view.editable || !(event.type in editHandlers)))\n    handlers[event.type](view, event)\n}\n\neditHandlers.keydown = (view, event) => {\n  view.shiftKey = event.keyCode == 16 || event.shiftKey\n  if (inOrNearComposition(view, event)) return\n  view.lastKeyCode = event.keyCode\n  view.lastKeyCodeTime = Date.now()\n  // Suppress enter key events on Chrome Android, because those tend\n  // to be part of a confused sequence of composition events fired,\n  // and handling them eagerly tends to corrupt the input.\n  if (browser.android && browser.chrome && event.keyCode == 13) return\n  if (event.keyCode != 229) view.domObserver.forceFlush()\n\n  // On iOS, if we preventDefault enter key presses, the virtual\n  // keyboard gets confused. So the hack here is to set a flag that\n  // makes the DOM change code recognize that what just happens should\n  // be replaced by whatever the Enter key handlers do.\n  if (browser.ios && event.keyCode == 13 && !event.ctrlKey && !event.altKey && !event.metaKey) {\n    let now = Date.now()\n    view.lastIOSEnter = now\n    view.lastIOSEnterFallbackTimeout = setTimeout(() => {\n      if (view.lastIOSEnter == now) {\n        view.someProp(\"handleKeyDown\", f => f(view, keyEvent(13, \"Enter\")))\n        view.lastIOSEnter = 0\n      }\n    }, 200)\n  } else if (view.someProp(\"handleKeyDown\", f => f(view, event)) || captureKeyDown(view, event)) {\n    event.preventDefault()\n  } else {\n    setSelectionOrigin(view, \"key\")\n  }\n}\n\neditHandlers.keyup = (view, e) => {\n  if (e.keyCode == 16) view.shiftKey = false\n}\n\neditHandlers.keypress = (view, event) => {\n  if (inOrNearComposition(view, event) || !event.charCode ||\n      event.ctrlKey && !event.altKey || browser.mac && event.metaKey) return\n\n  if (view.someProp(\"handleKeyPress\", f => f(view, event))) {\n    event.preventDefault()\n    return\n  }\n\n  let sel = view.state.selection\n  if (!(sel instanceof TextSelection) || !sel.$from.sameParent(sel.$to)) {\n    let text = String.fromCharCode(event.charCode)\n    if (!view.someProp(\"handleTextInput\", f => f(view, sel.$from.pos, sel.$to.pos, text)))\n      view.dispatch(view.state.tr.insertText(text).scrollIntoView())\n    event.preventDefault()\n  }\n}\n\nfunction eventCoords(event) { return {left: event.clientX, top: event.clientY} }\n\nfunction isNear(event, click) {\n  let dx = click.x - event.clientX, dy = click.y - event.clientY\n  return dx * dx + dy * dy < 100\n}\n\nfunction runHandlerOnContext(view, propName, pos, inside, event) {\n  if (inside == -1) return false\n  let $pos = view.state.doc.resolve(inside)\n  for (let i = $pos.depth + 1; i > 0; i--) {\n    if (view.someProp(propName, f => i > $pos.depth ? f(view, pos, $pos.nodeAfter, $pos.before(i), event, true)\n                                                    : f(view, pos, $pos.node(i), $pos.before(i), event, false)))\n      return true\n  }\n  return false\n}\n\nfunction updateSelection(view, selection, origin) {\n  if (!view.focused) view.focus()\n  let tr = view.state.tr.setSelection(selection)\n  if (origin == \"pointer\") tr.setMeta(\"pointer\", true)\n  view.dispatch(tr)\n}\n\nfunction selectClickedLeaf(view, inside) {\n  if (inside == -1) return false\n  let $pos = view.state.doc.resolve(inside), node = $pos.nodeAfter\n  if (node && node.isAtom && NodeSelection.isSelectable(node)) {\n    updateSelection(view, new NodeSelection($pos), \"pointer\")\n    return true\n  }\n  return false\n}\n\nfunction selectClickedNode(view, inside) {\n  if (inside == -1) return false\n  let sel = view.state.selection, selectedNode, selectAt\n  if (sel instanceof NodeSelection) selectedNode = sel.node\n\n  let $pos = view.state.doc.resolve(inside)\n  for (let i = $pos.depth + 1; i > 0; i--) {\n    let node = i > $pos.depth ? $pos.nodeAfter : $pos.node(i)\n    if (NodeSelection.isSelectable(node)) {\n      if (selectedNode && sel.$from.depth > 0 &&\n          i >= sel.$from.depth && $pos.before(sel.$from.depth + 1) == sel.$from.pos)\n        selectAt = $pos.before(sel.$from.depth)\n      else\n        selectAt = $pos.before(i)\n      break\n    }\n  }\n\n  if (selectAt != null) {\n    updateSelection(view, NodeSelection.create(view.state.doc, selectAt), \"pointer\")\n    return true\n  } else {\n    return false\n  }\n}\n\nfunction handleSingleClick(view, pos, inside, event, selectNode) {\n  return runHandlerOnContext(view, \"handleClickOn\", pos, inside, event) ||\n    view.someProp(\"handleClick\", f => f(view, pos, event)) ||\n    (selectNode ? selectClickedNode(view, inside) : selectClickedLeaf(view, inside))\n}\n\nfunction handleDoubleClick(view, pos, inside, event) {\n  return runHandlerOnContext(view, \"handleDoubleClickOn\", pos, inside, event) ||\n    view.someProp(\"handleDoubleClick\", f => f(view, pos, event))\n}\n\nfunction handleTripleClick(view, pos, inside, event) {\n  return runHandlerOnContext(view, \"handleTripleClickOn\", pos, inside, event) ||\n    view.someProp(\"handleTripleClick\", f => f(view, pos, event)) ||\n    defaultTripleClick(view, inside, event)\n}\n\nfunction defaultTripleClick(view, inside, event) {\n  if (event.button != 0) return false\n  let doc = view.state.doc\n  if (inside == -1) {\n    if (doc.inlineContent) {\n      updateSelection(view, TextSelection.create(doc, 0, doc.content.size), \"pointer\")\n      return true\n    }\n    return false\n  }\n\n  let $pos = doc.resolve(inside)\n  for (let i = $pos.depth + 1; i > 0; i--) {\n    let node = i > $pos.depth ? $pos.nodeAfter : $pos.node(i)\n    let nodePos = $pos.before(i)\n    if (node.inlineContent)\n      updateSelection(view, TextSelection.create(doc, nodePos + 1, nodePos + 1 + node.content.size), \"pointer\")\n    else if (NodeSelection.isSelectable(node))\n      updateSelection(view, NodeSelection.create(doc, nodePos), \"pointer\")\n    else\n      continue\n    return true\n  }\n}\n\nfunction forceDOMFlush(view) {\n  return endComposition(view)\n}\n\nconst selectNodeModifier = browser.mac ? \"metaKey\" : \"ctrlKey\"\n\nhandlers.mousedown = (view, event) => {\n  view.shiftKey = event.shiftKey\n  let flushed = forceDOMFlush(view)\n  let now = Date.now(), type = \"singleClick\"\n  if (now - view.lastClick.time < 500 && isNear(event, view.lastClick) && !event[selectNodeModifier]) {\n    if (view.lastClick.type == \"singleClick\") type = \"doubleClick\"\n    else if (view.lastClick.type == \"doubleClick\") type = \"tripleClick\"\n  }\n  view.lastClick = {time: now, x: event.clientX, y: event.clientY, type}\n\n  let pos = view.posAtCoords(eventCoords(event))\n  if (!pos) return\n\n  if (type == \"singleClick\") {\n    if (view.mouseDown) view.mouseDown.done()\n    view.mouseDown = new MouseDown(view, pos, event, flushed)\n  } else if ((type == \"doubleClick\" ? handleDoubleClick : handleTripleClick)(view, pos.pos, pos.inside, event)) {\n    event.preventDefault()\n  } else {\n    setSelectionOrigin(view, \"pointer\")\n  }\n}\n\nclass MouseDown {\n  constructor(view, pos, event, flushed) {\n    this.view = view\n    this.startDoc = view.state.doc\n    this.pos = pos\n    this.event = event\n    this.flushed = flushed\n    this.selectNode = event[selectNodeModifier]\n    this.allowDefault = event.shiftKey\n    this.delayedSelectionSync = false\n\n    let targetNode, targetPos\n    if (pos.inside > -1) {\n      targetNode = view.state.doc.nodeAt(pos.inside)\n      targetPos = pos.inside\n    } else {\n      let $pos = view.state.doc.resolve(pos.pos)\n      targetNode = $pos.parent\n      targetPos = $pos.depth ? $pos.before() : 0\n    }\n\n    this.mightDrag = null\n\n    const target = flushed ? null : event.target\n    const targetDesc = target ? view.docView.nearestDesc(target, true) : null\n    this.target = targetDesc ? targetDesc.dom : null\n\n    let {selection} = view.state\n    if (event.button == 0 &&\n        targetNode.type.spec.draggable && targetNode.type.spec.selectable !== false ||\n        selection instanceof NodeSelection && selection.from <= targetPos && selection.to > targetPos)\n      this.mightDrag = {node: targetNode,\n                        pos: targetPos,\n                        addAttr: this.target && !this.target.draggable,\n                        setUneditable: this.target && browser.gecko && !this.target.hasAttribute(\"contentEditable\")}\n\n    if (this.target && this.mightDrag && (this.mightDrag.addAttr || this.mightDrag.setUneditable)) {\n      this.view.domObserver.stop()\n      if (this.mightDrag.addAttr) this.target.draggable = true\n      if (this.mightDrag.setUneditable)\n        setTimeout(() => {\n          if (this.view.mouseDown == this) this.target.setAttribute(\"contentEditable\", \"false\")\n        }, 20)\n      this.view.domObserver.start()\n    }\n\n    view.root.addEventListener(\"mouseup\", this.up = this.up.bind(this))\n    view.root.addEventListener(\"mousemove\", this.move = this.move.bind(this))\n    setSelectionOrigin(view, \"pointer\")\n  }\n\n  done() {\n    this.view.root.removeEventListener(\"mouseup\", this.up)\n    this.view.root.removeEventListener(\"mousemove\", this.move)\n    if (this.mightDrag && this.target) {\n      this.view.domObserver.stop()\n      if (this.mightDrag.addAttr) this.target.removeAttribute(\"draggable\")\n      if (this.mightDrag.setUneditable) this.target.removeAttribute(\"contentEditable\")\n      this.view.domObserver.start()\n    }\n    if (this.delayedSelectionSync) setTimeout(() => selectionToDOM(this.view))\n    this.view.mouseDown = null\n  }\n\n  up(event) {\n    this.done()\n\n    if (!this.view.dom.contains(event.target.nodeType == 3 ? event.target.parentNode : event.target))\n      return\n\n    let pos = this.pos\n    if (this.view.state.doc != this.startDoc) pos = this.view.posAtCoords(eventCoords(event))\n\n    if (this.allowDefault || !pos) {\n      setSelectionOrigin(this.view, \"pointer\")\n    } else if (handleSingleClick(this.view, pos.pos, pos.inside, event, this.selectNode)) {\n      event.preventDefault()\n    } else if (event.button == 0 &&\n               (this.flushed ||\n                // Safari ignores clicks on draggable elements\n                (browser.safari && this.mightDrag && !this.mightDrag.node.isAtom) ||\n                // Chrome will sometimes treat a node selection as a\n                // cursor, but still report that the node is selected\n                // when asked through getSelection. You'll then get a\n                // situation where clicking at the point where that\n                // (hidden) cursor is doesn't change the selection, and\n                // thus doesn't get a reaction from ProseMirror. This\n                // works around that.\n                (browser.chrome && !(this.view.state.selection instanceof TextSelection) &&\n                 Math.min(Math.abs(pos.pos - this.view.state.selection.from),\n                          Math.abs(pos.pos - this.view.state.selection.to)) <= 2))) {\n      updateSelection(this.view, Selection.near(this.view.state.doc.resolve(pos.pos)), \"pointer\")\n      event.preventDefault()\n    } else {\n      setSelectionOrigin(this.view, \"pointer\")\n    }\n  }\n\n  move(event) {\n    if (!this.allowDefault && (Math.abs(this.event.x - event.clientX) > 4 ||\n                               Math.abs(this.event.y - event.clientY) > 4))\n      this.allowDefault = true\n    setSelectionOrigin(this.view, \"pointer\")\n    if (event.buttons == 0) this.done()\n  }\n}\n\nhandlers.touchdown = view => {\n  forceDOMFlush(view)\n  setSelectionOrigin(view, \"pointer\")\n}\n\nhandlers.contextmenu = view => forceDOMFlush(view)\n\nfunction inOrNearComposition(view, event) {\n  if (view.composing) return true\n  // See https://www.stum.de/2016/06/24/handling-ime-events-in-javascript/.\n  // On Japanese input method editors (IMEs), the Enter key is used to confirm character\n  // selection. On Safari, when Enter is pressed, compositionend and keydown events are\n  // emitted. The keydown event triggers newline insertion, which we don't want.\n  // This method returns true if the keydown event should be ignored.\n  // We only ignore it once, as pressing Enter a second time *should* insert a newline.\n  // Furthermore, the keydown event timestamp must be close to the compositionEndedAt timestamp.\n  // This guards against the case where compositionend is triggered without the keyboard\n  // (e.g. character confirmation may be done with the mouse), and keydown is triggered\n  // afterwards- we wouldn't want to ignore the keydown event in this case.\n  if (browser.safari && Math.abs(event.timeStamp - view.compositionEndedAt) < 500) {\n    view.compositionEndedAt = -2e8\n    return true\n  }\n  return false\n}\n\n// Drop active composition after 5 seconds of inactivity on Android\nconst timeoutComposition = browser.android ? 5000 : -1\n\neditHandlers.compositionstart = editHandlers.compositionupdate = view => {\n  if (!view.composing) {\n    view.domObserver.flush()\n    let {state} = view, $pos = state.selection.$from\n    if (state.selection.empty &&\n        (state.storedMarks ||\n         (!$pos.textOffset && $pos.parentOffset && $pos.nodeBefore.marks.some(m => m.type.spec.inclusive === false)))) {\n      // Need to wrap the cursor in mark nodes different from the ones in the DOM context\n      view.markCursor = view.state.storedMarks || $pos.marks()\n      endComposition(view, true)\n      view.markCursor = null\n    } else {\n      endComposition(view)\n      // In firefox, if the cursor is after but outside a marked node,\n      // the inserted text won't inherit the marks. So this moves it\n      // inside if necessary.\n      if (browser.gecko && state.selection.empty && $pos.parentOffset && !$pos.textOffset && $pos.nodeBefore.marks.length) {\n        let sel = view.root.getSelection()\n        for (let node = sel.focusNode, offset = sel.focusOffset; node && node.nodeType == 1 && offset != 0;) {\n          let before = offset < 0 ? node.lastChild : node.childNodes[offset - 1]\n          if (!before) break\n          if (before.nodeType == 3) {\n            sel.collapse(before, before.nodeValue.length)\n            break\n          } else {\n            node = before\n            offset = -1\n          }\n        }\n      }\n    }\n    view.composing = true\n  }\n  scheduleComposeEnd(view, timeoutComposition)\n}\n\neditHandlers.compositionend = (view, event) => {\n  if (view.composing) {\n    view.composing = false\n    view.compositionEndedAt = event.timeStamp\n    scheduleComposeEnd(view, 20)\n  }\n}\n\nfunction scheduleComposeEnd(view, delay) {\n  clearTimeout(view.composingTimeout)\n  if (delay > -1) view.composingTimeout = setTimeout(() => endComposition(view), delay)\n}\n\nexport function clearComposition(view) {\n  if (view.composing) {\n    view.composing = false\n    view.compositionEndedAt = timestampFromCustomEvent()\n  }\n  while (view.compositionNodes.length > 0) view.compositionNodes.pop().markParentsDirty()\n}\n\nfunction timestampFromCustomEvent() {\n  let event = document.createEvent(\"Event\")\n  event.initEvent(\"event\", true, true)\n  return event.timeStamp\n}\n\nexport function endComposition(view, forceUpdate) {\n  if (browser.android && view.domObserver.flushingSoon >= 0) return\n  view.domObserver.forceFlush()\n  clearComposition(view)\n  if (forceUpdate || view.docView.dirty) {\n    let sel = selectionFromDOM(view)\n    if (sel && !sel.eq(view.state.selection)) view.dispatch(view.state.tr.setSelection(sel))\n    else view.updateState(view.state)\n    return true\n  }\n  return false\n}\n\nfunction captureCopy(view, dom) {\n  // The extra wrapper is somehow necessary on IE/Edge to prevent the\n  // content from being mangled when it is put onto the clipboard\n  if (!view.dom.parentNode) return\n  let wrap = view.dom.parentNode.appendChild(document.createElement(\"div\"))\n  wrap.appendChild(dom)\n  wrap.style.cssText = \"position: fixed; left: -10000px; top: 10px\"\n  let sel = getSelection(), range = document.createRange()\n  range.selectNodeContents(dom)\n  // Done because IE will fire a selectionchange moving the selection\n  // to its start when removeAllRanges is called and the editor still\n  // has focus (which will mess up the editor's selection state).\n  view.dom.blur()\n  sel.removeAllRanges()\n  sel.addRange(range)\n  setTimeout(() => {\n    if (wrap.parentNode) wrap.parentNode.removeChild(wrap)\n    view.focus()\n  }, 50)\n}\n\n// This is very crude, but unfortunately both these browsers _pretend_\n// that they have a clipboard API\u2014all the objects and methods are\n// there, they just don't work, and they are hard to test.\nconst brokenClipboardAPI = (browser.ie && browser.ie_version < 15) ||\n      (browser.ios && browser.webkit_version < 604)\n\nhandlers.copy = editHandlers.cut = (view, e) => {\n  let sel = view.state.selection, cut = e.type == \"cut\"\n  if (sel.empty) return\n\n  // IE and Edge's clipboard interface is completely broken\n  let data = brokenClipboardAPI ? null : e.clipboardData\n  let slice = sel.content(), {dom, text} = serializeForClipboard(view, slice)\n  if (data) {\n    e.preventDefault()\n    data.clearData()\n    data.setData(\"text/html\", dom.innerHTML)\n    data.setData(\"text/plain\", text)\n  } else {\n    captureCopy(view, dom)\n  }\n  if (cut) view.dispatch(view.state.tr.deleteSelection().scrollIntoView().setMeta(\"uiEvent\", \"cut\"))\n}\n\nfunction sliceSingleNode(slice) {\n  return slice.openStart == 0 && slice.openEnd == 0 && slice.content.childCount == 1 ? slice.content.firstChild : null\n}\n\nfunction capturePaste(view, e) {\n  if (!view.dom.parentNode) return\n  let plainText = view.shiftKey || view.state.selection.$from.parent.type.spec.code\n  let target = view.dom.parentNode.appendChild(document.createElement(plainText ? \"textarea\" : \"div\"))\n  if (!plainText) target.contentEditable = \"true\"\n  target.style.cssText = \"position: fixed; left: -10000px; top: 10px\"\n  target.focus()\n  setTimeout(() => {\n    view.focus()\n    if (target.parentNode) target.parentNode.removeChild(target)\n    if (plainText) doPaste(view, target.value, null, e)\n    else doPaste(view, target.textContent, target.innerHTML, e)\n  }, 50)\n}\n\nfunction doPaste(view, text, html, e) {\n  let slice = parseFromClipboard(view, text, html, view.shiftKey, view.state.selection.$from)\n  if (view.someProp(\"handlePaste\", f => f(view, e, slice || Slice.empty))) return true\n  if (!slice) return false\n\n  let singleNode = sliceSingleNode(slice)\n  let tr = singleNode ? view.state.tr.replaceSelectionWith(singleNode, view.shiftKey) : view.state.tr.replaceSelection(slice)\n  view.dispatch(tr.scrollIntoView().setMeta(\"paste\", true).setMeta(\"uiEvent\", \"paste\"))\n  return true\n}\n\neditHandlers.paste = (view, e) => {\n  // Handling paste from JavaScript during composition is very poorly\n  // handled by browsers, so as a dodgy but preferable kludge, we just\n  // let the browser do its native thing there, except on Android,\n  // where the editor is almost always composing.\n  if (view.composing && !browser.android) return\n  let data = brokenClipboardAPI ? null : e.clipboardData\n  if (data && doPaste(view, data.getData(\"text/plain\"), data.getData(\"text/html\"), e)) e.preventDefault()\n  else capturePaste(view, e)\n}\n\nclass Dragging {\n  constructor(slice, move) {\n    this.slice = slice\n    this.move = move\n  }\n}\n\nconst dragCopyModifier = browser.mac ? \"altKey\" : \"ctrlKey\"\n\nhandlers.dragstart = (view, e) => {\n  let mouseDown = view.mouseDown\n  if (mouseDown) mouseDown.done()\n  if (!e.dataTransfer) return\n\n  let sel = view.state.selection\n  let pos = sel.empty ? null : view.posAtCoords(eventCoords(e))\n  if (pos && pos.pos >= sel.from && pos.pos <= (sel instanceof NodeSelection ? sel.to - 1: sel.to)) {\n    // In selection\n  } else if (mouseDown && mouseDown.mightDrag) {\n    view.dispatch(view.state.tr.setSelection(NodeSelection.create(view.state.doc, mouseDown.mightDrag.pos)))\n  } else if (e.target && e.target.nodeType == 1) {\n    let desc = view.docView.nearestDesc(e.target, true)\n    if (desc && desc.node.type.spec.draggable && desc != view.docView)\n      view.dispatch(view.state.tr.setSelection(NodeSelection.create(view.state.doc, desc.posBefore)))\n  }\n  let slice = view.state.selection.content(), {dom, text} = serializeForClipboard(view, slice)\n  e.dataTransfer.clearData()\n  e.dataTransfer.setData(brokenClipboardAPI ? \"Text\" : \"text/html\", dom.innerHTML)\n  // See https://github.com/ProseMirror/prosemirror/issues/1156\n  e.dataTransfer.effectAllowed = \"copyMove\"\n  if (!brokenClipboardAPI) e.dataTransfer.setData(\"text/plain\", text)\n  view.dragging = new Dragging(slice, !e[dragCopyModifier])\n}\n\nhandlers.dragend = view => {\n  let dragging = view.dragging\n  window.setTimeout(() => {\n    if (view.dragging == dragging)  view.dragging = null\n  }, 50)\n}\n\neditHandlers.dragover = editHandlers.dragenter = (_, e) => e.preventDefault()\n\neditHandlers.drop = (view, e) => {\n  let dragging = view.dragging\n  view.dragging = null\n\n  if (!e.dataTransfer) return\n\n  let eventPos = view.posAtCoords(eventCoords(e))\n  if (!eventPos) return\n  let $mouse = view.state.doc.resolve(eventPos.pos)\n  if (!$mouse) return\n  let slice = dragging && dragging.slice\n  if (slice) {\n    view.someProp(\"transformPasted\", f => { slice = f(slice) })\n  } else {\n    slice = parseFromClipboard(view, e.dataTransfer.getData(brokenClipboardAPI ? \"Text\" : \"text/plain\"),\n                               brokenClipboardAPI ? null : e.dataTransfer.getData(\"text/html\"), false, $mouse)\n  }\n  let move = dragging && !e[dragCopyModifier]\n  if (view.someProp(\"handleDrop\", f => f(view, e, slice || Slice.empty, move))) {\n    e.preventDefault()\n    return\n  }\n  if (!slice) return\n\n  e.preventDefault()\n  let insertPos = slice ? dropPoint(view.state.doc, $mouse.pos, slice) : $mouse.pos\n  if (insertPos == null) insertPos = $mouse.pos\n\n  let tr = view.state.tr\n  if (move) tr.deleteSelection()\n\n  let pos = tr.mapping.map(insertPos)\n  let isNode = slice.openStart == 0 && slice.openEnd == 0 && slice.content.childCount == 1\n  let beforeInsert = tr.doc\n  if (isNode)\n    tr.replaceRangeWith(pos, pos, slice.content.firstChild)\n  else\n    tr.replaceRange(pos, pos, slice)\n  if (tr.doc.eq(beforeInsert)) return\n\n  let $pos = tr.doc.resolve(pos)\n  if (isNode && NodeSelection.isSelectable(slice.content.firstChild) &&\n      $pos.nodeAfter && $pos.nodeAfter.sameMarkup(slice.content.firstChild)) {\n    tr.setSelection(new NodeSelection($pos))\n  } else {\n    let end = tr.mapping.map(insertPos)\n    tr.mapping.maps[tr.mapping.maps.length - 1].forEach((_from, _to, _newFrom, newTo) => end = newTo)\n    tr.setSelection(selectionBetween(view, $pos, tr.doc.resolve(end)))\n  }\n  view.focus()\n  view.dispatch(tr.setMeta(\"uiEvent\", \"drop\"))\n}\n\nhandlers.focus = view => {\n  if (!view.focused) {\n    view.domObserver.stop()\n    view.dom.classList.add(\"ProseMirror-focused\")\n    view.domObserver.start()\n    view.focused = true\n    setTimeout(() => {\n      if (view.docView && view.hasFocus() && !view.domObserver.currentSelection.eq(view.root.getSelection()))\n        selectionToDOM(view)\n    }, 20)\n  }\n}\n\nhandlers.blur = (view, e) => {\n  if (view.focused) {\n    view.domObserver.stop()\n    view.dom.classList.remove(\"ProseMirror-focused\")\n    view.domObserver.start()\n    if (e.relatedTarget && view.dom.contains(e.relatedTarget))\n      view.domObserver.currentSelection.set({})\n    view.focused = false\n  }\n}\n\nhandlers.beforeinput = (view, event) => {\n  // We should probably do more with beforeinput events, but support\n  // is so spotty that I'm still waiting to see where they are going.\n\n  // Very specific hack to deal with backspace sometimes failing on\n  // Chrome Android when after an uneditable node.\n  if (browser.chrome && browser.android && event.inputType == \"deleteContentBackward\") {\n    view.domObserver.flushSoon()\n    let {domChangeCount} = view\n    setTimeout(() => {\n      if (view.domChangeCount != domChangeCount) return // Event already had some effect\n      // This bug tends to close the virtual keyboard, so we refocus\n      view.dom.blur()\n      view.focus()\n      if (view.someProp(\"handleKeyDown\", f => f(view, keyEvent(8, \"Backspace\")))) return\n      let {$cursor} = view.state.selection\n      // Crude approximation of backspace behavior when no command handled it\n      if ($cursor && $cursor.pos > 0) view.dispatch(view.state.tr.delete($cursor.pos - 1, $cursor.pos).scrollIntoView())\n    }, 50)\n  }\n}\n\n// Make sure all handlers get registered\nfor (let prop in editHandlers) handlers[prop] = editHandlers[prop]\n", "function compareObjs(a, b) {\n  if (a == b) return true\n  for (let p in a) if (a[p] !== b[p]) return false\n  for (let p in b) if (!(p in a)) return false\n  return true\n}\n\nclass WidgetType {\n  constructor(toDOM, spec) {\n    this.spec = spec || noSpec\n    this.side = this.spec.side || 0\n    this.toDOM = toDOM\n  }\n\n  map(mapping, span, offset, oldOffset) {\n    let {pos, deleted} = mapping.mapResult(span.from + oldOffset, this.side < 0 ? -1 : 1)\n    return deleted ? null : new Decoration(pos - offset, pos - offset, this)\n  }\n\n  valid() { return true }\n\n  eq(other) {\n    return this == other ||\n      (other instanceof WidgetType &&\n       (this.spec.key && this.spec.key == other.spec.key ||\n        this.toDOM == other.toDOM && compareObjs(this.spec, other.spec)))\n  }\n\n  destroy(node) {\n    if (this.spec.destroy) this.spec.destroy(node)\n  }\n}\n\nclass InlineType {\n  constructor(attrs, spec) {\n    this.spec = spec || noSpec\n    this.attrs = attrs\n  }\n\n  map(mapping, span, offset, oldOffset) {\n    let from = mapping.map(span.from + oldOffset, this.spec.inclusiveStart ? -1 : 1) - offset\n    let to = mapping.map(span.to + oldOffset, this.spec.inclusiveEnd ? 1 : -1) - offset\n    return from >= to ? null : new Decoration(from, to, this)\n  }\n\n  valid(_, span) { return span.from < span.to }\n\n  eq(other) {\n    return this == other ||\n      (other instanceof InlineType && compareObjs(this.attrs, other.attrs) &&\n       compareObjs(this.spec, other.spec))\n  }\n\n  static is(span) { return span.type instanceof InlineType }\n}\n\nclass NodeType {\n  constructor(attrs, spec) {\n    this.spec = spec || noSpec\n    this.attrs = attrs\n  }\n\n  map(mapping, span, offset, oldOffset) {\n    let from = mapping.mapResult(span.from + oldOffset, 1)\n    if (from.deleted) return null\n    let to = mapping.mapResult(span.to + oldOffset, -1)\n    if (to.deleted || to.pos <= from.pos) return null\n    return new Decoration(from.pos - offset, to.pos - offset, this)\n  }\n\n  valid(node, span) {\n    let {index, offset} = node.content.findIndex(span.from), child\n    return offset == span.from && !(child = node.child(index)).isText && offset + child.nodeSize == span.to\n  }\n\n  eq(other) {\n    return this == other ||\n      (other instanceof NodeType && compareObjs(this.attrs, other.attrs) &&\n       compareObjs(this.spec, other.spec))\n  }\n}\n\n// ::- Decoration objects can be provided to the view through the\n// [`decorations` prop](#view.EditorProps.decorations). They come in\n// several variants\u2014see the static members of this class for details.\nexport class Decoration {\n  constructor(from, to, type) {\n    // :: number\n    // The start position of the decoration.\n    this.from = from\n    // :: number\n    // The end position. Will be the same as `from` for [widget\n    // decorations](#view.Decoration^widget).\n    this.to = to\n    this.type = type\n  }\n\n  copy(from, to) {\n    return new Decoration(from, to, this.type)\n  }\n\n  eq(other, offset = 0) {\n    return this.type.eq(other.type) && this.from + offset == other.from && this.to + offset == other.to\n  }\n\n  map(mapping, offset, oldOffset) {\n    return this.type.map(mapping, this, offset, oldOffset)\n  }\n\n  // :: (number, union<(view: EditorView, getPos: () \u2192 number) \u2192 dom.Node, dom.Node>, ?Object) \u2192 Decoration\n  // Creates a widget decoration, which is a DOM node that's shown in\n  // the document at the given position. It is recommended that you\n  // delay rendering the widget by passing a function that will be\n  // called when the widget is actually drawn in a view, but you can\n  // also directly pass a DOM node. `getPos` can be used to find the\n  // widget's current document position.\n  //\n  //   spec::- These options are supported:\n  //\n  //     side:: ?number\n  //     Controls which side of the document position this widget is\n  //     associated with. When negative, it is drawn before a cursor\n  //     at its position, and content inserted at that position ends\n  //     up after the widget. When zero (the default) or positive, the\n  //     widget is drawn after the cursor and content inserted there\n  //     ends up before the widget.\n  //\n  //     When there are multiple widgets at a given position, their\n  //     `side` values determine the order in which they appear. Those\n  //     with lower values appear first. The ordering of widgets with\n  //     the same `side` value is unspecified.\n  //\n  //     When `marks` is null, `side` also determines the marks that\n  //     the widget is wrapped in\u2014those of the node before when\n  //     negative, those of the node after when positive.\n  //\n  //     marks:: ?[Mark]\n  //     The precise set of marks to draw around the widget.\n  //\n  //     stopEvent:: ?(event: dom.Event) \u2192 bool\n  //     Can be used to control which DOM events, when they bubble out\n  //     of this widget, the editor view should ignore.\n  //\n  //     ignoreSelection:: ?bool\n  //     When set (defaults to false), selection changes inside the\n  //     widget are ignored, and don't cause ProseMirror to try and\n  //     re-sync the selection with its selection state.\n  //\n  //     key:: ?string\n  //     When comparing decorations of this type (in order to decide\n  //     whether it needs to be redrawn), ProseMirror will by default\n  //     compare the widget DOM node by identity. If you pass a key,\n  //     that key will be compared instead, which can be useful when\n  //     you generate decorations on the fly and don't want to store\n  //     and reuse DOM nodes. Make sure that any widgets with the same\n  //     key are interchangeable\u2014if widgets differ in, for example,\n  //     the behavior of some event handler, they should get\n  //     different keys.\n  //\n  //     destroy:: ?(node: dom.Node)\n  //     Called when the widget decoration is removed as a result of\n  //     mapping\n  static widget(pos, toDOM, spec) {\n    return new Decoration(pos, pos, new WidgetType(toDOM, spec))\n  }\n\n  // :: (number, number, DecorationAttrs, ?Object) \u2192 Decoration\n  // Creates an inline decoration, which adds the given attributes to\n  // each inline node between `from` and `to`.\n  //\n  //   spec::- These options are recognized:\n  //\n  //     inclusiveStart:: ?bool\n  //     Determines how the left side of the decoration is\n  //     [mapped](#transform.Position_Mapping) when content is\n  //     inserted directly at that position. By default, the decoration\n  //     won't include the new content, but you can set this to `true`\n  //     to make it inclusive.\n  //\n  //     inclusiveEnd:: ?bool\n  //     Determines how the right side of the decoration is mapped.\n  //     See\n  //     [`inclusiveStart`](#view.Decoration^inline^spec.inclusiveStart).\n  static inline(from, to, attrs, spec) {\n    return new Decoration(from, to, new InlineType(attrs, spec))\n  }\n\n  // :: (number, number, DecorationAttrs, ?Object) \u2192 Decoration\n  // Creates a node decoration. `from` and `to` should point precisely\n  // before and after a node in the document. That node, and only that\n  // node, will receive the given attributes.\n  //\n  //   spec::-\n  //\n  //   Optional information to store with the decoration. It\n  //   is also used when comparing decorators for equality.\n  static node(from, to, attrs, spec) {\n    return new Decoration(from, to, new NodeType(attrs, spec))\n  }\n\n  // :: Object\n  // The spec provided when creating this decoration. Can be useful\n  // if you've stored extra information in that object.\n  get spec() { return this.type.spec }\n\n  get inline() { return this.type instanceof InlineType }\n}\n\n// DecorationAttrs:: interface\n// A set of attributes to add to a decorated node. Most properties\n// simply directly correspond to DOM attributes of the same name,\n// which will be set to the property's value. These are exceptions:\n//\n//   class:: ?string\n//   A CSS class name or a space-separated set of class names to be\n//   _added_ to the classes that the node already had.\n//\n//   style:: ?string\n//   A string of CSS to be _added_ to the node's existing `style` property.\n//\n//   nodeName:: ?string\n//   When non-null, the target node is wrapped in a DOM element of\n//   this type (and the other attributes are applied to this element).\n\nconst none = [], noSpec = {}\n\n// :: class extends DecorationSource\n// A collection of [decorations](#view.Decoration), organized in\n// such a way that the drawing algorithm can efficiently use and\n// compare them. This is a persistent data structure\u2014it is not\n// modified, updates create a new value.\nexport class DecorationSet {\n  constructor(local, children) {\n    this.local = local && local.length ? local : none\n    this.children = children && children.length ? children : none\n  }\n\n  // :: (Node, [Decoration]) \u2192 DecorationSet\n  // Create a set of decorations, using the structure of the given\n  // document.\n  static create(doc, decorations) {\n    return decorations.length ? buildTree(decorations, doc, 0, noSpec) : empty\n  }\n\n  // :: (?number, ?number, ?(spec: Object) \u2192 bool) \u2192 [Decoration]\n  // Find all decorations in this set which touch the given range\n  // (including decorations that start or end directly at the\n  // boundaries) and match the given predicate on their spec. When\n  // `start` and `end` are omitted, all decorations in the set are\n  // considered. When `predicate` isn't given, all decorations are\n  // assumed to match.\n  find(start, end, predicate) {\n    let result = []\n    this.findInner(start == null ? 0 : start, end == null ? 1e9 : end, result, 0, predicate)\n    return result\n  }\n\n  findInner(start, end, result, offset, predicate) {\n    for (let i = 0; i < this.local.length; i++) {\n      let span = this.local[i]\n      if (span.from <= end && span.to >= start && (!predicate || predicate(span.spec)))\n        result.push(span.copy(span.from + offset, span.to + offset))\n    }\n    for (let i = 0; i < this.children.length; i += 3) {\n      if (this.children[i] < end && this.children[i + 1] > start) {\n        let childOff = this.children[i] + 1\n        this.children[i + 2].findInner(start - childOff, end - childOff, result, offset + childOff, predicate)\n      }\n    }\n  }\n\n  // :: (Mapping, Node, ?Object) \u2192 DecorationSet\n  // Map the set of decorations in response to a change in the\n  // document.\n  //\n  //   options::- An optional set of options.\n  //\n  //     onRemove:: ?(decorationSpec: Object)\n  //     When given, this function will be called for each decoration\n  //     that gets dropped as a result of the mapping, passing the\n  //     spec of that decoration.\n  map(mapping, doc, options) {\n    if (this == empty || mapping.maps.length == 0) return this\n    return this.mapInner(mapping, doc, 0, 0, options || noSpec)\n  }\n\n  mapInner(mapping, node, offset, oldOffset, options) {\n    let newLocal\n    for (let i = 0; i < this.local.length; i++) {\n      let mapped = this.local[i].map(mapping, offset, oldOffset)\n      if (mapped && mapped.type.valid(node, mapped)) (newLocal || (newLocal = [])).push(mapped)\n      else if (options.onRemove) options.onRemove(this.local[i].spec)\n    }\n\n    if (this.children.length)\n      return mapChildren(this.children, newLocal, mapping, node, offset, oldOffset, options)\n    else\n      return newLocal ? new DecorationSet(newLocal.sort(byPos)) : empty\n  }\n\n  // :: (Node, [Decoration]) \u2192 DecorationSet\n  // Add the given array of decorations to the ones in the set,\n  // producing a new set. Needs access to the current document to\n  // create the appropriate tree structure.\n  add(doc, decorations) {\n    if (!decorations.length) return this\n    if (this == empty) return DecorationSet.create(doc, decorations)\n    return this.addInner(doc, decorations, 0)\n  }\n\n  addInner(doc, decorations, offset) {\n    let children, childIndex = 0\n    doc.forEach((childNode, childOffset) => {\n      let baseOffset = childOffset + offset, found\n      if (!(found = takeSpansForNode(decorations, childNode, baseOffset))) return\n\n      if (!children) children = this.children.slice()\n      while (childIndex < children.length && children[childIndex] < childOffset) childIndex += 3\n      if (children[childIndex] == childOffset)\n        children[childIndex + 2] = children[childIndex + 2].addInner(childNode, found, baseOffset + 1)\n      else\n        children.splice(childIndex, 0, childOffset, childOffset + childNode.nodeSize, buildTree(found, childNode, baseOffset + 1, noSpec))\n      childIndex += 3\n    })\n\n    let local = moveSpans(childIndex ? withoutNulls(decorations) : decorations, -offset)\n    for (let i = 0; i < local.length; i++) if (!local[i].type.valid(doc, local[i])) local.splice(i--, 1)\n\n    return new DecorationSet(local.length ? this.local.concat(local).sort(byPos) : this.local,\n                             children || this.children)\n  }\n\n  // :: ([Decoration]) \u2192 DecorationSet\n  // Create a new set that contains the decorations in this set, minus\n  // the ones in the given array.\n  remove(decorations) {\n    if (decorations.length == 0 || this == empty) return this\n    return this.removeInner(decorations, 0)\n  }\n\n  removeInner(decorations, offset) {\n    let children = this.children, local = this.local\n    for (let i = 0; i < children.length; i += 3) {\n      let found, from = children[i] + offset, to = children[i + 1] + offset\n      for (let j = 0, span; j < decorations.length; j++) if (span = decorations[j]) {\n        if (span.from > from && span.to < to) {\n          decorations[j] = null\n          ;(found || (found = [])).push(span)\n        }\n      }\n      if (!found) continue\n      if (children == this.children) children = this.children.slice()\n      let removed = children[i + 2].removeInner(found, from + 1)\n      if (removed != empty) {\n        children[i + 2] = removed\n      } else {\n        children.splice(i, 3)\n        i -= 3\n      }\n    }\n    if (local.length) for (let i = 0, span; i < decorations.length; i++) if (span = decorations[i]) {\n      for (let j = 0; j < local.length; j++) if (local[j].eq(span, offset)) {\n        if (local == this.local) local = this.local.slice()\n        local.splice(j--, 1)\n      }\n    }\n    if (children == this.children && local == this.local) return this\n    return local.length || children.length ? new DecorationSet(local, children) : empty\n  }\n\n  forChild(offset, node) {\n    if (this == empty) return this\n    if (node.isLeaf) return DecorationSet.empty\n\n    let child, local\n    for (let i = 0; i < this.children.length; i += 3) if (this.children[i] >= offset) {\n      if (this.children[i] == offset) child = this.children[i + 2]\n      break\n    }\n    let start = offset + 1, end = start + node.content.size\n    for (let i = 0; i < this.local.length; i++) {\n      let dec = this.local[i]\n      if (dec.from < end && dec.to > start && (dec.type instanceof InlineType)) {\n        let from = Math.max(start, dec.from) - start, to = Math.min(end, dec.to) - start\n        if (from < to) (local || (local = [])).push(dec.copy(from, to))\n      }\n    }\n    if (local) {\n      let localSet = new DecorationSet(local.sort(byPos))\n      return child ? new DecorationGroup([localSet, child]) : localSet\n    }\n    return child || empty\n  }\n\n  eq(other) {\n    if (this == other) return true\n    if (!(other instanceof DecorationSet) ||\n        this.local.length != other.local.length ||\n        this.children.length != other.children.length) return false\n    for (let i = 0; i < this.local.length; i++)\n      if (!this.local[i].eq(other.local[i])) return false\n    for (let i = 0; i < this.children.length; i += 3)\n      if (this.children[i] != other.children[i] ||\n          this.children[i + 1] != other.children[i + 1] ||\n          !this.children[i + 2].eq(other.children[i + 2])) return false\n    return true\n  }\n\n  locals(node) {\n    return removeOverlap(this.localsInner(node))\n  }\n\n  localsInner(node) {\n    if (this == empty) return none\n    if (node.inlineContent || !this.local.some(InlineType.is)) return this.local\n    let result = []\n    for (let i = 0; i < this.local.length; i++) {\n      if (!(this.local[i].type instanceof InlineType))\n        result.push(this.local[i])\n    }\n    return result\n  }\n}\n\n// DecorationSource:: interface\n// An object that can [provide](#view.EditorProps.decorations)\n// decorations. Implemented by [`DecorationSet`](#view.DecorationSet),\n// and passed to [node views](#view.EditorProps.nodeViews).\n//\n//   map:: (Mapping, Node) \u2192 DecorationSource\n//   Map the set of decorations in response to a change in the\n//   document.\n\nconst empty = new DecorationSet()\n\n// :: DecorationSet\n// The empty set of decorations.\nDecorationSet.empty = empty\n\nDecorationSet.removeOverlap = removeOverlap\n\n// :- An abstraction that allows the code dealing with decorations to\n// treat multiple DecorationSet objects as if it were a single object\n// with (a subset of) the same interface.\nclass DecorationGroup {\n  constructor(members) {\n    this.members = members\n  }\n\n  map(mapping, doc) {\n    const mappedDecos = this.members.map(\n      member => member.map(mapping, doc, noSpec)\n    )\n    return DecorationGroup.from(mappedDecos)\n  }\n\n  forChild(offset, child) {\n    if (child.isLeaf) return DecorationSet.empty\n    let found = []\n    for (let i = 0; i < this.members.length; i++) {\n      let result = this.members[i].forChild(offset, child)\n      if (result == empty) continue\n      if (result instanceof DecorationGroup) found = found.concat(result.members)\n      else found.push(result)\n    }\n    return DecorationGroup.from(found)\n  }\n\n  eq(other) {\n    if (!(other instanceof DecorationGroup) ||\n        other.members.length != this.members.length) return false\n    for (let i = 0; i < this.members.length; i++)\n      if (!this.members[i].eq(other.members[i])) return false\n    return true\n  }\n\n  locals(node) {\n    let result, sorted = true\n    for (let i = 0; i < this.members.length; i++) {\n      let locals = this.members[i].localsInner(node)\n      if (!locals.length) continue\n      if (!result) {\n        result = locals\n      } else {\n        if (sorted) {\n          result = result.slice()\n          sorted = false\n        }\n        for (let j = 0; j < locals.length; j++) result.push(locals[j])\n      }\n    }\n    return result ? removeOverlap(sorted ? result : result.sort(byPos)) : none\n  }\n\n  // : ([DecorationSet]) \u2192 union<DecorationSet, DecorationGroup>\n  // Create a group for the given array of decoration sets, or return\n  // a single set when possible.\n  static from(members) {\n    switch (members.length) {\n      case 0: return empty\n      case 1: return members[0]\n      default: return new DecorationGroup(members)\n    }\n  }\n}\n\nfunction mapChildren(oldChildren, newLocal, mapping, node, offset, oldOffset, options) {\n  let children = oldChildren.slice()\n\n  // Mark the children that are directly touched by changes, and\n  // move those that are after the changes.\n  let shift = (oldStart, oldEnd, newStart, newEnd) => {\n    for (let i = 0; i < children.length; i += 3) {\n      let end = children[i + 1], dSize\n      if (end == -1 || oldStart > end + oldOffset) continue\n      if (oldEnd >= children[i] + oldOffset) {\n        children[i + 1] = -1\n      } else if (newStart >= offset && (dSize = (newEnd - newStart) - (oldEnd - oldStart))) {\n        children[i] += dSize\n        children[i + 1] += dSize\n      }\n    }\n  }\n  for (let i = 0; i < mapping.maps.length; i++) mapping.maps[i].forEach(shift)\n\n  // Find the child nodes that still correspond to a single node,\n  // recursively call mapInner on them and update their positions.\n  let mustRebuild = false\n  for (let i = 0; i < children.length; i += 3) if (children[i + 1] == -1) { // Touched nodes\n    let from = mapping.map(oldChildren[i] + oldOffset), fromLocal = from - offset\n    if (fromLocal < 0 || fromLocal >= node.content.size) {\n      mustRebuild = true\n      continue\n    }\n    // Must read oldChildren because children was tagged with -1\n    let to = mapping.map(oldChildren[i + 1] + oldOffset, -1), toLocal = to - offset\n    let {index, offset: childOffset} = node.content.findIndex(fromLocal)\n    let childNode = node.maybeChild(index)\n    if (childNode && childOffset == fromLocal && childOffset + childNode.nodeSize == toLocal) {\n      let mapped = children[i + 2].mapInner(mapping, childNode, from + 1, oldChildren[i] + oldOffset + 1, options)\n      if (mapped != empty) {\n        children[i] = fromLocal\n        children[i + 1] = toLocal\n        children[i + 2] = mapped\n      } else {\n        children[i + 1] = -2\n        mustRebuild = true\n      }\n    } else {\n      mustRebuild = true\n    }\n  }\n\n  // Remaining children must be collected and rebuilt into the appropriate structure\n  if (mustRebuild) {\n    let decorations = mapAndGatherRemainingDecorations(children, oldChildren, newLocal || [], mapping,\n                                                       offset, oldOffset, options)\n    let built = buildTree(decorations, node, 0, options)\n    newLocal = built.local\n    for (let i = 0; i < children.length; i += 3) if (children[i + 1] < 0) {\n      children.splice(i, 3)\n      i -= 3\n    }\n    for (let i = 0, j = 0; i < built.children.length; i += 3) {\n      let from = built.children[i]\n      while (j < children.length && children[j] < from) j += 3\n      children.splice(j, 0, built.children[i], built.children[i + 1], built.children[i + 2])\n    }\n  }\n\n  return new DecorationSet(newLocal && newLocal.sort(byPos), children)\n}\n\nfunction moveSpans(spans, offset) {\n  if (!offset || !spans.length) return spans\n  let result = []\n  for (let i = 0; i < spans.length; i++) {\n    let span = spans[i]\n    result.push(new Decoration(span.from + offset, span.to + offset, span.type))\n  }\n  return result\n}\n\nfunction mapAndGatherRemainingDecorations(children, oldChildren, decorations, mapping, offset, oldOffset, options) {\n  // Gather all decorations from the remaining marked children\n  function gather(set, oldOffset) {\n    for (let i = 0; i < set.local.length; i++) {\n      let mapped = set.local[i].map(mapping, offset, oldOffset)\n      if (mapped) decorations.push(mapped)\n      else if (options.onRemove) options.onRemove(set.local[i].spec)\n    }\n    for (let i = 0; i < set.children.length; i += 3)\n      gather(set.children[i + 2], set.children[i] + oldOffset + 1)\n  }\n  for (let i = 0; i < children.length; i += 3) if (children[i + 1] == -1)\n    gather(children[i + 2], oldChildren[i] + oldOffset + 1)\n\n  return decorations\n}\n\nfunction takeSpansForNode(spans, node, offset) {\n  if (node.isLeaf) return null\n  let end = offset + node.nodeSize, found = null\n  for (let i = 0, span; i < spans.length; i++) {\n    if ((span = spans[i]) && span.from > offset && span.to < end) {\n      ;(found || (found = [])).push(span)\n      spans[i] = null\n    }\n  }\n  return found\n}\n\nfunction withoutNulls(array) {\n  let result = []\n  for (let i = 0; i < array.length; i++)\n    if (array[i] != null) result.push(array[i])\n  return result\n}\n\n// : ([Decoration], Node, number) \u2192 DecorationSet\n// Build up a tree that corresponds to a set of decorations. `offset`\n// is a base offset that should be subtracted from the `from` and `to`\n// positions in the spans (so that we don't have to allocate new spans\n// for recursive calls).\nfunction buildTree(spans, node, offset, options) {\n  let children = [], hasNulls = false\n  node.forEach((childNode, localStart) => {\n    let found = takeSpansForNode(spans, childNode, localStart + offset)\n    if (found) {\n      hasNulls = true\n      let subtree = buildTree(found, childNode, offset + localStart + 1, options)\n      if (subtree != empty)\n        children.push(localStart, localStart + childNode.nodeSize, subtree)\n    }\n  })\n  let locals = moveSpans(hasNulls ? withoutNulls(spans) : spans, -offset).sort(byPos)\n  for (let i = 0; i < locals.length; i++) if (!locals[i].type.valid(node, locals[i])) {\n    if (options.onRemove) options.onRemove(locals[i].spec)\n    locals.splice(i--, 1)\n  }\n  return locals.length || children.length ? new DecorationSet(locals, children) : empty\n}\n\n// : (Decoration, Decoration) \u2192 number\n// Used to sort decorations so that ones with a low start position\n// come first, and within a set with the same start position, those\n// with an smaller end position come first.\nfunction byPos(a, b) {\n  return a.from - b.from || a.to - b.to\n}\n\n// : ([Decoration]) \u2192 [Decoration]\n// Scan a sorted array of decorations for partially overlapping spans,\n// and split those so that only fully overlapping spans are left (to\n// make subsequent rendering easier). Will return the input array if\n// no partially overlapping spans are found (the common case).\nfunction removeOverlap(spans) {\n  let working = spans\n  for (let i = 0; i < working.length - 1; i++) {\n    let span = working[i]\n    if (span.from != span.to) for (let j = i + 1; j < working.length; j++) {\n      let next = working[j]\n      if (next.from == span.from) {\n        if (next.to != span.to) {\n          if (working == spans) working = spans.slice()\n          // Followed by a partially overlapping larger span. Split that\n          // span.\n          working[j] = next.copy(next.from, span.to)\n          insertAhead(working, j + 1, next.copy(span.to, next.to))\n        }\n        continue\n      } else {\n        if (next.from < span.to) {\n          if (working == spans) working = spans.slice()\n          // The end of this one overlaps with a subsequent span. Split\n          // this one.\n          working[i] = span.copy(span.from, next.from)\n          insertAhead(working, j, span.copy(next.from, span.to))\n        }\n        break\n      }\n    }\n  }\n  return working\n}\n\nfunction insertAhead(array, i, deco) {\n  while (i < array.length && byPos(deco, array[i]) > 0) i++\n  array.splice(i, 0, deco)\n}\n\n// : (EditorView) \u2192 union<DecorationSet, DecorationGroup>\n// Get the decorations associated with the current props of a view.\nexport function viewDecorations(view) {\n  let found = []\n  view.someProp(\"decorations\", f => {\n    let result = f(view.state)\n    if (result && result != empty) found.push(result)\n  })\n  if (view.cursorWrapper)\n    found.push(DecorationSet.create(view.state.doc, [view.cursorWrapper.deco]))\n  return DecorationGroup.from(found)\n}\n", "import {NodeSelection} from \"prosemirror-state\"\n\nimport {scrollRectIntoView, posAtCoords, coordsAtPos, endOfTextblock, storeScrollPos,\n        resetScrollPos, focusPreventScroll} from \"./domcoords\"\nimport {docViewDesc} from \"./viewdesc\"\nimport {initInput, destroyInput, dispatchEvent, ensureListeners, clearComposition} from \"./input\"\nimport {selectionToDOM, anchorInRightPlace, syncNodeSelection} from \"./selection\"\nimport {Decoration, viewDecorations} from \"./decoration\"\nimport browser from \"./browser\"\n\nexport {Decoration, DecorationSet} from \"./decoration\"\n\n// Exported for testing\nexport {serializeForClipboard as __serializeForClipboard, parseFromClipboard as __parseFromClipboard} from \"./clipboard\"\nexport {endComposition as __endComposition} from \"./input\"\n\n// ::- An editor view manages the DOM structure that represents an\n// editable document. Its state and behavior are determined by its\n// [props](#view.DirectEditorProps).\nexport class EditorView {\n  // :: (?union<dom.Node, (dom.Node), {mount: dom.Node}>, DirectEditorProps)\n  // Create a view. `place` may be a DOM node that the editor should\n  // be appended to, a function that will place it into the document,\n  // or an object whose `mount` property holds the node to use as the\n  // document container. If it is `null`, the editor will not be added\n  // to the document.\n  constructor(place, props) {\n    this._props = props\n    // :: EditorState\n    // The view's current [state](#state.EditorState).\n    this.state = props.state\n\n    this.directPlugins = props.plugins || []\n    this.directPlugins.forEach(checkStateComponent)\n\n    this.dispatch = this.dispatch.bind(this)\n\n    this._root = null\n    this.focused = false\n    // Kludge used to work around a Chrome bug\n    this.trackWrites = null\n\n    // :: dom.Element\n    // An editable DOM node containing the document. (You probably\n    // should not directly interfere with its content.)\n    this.dom = (place && place.mount) || document.createElement(\"div\")\n    if (place) {\n      if (place.appendChild) place.appendChild(this.dom)\n      else if (place.apply) place(this.dom)\n      else if (place.mount) this.mounted = true\n    }\n\n    // :: bool\n    // Indicates whether the editor is currently [editable](#view.EditorProps.editable).\n    this.editable = getEditable(this)\n    this.markCursor = null\n    this.cursorWrapper = null\n    updateCursorWrapper(this)\n    this.nodeViews = buildNodeViews(this)\n    this.docView = docViewDesc(this.state.doc, computeDocDeco(this), viewDecorations(this), this.dom, this)\n\n    this.lastSelectedViewDesc = null\n    // :: ?{slice: Slice, move: bool}\n    // When editor content is being dragged, this object contains\n    // information about the dragged slice and whether it is being\n    // copied or moved. At any other time, it is null.\n    this.dragging = null\n\n    initInput(this)\n\n    this.prevDirectPlugins = []\n    this.pluginViews = []\n    this.updatePluginViews()\n  }\n\n  // composing:: boolean\n  // Holds `true` when a\n  // [composition](https://developer.mozilla.org/en-US/docs/Mozilla/IME_handling_guide)\n  // is active.\n\n  // :: DirectEditorProps\n  // The view's current [props](#view.EditorProps).\n  get props() {\n    if (this._props.state != this.state) {\n      let prev = this._props\n      this._props = {}\n      for (let name in prev) this._props[name] = prev[name]\n      this._props.state = this.state\n    }\n    return this._props\n  }\n\n  // :: (DirectEditorProps)\n  // Update the view's props. Will immediately cause an update to\n  // the DOM.\n  update(props) {\n    if (props.handleDOMEvents != this._props.handleDOMEvents) ensureListeners(this)\n    this._props = props\n    if (props.plugins) {\n      props.plugins.forEach(checkStateComponent)\n      this.directPlugins = props.plugins\n    }\n    this.updateStateInner(props.state, true)\n  }\n\n  // :: (DirectEditorProps)\n  // Update the view by updating existing props object with the object\n  // given as argument. Equivalent to `view.update(Object.assign({},\n  // view.props, props))`.\n  setProps(props) {\n    let updated = {}\n    for (let name in this._props) updated[name] = this._props[name]\n    updated.state = this.state\n    for (let name in props) updated[name] = props[name]\n    this.update(updated)\n  }\n\n  // :: (EditorState)\n  // Update the editor's `state` prop, without touching any of the\n  // other props.\n  updateState(state) {\n    this.updateStateInner(state, this.state.plugins != state.plugins)\n  }\n\n  updateStateInner(state, reconfigured) {\n    let prev = this.state, redraw = false, updateSel = false\n    // When stored marks are added, stop composition, so that they can\n    // be displayed.\n    if (state.storedMarks && this.composing) {\n      clearComposition(this)\n      updateSel = true\n    }\n    this.state = state\n    if (reconfigured) {\n      let nodeViews = buildNodeViews(this)\n      if (changedNodeViews(nodeViews, this.nodeViews)) {\n        this.nodeViews = nodeViews\n        redraw = true\n      }\n      ensureListeners(this)\n    }\n\n    this.editable = getEditable(this)\n    updateCursorWrapper(this)\n    let innerDeco = viewDecorations(this), outerDeco = computeDocDeco(this)\n\n    let scroll = reconfigured ? \"reset\"\n        : state.scrollToSelection > prev.scrollToSelection ? \"to selection\" : \"preserve\"\n    let updateDoc = redraw || !this.docView.matchesNode(state.doc, outerDeco, innerDeco)\n    if (updateDoc || !state.selection.eq(prev.selection)) updateSel = true\n    let oldScrollPos = scroll == \"preserve\" && updateSel && this.dom.style.overflowAnchor == null && storeScrollPos(this)\n\n    if (updateSel) {\n      this.domObserver.stop()\n      // Work around an issue in Chrome, IE, and Edge where changing\n      // the DOM around an active selection puts it into a broken\n      // state where the thing the user sees differs from the\n      // selection reported by the Selection object (#710, #973,\n      // #1011, #1013, #1035).\n      let forceSelUpdate = updateDoc && (browser.ie || browser.chrome) && !this.composing &&\n          !prev.selection.empty && !state.selection.empty && selectionContextChanged(prev.selection, state.selection)\n      if (updateDoc) {\n        // If the node that the selection points into is written to,\n        // Chrome sometimes starts misreporting the selection, so this\n        // tracks that and forces a selection reset when our update\n        // did write to the node.\n        let chromeKludge = browser.chrome ? (this.trackWrites = this.root.getSelection().focusNode) : null\n        if (redraw || !this.docView.update(state.doc, outerDeco, innerDeco, this)) {\n          this.docView.updateOuterDeco([])\n          this.docView.destroy()\n          this.docView = docViewDesc(state.doc, outerDeco, innerDeco, this.dom, this)\n        }\n        if (chromeKludge && !this.trackWrites) forceSelUpdate = true\n      }\n      // Work around for an issue where an update arriving right between\n      // a DOM selection change and the \"selectionchange\" event for it\n      // can cause a spurious DOM selection update, disrupting mouse\n      // drag selection.\n      if (forceSelUpdate ||\n          !(this.mouseDown && this.domObserver.currentSelection.eq(this.root.getSelection()) && anchorInRightPlace(this))) {\n        selectionToDOM(this, forceSelUpdate)\n      } else {\n        syncNodeSelection(this, state.selection)\n        this.domObserver.setCurSelection()\n      }\n      this.domObserver.start()\n    }\n\n    this.updatePluginViews(prev)\n\n    if (scroll == \"reset\") {\n      this.dom.scrollTop = 0\n    } else if (scroll == \"to selection\") {\n      let startDOM = this.root.getSelection().focusNode\n      if (this.someProp(\"handleScrollToSelection\", f => f(this)))\n        {} // Handled\n      else if (state.selection instanceof NodeSelection)\n        scrollRectIntoView(this, this.docView.domAfterPos(state.selection.from).getBoundingClientRect(), startDOM)\n      else\n        scrollRectIntoView(this, this.coordsAtPos(state.selection.head, 1), startDOM)\n    } else if (oldScrollPos) {\n      resetScrollPos(oldScrollPos)\n    }\n  }\n\n  destroyPluginViews() {\n    let view\n    while (view = this.pluginViews.pop()) if (view.destroy) view.destroy()\n  }\n\n  updatePluginViews(prevState) {\n    if (!prevState || prevState.plugins != this.state.plugins || this.directPlugins != this.prevDirectPlugins) {\n      this.prevDirectPlugins = this.directPlugins\n      this.destroyPluginViews()\n      for (let i = 0; i < this.directPlugins.length; i++) {\n        let plugin = this.directPlugins[i]\n        if (plugin.spec.view) this.pluginViews.push(plugin.spec.view(this))\n      }\n      for (let i = 0; i < this.state.plugins.length; i++) {\n        let plugin = this.state.plugins[i]\n        if (plugin.spec.view) this.pluginViews.push(plugin.spec.view(this))\n      }\n    } else {\n      for (let i = 0; i < this.pluginViews.length; i++) {\n        let pluginView = this.pluginViews[i]\n        if (pluginView.update) pluginView.update(this, prevState)\n      }\n    }\n  }\n\n  // :: (string, ?(prop: *) \u2192 *) \u2192 *\n  // Goes over the values of a prop, first those provided directly,\n  // then those from plugins given to the view, then from plugins in\n  // the state (in order), and calls `f` every time a non-undefined\n  // value is found. When `f` returns a truthy value, that is\n  // immediately returned. When `f` isn't provided, it is treated as\n  // the identity function (the prop value is returned directly).\n  someProp(propName, f) {\n    let prop = this._props && this._props[propName], value\n    if (prop != null && (value = f ? f(prop) : prop)) return value\n    for (let i = 0; i < this.directPlugins.length; i++) {\n      let prop = this.directPlugins[i].props[propName]\n      if (prop != null && (value = f ? f(prop) : prop)) return value\n    }\n    let plugins = this.state.plugins\n    if (plugins) for (let i = 0; i < plugins.length; i++) {\n      let prop = plugins[i].props[propName]\n      if (prop != null && (value = f ? f(prop) : prop)) return value\n    }\n  }\n\n  // :: () \u2192 bool\n  // Query whether the view has focus.\n  hasFocus() {\n    return this.root.activeElement == this.dom\n  }\n\n  // :: ()\n  // Focus the editor.\n  focus() {\n    this.domObserver.stop()\n    if (this.editable) focusPreventScroll(this.dom)\n    selectionToDOM(this)\n    this.domObserver.start()\n  }\n\n  // :: union<dom.Document, dom.DocumentFragment>\n  // Get the document root in which the editor exists. This will\n  // usually be the top-level `document`, but might be a [shadow\n  // DOM](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Shadow_DOM)\n  // root if the editor is inside one.\n  get root() {\n    let cached = this._root\n    if (cached == null) for (let search = this.dom.parentNode; search; search = search.parentNode) {\n      if (search.nodeType == 9 || (search.nodeType == 11 && search.host)) {\n        if (!search.getSelection) Object.getPrototypeOf(search).getSelection = () => document.getSelection()\n        return this._root = search\n      }\n    }\n    return cached || document\n  }\n\n  // :: ({left: number, top: number}) \u2192 ?{pos: number, inside: number}\n  // Given a pair of viewport coordinates, return the document\n  // position that corresponds to them. May return null if the given\n  // coordinates aren't inside of the editor. When an object is\n  // returned, its `pos` property is the position nearest to the\n  // coordinates, and its `inside` property holds the position of the\n  // inner node that the position falls inside of, or -1 if it is at\n  // the top level, not in any node.\n  posAtCoords(coords) {\n    return posAtCoords(this, coords)\n  }\n\n  // :: (number, number) \u2192 {left: number, right: number, top: number, bottom: number}\n  // Returns the viewport rectangle at a given document position.\n  // `left` and `right` will be the same number, as this returns a\n  // flat cursor-ish rectangle. If the position is between two things\n  // that aren't directly adjacent, `side` determines which element is\n  // used. When < 0, the element before the position is used,\n  // otherwise the element after.\n  coordsAtPos(pos, side = 1) {\n    return coordsAtPos(this, pos, side)\n  }\n\n  // :: (number, number) \u2192 {node: dom.Node, offset: number}\n  // Find the DOM position that corresponds to the given document\n  // position. When `side` is negative, find the position as close as\n  // possible to the content before the position. When positive,\n  // prefer positions close to the content after the position. When\n  // zero, prefer as shallow a position as possible.\n  //\n  // Note that you should **not** mutate the editor's internal DOM,\n  // only inspect it (and even that is usually not necessary).\n  domAtPos(pos, side = 0) {\n    return this.docView.domFromPos(pos, side)\n  }\n\n  // :: (number) \u2192 ?dom.Node\n  // Find the DOM node that represents the document node after the\n  // given position. May return `null` when the position doesn't point\n  // in front of a node or if the node is inside an opaque node view.\n  //\n  // This is intended to be able to call things like\n  // `getBoundingClientRect` on that DOM node. Do **not** mutate the\n  // editor DOM directly, or add styling this way, since that will be\n  // immediately overriden by the editor as it redraws the node.\n  nodeDOM(pos) {\n    let desc = this.docView.descAt(pos)\n    return desc ? desc.nodeDOM : null\n  }\n\n  // :: (dom.Node, number, ?number) \u2192 number\n  // Find the document position that corresponds to a given DOM\n  // position. (Whenever possible, it is preferable to inspect the\n  // document structure directly, rather than poking around in the\n  // DOM, but sometimes\u2014for example when interpreting an event\n  // target\u2014you don't have a choice.)\n  //\n  // The `bias` parameter can be used to influence which side of a DOM\n  // node to use when the position is inside a leaf node.\n  posAtDOM(node, offset, bias = -1) {\n    let pos = this.docView.posFromDOM(node, offset, bias)\n    if (pos == null) throw new RangeError(\"DOM position not inside the editor\")\n    return pos\n  }\n\n  // :: (union<\"up\", \"down\", \"left\", \"right\", \"forward\", \"backward\">, ?EditorState) \u2192 bool\n  // Find out whether the selection is at the end of a textblock when\n  // moving in a given direction. When, for example, given `\"left\"`,\n  // it will return true if moving left from the current cursor\n  // position would leave that position's parent textblock. Will apply\n  // to the view's current state by default, but it is possible to\n  // pass a different state.\n  endOfTextblock(dir, state) {\n    return endOfTextblock(this, state || this.state, dir)\n  }\n\n  // :: ()\n  // Removes the editor from the DOM and destroys all [node\n  // views](#view.NodeView).\n  destroy() {\n    if (!this.docView) return\n    destroyInput(this)\n    this.destroyPluginViews()\n    if (this.mounted) {\n      this.docView.update(this.state.doc, [], viewDecorations(this), this)\n      this.dom.textContent = \"\"\n    } else if (this.dom.parentNode) {\n      this.dom.parentNode.removeChild(this.dom)\n    }\n    this.docView.destroy()\n    this.docView = null\n  }\n\n  // :: boolean\n  // This is true when the view has been\n  // [destroyed](#view.EditorView.destroy) (and thus should not be\n  // used anymore).\n  get isDestroyed() {\n    return this.docView == null\n  }\n\n  // Used for testing.\n  dispatchEvent(event) {\n    return dispatchEvent(this, event)\n  }\n\n  // :: (Transaction)\n  // Dispatch a transaction. Will call\n  // [`dispatchTransaction`](#view.DirectEditorProps.dispatchTransaction)\n  // when given, and otherwise defaults to applying the transaction to\n  // the current state and calling\n  // [`updateState`](#view.EditorView.updateState) with the result.\n  // This method is bound to the view instance, so that it can be\n  // easily passed around.\n  dispatch(tr) {\n    let dispatchTransaction = this._props.dispatchTransaction\n    if (dispatchTransaction) dispatchTransaction.call(this, tr)\n    else this.updateState(this.state.apply(tr))\n  }\n}\n\nfunction computeDocDeco(view) {\n  let attrs = Object.create(null)\n  attrs.class = \"ProseMirror\"\n  attrs.contenteditable = String(view.editable)\n  attrs.translate = \"no\"\n\n  view.someProp(\"attributes\", value => {\n    if (typeof value == \"function\") value = value(view.state)\n    if (value) for (let attr in value) {\n      if (attr == \"class\")\n        attrs.class += \" \" + value[attr]\n      if (attr == \"style\") {\n        attrs.style = (attrs.style ? attrs.style + \";\" : \"\") + value[attr]\n      }\n      else if (!attrs[attr] && attr != \"contenteditable\" && attr != \"nodeName\")\n        attrs[attr] = String(value[attr])\n    }\n  })\n\n  return [Decoration.node(0, view.state.doc.content.size, attrs)]\n}\n\nfunction updateCursorWrapper(view) {\n  if (view.markCursor) {\n    let dom = document.createElement(\"img\")\n    dom.className = \"ProseMirror-separator\"\n    dom.setAttribute(\"mark-placeholder\", \"true\")\n    view.cursorWrapper = {dom, deco: Decoration.widget(view.state.selection.head, dom, {raw: true, marks: view.markCursor})}\n  } else {\n    view.cursorWrapper = null\n  }\n}\n\nfunction getEditable(view) {\n  return !view.someProp(\"editable\", value => value(view.state) === false)\n}\n\nfunction selectionContextChanged(sel1, sel2) {\n  let depth = Math.min(sel1.$anchor.sharedDepth(sel1.head), sel2.$anchor.sharedDepth(sel2.head))\n  return sel1.$anchor.start(depth) != sel2.$anchor.start(depth)\n}\n\nfunction buildNodeViews(view) {\n  let result = {}\n  view.someProp(\"nodeViews\", obj => {\n    for (let prop in obj) if (!Object.prototype.hasOwnProperty.call(result, prop))\n      result[prop] = obj[prop]\n  })\n  return result\n}\n\nfunction changedNodeViews(a, b) {\n  let nA = 0, nB = 0\n  for (let prop in a) {\n    if (a[prop] != b[prop]) return true\n    nA++\n  }\n  for (let _ in b) nB++\n  return nA != nB\n}\n\nfunction checkStateComponent(plugin) {\n  if (plugin.spec.state || plugin.spec.filterTransaction || plugin.spec.appendTransaction)\n    throw new RangeError(\"Plugins passed directly to the view must not have a state component\")\n}\n\n// EditorProps:: interface\n//\n// Props are configuration values that can be passed to an editor view\n// or included in a plugin. This interface lists the supported props.\n//\n// The various event-handling functions may all return `true` to\n// indicate that they handled the given event. The view will then take\n// care to call `preventDefault` on the event, except with\n// `handleDOMEvents`, where the handler itself is responsible for that.\n//\n// How a prop is resolved depends on the prop. Handler functions are\n// called one at a time, starting with the base props and then\n// searching through the plugins (in order of appearance) until one of\n// them returns true. For some props, the first plugin that yields a\n// value gets precedence.\n//\n//   handleDOMEvents:: ?Object<(view: EditorView, event: dom.Event) \u2192 bool>\n//   Can be an object mapping DOM event type names to functions that\n//   handle them. Such functions will be called before any handling\n//   ProseMirror does of events fired on the editable DOM element.\n//   Contrary to the other event handling props, when returning true\n//   from such a function, you are responsible for calling\n//   `preventDefault` yourself (or not, if you want to allow the\n//   default behavior).\n//\n//   handleKeyDown:: ?(view: EditorView, event: dom.KeyboardEvent) \u2192 bool\n//   Called when the editor receives a `keydown` event.\n//\n//   handleKeyPress:: ?(view: EditorView, event: dom.KeyboardEvent) \u2192 bool\n//   Handler for `keypress` events.\n//\n//   handleTextInput:: ?(view: EditorView, from: number, to: number, text: string) \u2192 bool\n//   Whenever the user directly input text, this handler is called\n//   before the input is applied. If it returns `true`, the default\n//   behavior of actually inserting the text is suppressed.\n//\n//   handleClickOn:: ?(view: EditorView, pos: number, node: Node, nodePos: number, event: dom.MouseEvent, direct: bool) \u2192 bool\n//   Called for each node around a click, from the inside out. The\n//   `direct` flag will be true for the inner node.\n//\n//   handleClick:: ?(view: EditorView, pos: number, event: dom.MouseEvent) \u2192 bool\n//   Called when the editor is clicked, after `handleClickOn` handlers\n//   have been called.\n//\n//   handleDoubleClickOn:: ?(view: EditorView, pos: number, node: Node, nodePos: number, event: dom.MouseEvent, direct: bool) \u2192 bool\n//   Called for each node around a double click.\n//\n//   handleDoubleClick:: ?(view: EditorView, pos: number, event: dom.MouseEvent) \u2192 bool\n//   Called when the editor is double-clicked, after `handleDoubleClickOn`.\n//\n//   handleTripleClickOn:: ?(view: EditorView, pos: number, node: Node, nodePos: number, event: dom.MouseEvent, direct: bool) \u2192 bool\n//   Called for each node around a triple click.\n//\n//   handleTripleClick:: ?(view: EditorView, pos: number, event: dom.MouseEvent) \u2192 bool\n//   Called when the editor is triple-clicked, after `handleTripleClickOn`.\n//\n//   handlePaste:: ?(view: EditorView, event: dom.ClipboardEvent, slice: Slice) \u2192 bool\n//   Can be used to override the behavior of pasting. `slice` is the\n//   pasted content parsed by the editor, but you can directly access\n//   the event to get at the raw content.\n//\n//   handleDrop:: ?(view: EditorView, event: dom.Event, slice: Slice, moved: bool) \u2192 bool\n//   Called when something is dropped on the editor. `moved` will be\n//   true if this drop moves from the current selection (which should\n//   thus be deleted).\n//\n//   handleScrollToSelection:: ?(view: EditorView) \u2192 bool\n//   Called when the view, after updating its state, tries to scroll\n//   the selection into view. A handler function may return false to\n//   indicate that it did not handle the scrolling and further\n//   handlers or the default behavior should be tried.\n//\n//   createSelectionBetween:: ?(view: EditorView, anchor: ResolvedPos, head: ResolvedPos) \u2192 ?Selection\n//   Can be used to override the way a selection is created when\n//   reading a DOM selection between the given anchor and head.\n//\n//   domParser:: ?DOMParser\n//   The [parser](#model.DOMParser) to use when reading editor changes\n//   from the DOM. Defaults to calling\n//   [`DOMParser.fromSchema`](#model.DOMParser^fromSchema) on the\n//   editor's schema.\n//\n//   transformPastedHTML:: ?(html: string) \u2192 string\n//   Can be used to transform pasted HTML text, _before_ it is parsed,\n//   for example to clean it up.\n//\n//   clipboardParser:: ?DOMParser\n//   The [parser](#model.DOMParser) to use when reading content from\n//   the clipboard. When not given, the value of the\n//   [`domParser`](#view.EditorProps.domParser) prop is used.\n//\n//   transformPastedText:: ?(text: string, plain: bool) \u2192 string\n//   Transform pasted plain text. The `plain` flag will be true when\n//   the text is pasted as plain text.\n//\n//   clipboardTextParser:: ?(text: string, $context: ResolvedPos, plain: bool) \u2192 Slice\n//   A function to parse text from the clipboard into a document\n//   slice. Called after\n//   [`transformPastedText`](#view.EditorProps.transformPastedText).\n//   The default behavior is to split the text into lines, wrap them\n//   in `<p>` tags, and call\n//   [`clipboardParser`](#view.EditorProps.clipboardParser) on it.\n//   The `plain` flag will be true when the text is pasted as plain text.\n//\n//   transformPasted:: ?(Slice) \u2192 Slice\n//   Can be used to transform pasted content before it is applied to\n//   the document.\n//\n//   nodeViews:: ?Object<(node: Node, view: EditorView, getPos: () \u2192 number, decorations: [Decoration], innerDecorations: DecorationSource) \u2192 NodeView>\n//   Allows you to pass custom rendering and behavior logic for nodes\n//   and marks. Should map node and mark names to constructor\n//   functions that produce a [`NodeView`](#view.NodeView) object\n//   implementing the node's display behavior. For nodes, the third\n//   argument `getPos` is a function that can be called to get the\n//   node's current position, which can be useful when creating\n//   transactions to update it. For marks, the third argument is a\n//   boolean that indicates whether the mark's content is inline.\n//\n//   `decorations` is an array of node or inline decorations that are\n//   active around the node. They are automatically drawn in the\n//   normal way, and you will usually just want to ignore this, but\n//   they can also be used as a way to provide context information to\n//   the node view without adding it to the document itself.\n//\n//   `innerDecorations` holds the decorations for the node's content.\n//   You can safely ignore this if your view has no content or a\n//   `contentDOM` property, since the editor will draw the decorations\n//   on the content. But if you, for example, want to create a nested\n//   editor with the content, it may make sense to provide it with the\n//   inner decorations.\n//\n//   clipboardSerializer:: ?DOMSerializer\n//   The DOM serializer to use when putting content onto the\n//   clipboard. If not given, the result of\n//   [`DOMSerializer.fromSchema`](#model.DOMSerializer^fromSchema)\n//   will be used.\n//\n//   clipboardTextSerializer:: ?(Slice) \u2192 string\n//   A function that will be called to get the text for the current\n//   selection when copying text to the clipboard. By default, the\n//   editor will use [`textBetween`](#model.Node.textBetween) on the\n//   selected range.\n//\n//   decorations:: ?(state: EditorState) \u2192 ?DecorationSource\n//   A set of [document decorations](#view.Decoration) to show in the\n//   view.\n//\n//   editable:: ?(state: EditorState) \u2192 bool\n//   When this returns false, the content of the view is not directly\n//   editable.\n//\n//   attributes:: ?union<Object<string>, (EditorState) \u2192 ?Object<string>>\n//   Control the DOM attributes of the editable element. May be either\n//   an object or a function going from an editor state to an object.\n//   By default, the element will get a class `\"ProseMirror\"`, and\n//   will have its `contentEditable` attribute determined by the\n//   [`editable` prop](#view.EditorProps.editable). Additional classes\n//   provided here will be added to the class. For other attributes,\n//   the value provided first (as in\n//   [`someProp`](#view.EditorView.someProp)) will be used.\n//\n//   scrollThreshold:: ?union<number, {top: number, right: number, bottom: number, left: number}>\n//   Determines the distance (in pixels) between the cursor and the\n//   end of the visible viewport at which point, when scrolling the\n//   cursor into view, scrolling takes place. Defaults to 0.\n//\n//   scrollMargin:: ?union<number, {top: number, right: number, bottom: number, left: number}>\n//   Determines the extra space (in pixels) that is left above or\n//   below the cursor when it is scrolled into view. Defaults to 5.\n\n// DirectEditorProps:: interface extends EditorProps\n//\n// The props object given directly to the editor view supports two\n// fields that can't be used in plugins:\n//\n//   state:: EditorState\n//   The current state of the editor.\n//\n//   plugins:: [Plugin]\n//   A set of plugins to use in the view, applying their [plugin\n//   view](#state.PluginSpec.view) and\n//   [props](#state.PluginSpec.props). Passing plugins with a state\n//   component (a [state field](#state.PluginSpec.state) field or a\n//   [transaction](#state.PluginSpec.filterTransaction) filter or\n//   appender) will result in an error, since such plugins must be\n//   present in the state to work.\n//\n//   dispatchTransaction:: ?(tr: Transaction)\n//   The callback over which to send transactions (state updates)\n//   produced by the view. If you specify this, you probably want to\n//   make sure this ends up calling the view's\n//   [`updateState`](#view.EditorView.updateState) method with a new\n//   state that has the transaction\n//   [applied](#state.EditorState.apply). The callback will be bound to have\n//   the view instance as its `this` binding.\n", "export var base = {\n  8: \"Backspace\",\n  9: \"Tab\",\n  10: \"Enter\",\n  12: \"NumLock\",\n  13: \"Enter\",\n  16: \"Shift\",\n  17: \"Control\",\n  18: \"Alt\",\n  20: \"CapsLock\",\n  27: \"Escape\",\n  32: \" \",\n  33: \"PageUp\",\n  34: \"PageDown\",\n  35: \"End\",\n  36: \"Home\",\n  37: \"ArrowLeft\",\n  38: \"ArrowUp\",\n  39: \"ArrowRight\",\n  40: \"ArrowDown\",\n  44: \"PrintScreen\",\n  45: \"Insert\",\n  46: \"Delete\",\n  59: \";\",\n  61: \"=\",\n  91: \"Meta\",\n  92: \"Meta\",\n  106: \"*\",\n  107: \"+\",\n  108: \",\",\n  109: \"-\",\n  110: \".\",\n  111: \"/\",\n  144: \"NumLock\",\n  145: \"ScrollLock\",\n  160: \"Shift\",\n  161: \"Shift\",\n  162: \"Control\",\n  163: \"Control\",\n  164: \"Alt\",\n  165: \"Alt\",\n  173: \"-\",\n  186: \";\",\n  187: \"=\",\n  188: \",\",\n  189: \"-\",\n  190: \".\",\n  191: \"/\",\n  192: \"`\",\n  219: \"[\",\n  220: \"\\\\\",\n  221: \"]\",\n  222: \"'\",\n  229: \"q\"\n}\n\nexport var shift = {\n  48: \")\",\n  49: \"!\",\n  50: \"@\",\n  51: \"#\",\n  52: \"$\",\n  53: \"%\",\n  54: \"^\",\n  55: \"&\",\n  56: \"*\",\n  57: \"(\",\n  59: \":\",\n  61: \"+\",\n  173: \"_\",\n  186: \":\",\n  187: \"+\",\n  188: \"<\",\n  189: \"_\",\n  190: \">\",\n  191: \"?\",\n  192: \"~\",\n  219: \"{\",\n  220: \"|\",\n  221: \"}\",\n  222: \"\\\"\",\n  229: \"Q\"\n}\n\nvar chrome = typeof navigator != \"undefined\" && /Chrome\\/(\\d+)/.exec(navigator.userAgent)\nvar safari = typeof navigator != \"undefined\" && /Apple Computer/.test(navigator.vendor)\nvar gecko = typeof navigator != \"undefined\" && /Gecko\\/\\d+/.test(navigator.userAgent)\nvar mac = typeof navigator != \"undefined\" && /Mac/.test(navigator.platform)\nvar ie = typeof navigator != \"undefined\" && /MSIE \\d|Trident\\/(?:[7-9]|\\d{2,})\\..*rv:(\\d+)/.exec(navigator.userAgent)\nvar brokenModifierNames = chrome && (mac || +chrome[1] < 57) || gecko && mac\n\n// Fill in the digit keys\nfor (var i = 0; i < 10; i++) base[48 + i] = base[96 + i] = String(i)\n\n// The function keys\nfor (var i = 1; i <= 24; i++) base[i + 111] = \"F\" + i\n\n// And the alphabetic keys\nfor (var i = 65; i <= 90; i++) {\n  base[i] = String.fromCharCode(i + 32)\n  shift[i] = String.fromCharCode(i)\n}\n\n// For each code that doesn't have a shift-equivalent, copy the base name\nfor (var code in base) if (!shift.hasOwnProperty(code)) shift[code] = base[code]\n\nexport function keyName(event) {\n  // Don't trust event.key in Chrome when there are modifiers until\n  // they fix https://bugs.chromium.org/p/chromium/issues/detail?id=633838\n  var ignoreKey = brokenModifierNames && (event.ctrlKey || event.altKey || event.metaKey) ||\n    (safari || ie) && event.shiftKey && event.key && event.key.length == 1\n  var name = (!ignoreKey && event.key) ||\n    (event.shiftKey ? shift : base)[event.keyCode] ||\n    event.key || \"Unidentified\"\n  // Edge sometimes produces wrong names (Issue #3)\n  if (name == \"Esc\") name = \"Escape\"\n  if (name == \"Del\") name = \"Delete\"\n  // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/8860571/\n  if (name == \"Left\") name = \"ArrowLeft\"\n  if (name == \"Up\") name = \"ArrowUp\"\n  if (name == \"Right\") name = \"ArrowRight\"\n  if (name == \"Down\") name = \"ArrowDown\"\n  return name\n}\n", "import {base, keyName} from \"w3c-keyname\"\nimport {Plugin} from \"prosemirror-state\"\n\n// declare global: navigator\n\nconst mac = typeof navigator != \"undefined\" ? /Mac|iP(hone|[oa]d)/.test(navigator.platform) : false\n\nfunction normalizeKeyName(name) {\n  let parts = name.split(/-(?!$)/), result = parts[parts.length - 1]\n  if (result == \"Space\") result = \" \"\n  let alt, ctrl, shift, meta\n  for (let i = 0; i < parts.length - 1; i++) {\n    let mod = parts[i]\n    if (/^(cmd|meta|m)$/i.test(mod)) meta = true\n    else if (/^a(lt)?$/i.test(mod)) alt = true\n    else if (/^(c|ctrl|control)$/i.test(mod)) ctrl = true\n    else if (/^s(hift)?$/i.test(mod)) shift = true\n    else if (/^mod$/i.test(mod)) { if (mac) meta = true; else ctrl = true }\n    else throw new Error(\"Unrecognized modifier name: \" + mod)\n  }\n  if (alt) result = \"Alt-\" + result\n  if (ctrl) result = \"Ctrl-\" + result\n  if (meta) result = \"Meta-\" + result\n  if (shift) result = \"Shift-\" + result\n  return result\n}\n\nfunction normalize(map) {\n  let copy = Object.create(null)\n  for (let prop in map) copy[normalizeKeyName(prop)] = map[prop]\n  return copy\n}\n\nfunction modifiers(name, event, shift) {\n  if (event.altKey) name = \"Alt-\" + name\n  if (event.ctrlKey) name = \"Ctrl-\" + name\n  if (event.metaKey) name = \"Meta-\" + name\n  if (shift !== false && event.shiftKey) name = \"Shift-\" + name\n  return name\n}\n\n// :: (Object) \u2192 Plugin\n// Create a keymap plugin for the given set of bindings.\n//\n// Bindings should map key names to [command](#commands)-style\n// functions, which will be called with `(EditorState, dispatch,\n// EditorView)` arguments, and should return true when they've handled\n// the key. Note that the view argument isn't part of the command\n// protocol, but can be used as an escape hatch if a binding needs to\n// directly interact with the UI.\n//\n// Key names may be strings like `\"Shift-Ctrl-Enter\"`\u2014a key\n// identifier prefixed with zero or more modifiers. Key identifiers\n// are based on the strings that can appear in\n// [`KeyEvent.key`](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key).\n// Use lowercase letters to refer to letter keys (or uppercase letters\n// if you want shift to be held). You may use `\"Space\"` as an alias\n// for the `\" \"` name.\n//\n// Modifiers can be given in any order. `Shift-` (or `s-`), `Alt-` (or\n// `a-`), `Ctrl-` (or `c-` or `Control-`) and `Cmd-` (or `m-` or\n// `Meta-`) are recognized. For characters that are created by holding\n// shift, the `Shift-` prefix is implied, and should not be added\n// explicitly.\n//\n// You can use `Mod-` as a shorthand for `Cmd-` on Mac and `Ctrl-` on\n// other platforms.\n//\n// You can add multiple keymap plugins to an editor. The order in\n// which they appear determines their precedence (the ones early in\n// the array get to dispatch first).\nexport function keymap(bindings) {\n  return new Plugin({props: {handleKeyDown: keydownHandler(bindings)}})\n}\n\n// :: (Object) \u2192 (view: EditorView, event: dom.Event) \u2192 bool\n// Given a set of bindings (using the same format as\n// [`keymap`](#keymap.keymap)), return a [keydown\n// handler](#view.EditorProps.handleKeyDown) that handles them.\nexport function keydownHandler(bindings) {\n  let map = normalize(bindings)\n  return function(view, event) {\n    let name = keyName(event), isChar = name.length == 1 && name != \" \", baseName\n    let direct = map[modifiers(name, event, !isChar)]\n    if (direct && direct(view.state, view.dispatch, view)) return true\n    if (isChar && (event.shiftKey || event.altKey || event.metaKey || name.charCodeAt(0) > 127) &&\n        (baseName = base[event.keyCode]) && baseName != name) {\n      // Try falling back to the keyCode when there's a modifier\n      // active or the character produced isn't ASCII, and our table\n      // produces a different name from the the keyCode. See #668,\n      // #1060\n      let fromCode = map[modifiers(baseName, event, true)]\n      if (fromCode && fromCode(view.state, view.dispatch, view)) return true\n    } else if (isChar && event.shiftKey) {\n      // Otherwise, if shift is active, also try the binding with the\n      // Shift- prefix enabled. See #997\n      let withShift = map[modifiers(name, event, true)]\n      if (withShift && withShift(view.state, view.dispatch, view)) return true\n    }\n    return false\n  }\n}\n", "// see: https://github.com/mesqueeb/is-what/blob/88d6e4ca92fb2baab6003c54e02eedf4e729e5ab/src/index.ts\n\nfunction getType(value: any): string {\n  return Object.prototype.toString.call(value).slice(8, -1)\n}\n\nexport function isPlainObject(value: any): value is Record<string, any> {\n  if (getType(value) !== 'Object') {\n    return false\n  }\n\n  return value.constructor === Object && Object.getPrototypeOf(value) === Object.prototype\n}\n", "import { isPlainObject } from './isPlainObject'\n\nexport function mergeDeep(target: Record<string, any>, source: Record<string, any>): Record<string, any> {\n  const output = { ...target }\n\n  if (isPlainObject(target) && isPlainObject(source)) {\n    Object.keys(source).forEach(key => {\n      if (isPlainObject(source[key])) {\n        if (!(key in target)) {\n          Object.assign(output, { [key]: source[key] })\n        } else {\n          output[key] = mergeDeep(target[key], source[key])\n        }\n      } else {\n        Object.assign(output, { [key]: source[key] })\n      }\n    })\n  }\n\n  return output\n}\n", "export function isFunction(value: any): value is Function {\n  return typeof value === 'function'\n}\n", "import { MaybeReturnType } from '../types'\nimport { isFunction } from './isFunction'\n\n/**\n * Optionally calls `value` as a function.\n * Otherwise it is returned directly.\n * @param value Function or any value.\n * @param context Optional context to bind to function.\n * @param props Optional props to pass to function.\n */\nexport function callOrReturn<T>(value: T, context: any = undefined, ...props: any[]): MaybeReturnType<T> {\n  if (isFunction(value)) {\n    if (context) {\n      return value.bind(context)(...props)\n    }\n\n    return value(...props)\n  }\n\n  return value as MaybeReturnType<T>\n}\n", "import { AnyExtension, RemoveThis, MaybeThisParameterType } from '../types'\n\nexport function getExtensionField<T = any>(\n  extension: AnyExtension,\n  field: string,\n  context?: Omit<MaybeThisParameterType<T>, 'parent'>,\n): RemoveThis<T> {\n\n  if (extension.config[field] === undefined && extension.parent) {\n    return getExtensionField(extension.parent, field, context)\n  }\n\n  if (typeof extension.config[field] === 'function') {\n    const value = extension.config[field].bind({\n      ...context,\n      parent: extension.parent\n        ? getExtensionField(extension.parent, field, context)\n        : null,\n    })\n\n    return value\n  }\n\n  return extension.config[field]\n}\n", "import { Plugin, Transaction } from 'prosemirror-state'\nimport { InputRule } from './InputRule'\nimport { PasteRule } from './PasteRule'\nimport { Editor } from './Editor'\nimport { Node } from './Node'\nimport { Mark } from './Mark'\nimport { mergeDeep } from './utilities/mergeDeep'\nimport { callOrReturn } from './utilities/callOrReturn'\nimport { getExtensionField } from './helpers/getExtensionField'\nimport {\n  AnyConfig,\n  Extensions,\n  GlobalAttributes,\n  RawCommands,\n  ParentConfig,\n  KeyboardShortcutCommand,\n} from './types'\nimport { ExtensionConfig } from '.'\n\ndeclare module '@tiptap/core' {\n  interface ExtensionConfig<Options = any, Storage = any> {\n    [key: string]: any;\n\n    /**\n     * Name\n     */\n    name: string,\n\n    /**\n     * Priority\n     */\n    priority?: number,\n\n    /**\n     * Default options\n     */\n    defaultOptions?: Options,\n\n    /**\n     * Default Options\n     */\n    addOptions?: (this: {\n      name: string,\n      parent: Exclude<ParentConfig<ExtensionConfig<Options, Storage>>['addOptions'], undefined>,\n    }) => Options,\n\n    /**\n     * Default Storage\n     */\n    addStorage?: (this: {\n      name: string,\n      options: Options,\n      parent: Exclude<ParentConfig<ExtensionConfig<Options, Storage>>['addStorage'], undefined>,\n    }) => Storage,\n\n    /**\n     * Global attributes\n     */\n    addGlobalAttributes?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<ExtensionConfig<Options, Storage>>['addGlobalAttributes'],\n    }) => GlobalAttributes | {},\n\n    /**\n     * Raw\n     */\n    addCommands?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      parent: ParentConfig<ExtensionConfig<Options, Storage>>['addCommands'],\n    }) => Partial<RawCommands>,\n\n    /**\n     * Keyboard shortcuts\n     */\n    addKeyboardShortcuts?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      parent: ParentConfig<ExtensionConfig<Options, Storage>>['addKeyboardShortcuts'],\n    }) => {\n      [key: string]: KeyboardShortcutCommand,\n    },\n\n    /**\n     * Input rules\n     */\n    addInputRules?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      parent: ParentConfig<ExtensionConfig<Options, Storage>>['addInputRules'],\n    }) => InputRule[],\n\n    /**\n     * Paste rules\n     */\n    addPasteRules?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      parent: ParentConfig<ExtensionConfig<Options, Storage>>['addPasteRules'],\n    }) => PasteRule[],\n\n    /**\n     * ProseMirror plugins\n     */\n    addProseMirrorPlugins?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      parent: ParentConfig<ExtensionConfig<Options, Storage>>['addProseMirrorPlugins'],\n    }) => Plugin[],\n\n    /**\n     * Extensions\n     */\n    addExtensions?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<ExtensionConfig<Options, Storage>>['addExtensions'],\n    }) => Extensions,\n\n    /**\n     * Extend Node Schema\n     */\n    extendNodeSchema?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        parent: ParentConfig<ExtensionConfig<Options, Storage>>['extendNodeSchema'],\n      },\n      extension: Node,\n    ) => Record<string, any>) | null,\n\n    /**\n     * Extend Mark Schema\n     */\n    extendMarkSchema?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        parent: ParentConfig<ExtensionConfig<Options, Storage>>['extendMarkSchema'],\n      },\n      extension: Mark,\n    ) => Record<string, any>) | null,\n\n    /**\n     * The editor is not ready yet.\n     */\n    onBeforeCreate?: ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      parent: ParentConfig<ExtensionConfig<Options, Storage>>['onBeforeCreate'],\n    }) => void) | null,\n\n    /**\n     * The editor is ready.\n     */\n    onCreate?: ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      parent: ParentConfig<ExtensionConfig<Options, Storage>>['onCreate'],\n    }) => void) | null,\n\n    /**\n     * The content has changed.\n     */\n    onUpdate?: ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      parent: ParentConfig<ExtensionConfig<Options, Storage>>['onUpdate'],\n    }) => void) | null,\n\n    /**\n     * The selection has changed.\n     */\n    onSelectionUpdate?: ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      parent: ParentConfig<ExtensionConfig<Options, Storage>>['onSelectionUpdate'],\n    }) => void) | null,\n\n    /**\n     * The editor state has changed.\n     */\n    onTransaction?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        editor: Editor,\n        parent: ParentConfig<ExtensionConfig<Options, Storage>>['onTransaction'],\n      },\n      props: {\n        transaction: Transaction,\n      },\n    ) => void) | null,\n\n    /**\n     * The editor is focused.\n     */\n    onFocus?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        editor: Editor,\n        parent: ParentConfig<ExtensionConfig<Options, Storage>>['onFocus'],\n      },\n      props: {\n        event: FocusEvent,\n      },\n    ) => void) | null,\n\n    /**\n     * The editor isn\u2019t focused anymore.\n     */\n    onBlur?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        editor: Editor,\n        parent: ParentConfig<ExtensionConfig<Options, Storage>>['onBlur'],\n      },\n      props: {\n        event: FocusEvent,\n      },\n    ) => void) | null,\n\n    /**\n     * The editor is destroyed.\n     */\n    onDestroy?: ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      parent: ParentConfig<ExtensionConfig<Options, Storage>>['onDestroy'],\n    }) => void) | null,\n  }\n}\n\nexport class Extension<Options = any, Storage = any> {\n  type = 'extension'\n\n  name = 'extension'\n\n  parent: Extension | null = null\n\n  child: Extension | null = null\n\n  options: Options\n\n  storage: Storage\n\n  config: ExtensionConfig = {\n    name: this.name,\n    defaultOptions: {},\n  }\n\n  constructor(config: Partial<ExtensionConfig<Options, Storage>> = {}) {\n    this.config = {\n      ...this.config,\n      ...config,\n    }\n\n    this.name = this.config.name\n\n    if (config.defaultOptions) {\n      console.warn(`[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${this.name}\".`)\n    }\n\n    // TODO: remove `addOptions` fallback\n    this.options = this.config.defaultOptions\n\n    if (this.config.addOptions) {\n      this.options = callOrReturn(getExtensionField<AnyConfig['addOptions']>(\n        this,\n        'addOptions',\n        {\n          name: this.name,\n        },\n      ))\n    }\n\n    this.storage = callOrReturn(getExtensionField<AnyConfig['addStorage']>(\n      this,\n      'addStorage',\n      {\n        name: this.name,\n        options: this.options,\n      },\n    )) || {}\n  }\n\n  static create<O = any, S = any>(config: Partial<ExtensionConfig<O, S>> = {}) {\n    return new Extension<O, S>(config)\n  }\n\n  configure(options: Partial<Options> = {}) {\n    // return a new instance so we can use the same extension\n    // with different calls of `configure`\n    const extension = this.extend()\n\n    extension.options = mergeDeep(this.options, options) as Options\n\n    extension.storage = callOrReturn(getExtensionField<AnyConfig['addStorage']>(\n      extension,\n      'addStorage',\n      {\n        name: extension.name,\n        options: extension.options,\n      },\n    ))\n\n    return extension\n  }\n\n  extend<ExtendedOptions = Options, ExtendedStorage = Storage>(extendedConfig: Partial<ExtensionConfig<ExtendedOptions, ExtendedStorage>> = {}) {\n    const extension = new Extension<ExtendedOptions, ExtendedStorage>(extendedConfig)\n\n    extension.parent = this\n\n    this.child = extension\n\n    extension.name = extendedConfig.name\n      ? extendedConfig.name\n      : extension.parent.name\n\n    if (extendedConfig.defaultOptions) {\n      console.warn(`[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${extension.name}\".`)\n    }\n\n    extension.options = callOrReturn(getExtensionField<AnyConfig['addOptions']>(\n      extension,\n      'addOptions',\n      {\n        name: extension.name,\n      },\n    ))\n\n    extension.storage = callOrReturn(getExtensionField<AnyConfig['addStorage']>(\n      extension,\n      'addStorage',\n      {\n        name: extension.name,\n        options: extension.options,\n      },\n    ))\n\n    return extension\n  }\n}\n", "import { Range, TextSerializer } from '../types'\nimport { Node as ProseMirrorNode } from 'prosemirror-model'\n\nexport function getTextBetween(\n  startNode: ProseMirrorNode,\n  range: Range,\n  options?: {\n    blockSeparator?: string,\n    textSerializers?: Record<string, TextSerializer>,\n  },\n): string {\n  const { from, to } = range\n  const {\n    blockSeparator = '\\n\\n',\n    textSerializers = {},\n  } = options || {}\n  let text = ''\n  let separated = true\n\n  startNode.nodesBetween(from, to, (node, pos, parent, index) => {\n    const textSerializer = textSerializers?.[node.type.name]\n\n    if (textSerializer) {\n      if (node.isBlock && !separated) {\n        text += blockSeparator\n        separated = true\n      }\n\n      text += textSerializer({\n        node,\n        pos,\n        parent,\n        index,\n      })\n    } else if (node.isText) {\n      text += node?.text?.slice(Math.max(from, pos) - pos, to - pos)\n      separated = false\n    } else if (node.isBlock && !separated) {\n      text += blockSeparator\n      separated = true\n    }\n  })\n\n  return text\n}\n", "import { Schema } from 'prosemirror-model'\nimport { TextSerializer } from '../types'\n\nexport function getTextSeralizersFromSchema(schema: Schema): Record<string, TextSerializer> {\n  return Object.fromEntries(Object\n    .entries(schema.nodes)\n    .filter(([, node]) => node.spec.toText)\n    .map(([name, node]) => [name, node.spec.toText]))\n}\n", "import { Plugin, PluginKey } from 'prosemirror-state'\nimport { Extension } from '../Extension'\nimport { getTextBetween } from '../helpers/getTextBetween'\nimport { getTextSeralizersFromSchema } from '../helpers/getTextSeralizersFromSchema'\n\nexport const ClipboardTextSerializer = Extension.create({\n  name: 'clipboardTextSerializer',\n\n  addProseMirrorPlugins() {\n    return [\n      new Plugin({\n        key: new PluginKey('clipboardTextSerializer'),\n        props: {\n          clipboardTextSerializer: () => {\n            const { editor } = this\n            const { state, schema } = editor\n            const { doc, selection } = state\n            const { ranges } = selection\n            const from = Math.min(...ranges.map(range => range.$from.pos))\n            const to = Math.max(...ranges.map(range => range.$to.pos))\n            const textSerializers = getTextSeralizersFromSchema(schema)\n            const range = { from, to }\n\n            return getTextBetween(doc, range, {\n              textSerializers,\n            })\n          },\n        },\n      }),\n    ]\n  },\n})\n", "import { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    blur: {\n      /**\n       * Removes focus from the editor.\n       */\n      blur: () => ReturnType,\n    }\n  }\n}\n\nexport const blur: RawCommands['blur'] = () => ({ editor, view }) => {\n  requestAnimationFrame(() => {\n    if (!editor.isDestroyed) {\n      (view.dom as HTMLElement).blur()\n\n      // Browsers should remove the caret on blur but safari does not.\n      // See: https://github.com/ueberdosis/tiptap/issues/2405\n      window?.getSelection()?.removeAllRanges()\n    }\n  })\n\n  return true\n}\n", "import { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    clearContent: {\n      /**\n       * Clear the whole document.\n       */\n      clearContent: (emitUpdate?: boolean) => ReturnType,\n    }\n  }\n}\n\nexport const clearContent: RawCommands['clearContent'] = (emitUpdate = false) => ({ commands }) => {\n  return commands.setContent('', emitUpdate)\n}\n", "import { liftTarget } from 'prosemirror-transform'\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    clearNodes: {\n      /**\n       * Normalize nodes to a simple paragraph.\n       */\n      clearNodes: () => ReturnType,\n    }\n  }\n}\n\nexport const clearNodes: RawCommands['clearNodes'] = () => ({ state, tr, dispatch }) => {\n  const { selection } = tr\n  const { ranges } = selection\n\n  if (!dispatch) {\n    return true\n  }\n\n  ranges.forEach(({ $from, $to }) => {\n    state.doc.nodesBetween($from.pos, $to.pos, (node, pos) => {\n      if (node.type.isText) {\n        return\n      }\n\n      const { doc, mapping } = tr\n      const $mappedFrom = doc.resolve(mapping.map(pos))\n      const $mappedTo = doc.resolve(mapping.map(pos + node.nodeSize))\n      const nodeRange = $mappedFrom.blockRange($mappedTo)\n\n      if (!nodeRange) {\n        return\n      }\n\n      const targetLiftDepth = liftTarget(nodeRange)\n\n      if (node.type.isTextblock) {\n        const { defaultType } = $mappedFrom.parent.contentMatchAt($mappedFrom.index())\n\n        tr.setNodeMarkup(nodeRange.start, defaultType)\n      }\n\n      if (targetLiftDepth || targetLiftDepth === 0) {\n        tr.lift(nodeRange, targetLiftDepth)\n      }\n    })\n  })\n\n  return true\n}\n", "import { Command, RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    command: {\n      /**\n       * Define a command inline.\n       */\n      command: (fn: (props: Parameters<Command>[0]) => boolean) => ReturnType,\n    }\n  }\n}\n\nexport const command: RawCommands['command'] = fn => props => {\n  return fn(props)\n}\n", "import { createParagraphNear as originalCreateParagraphNear } from 'prosemirror-commands'\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    createParagraphNear: {\n      /**\n       * Create a paragraph nearby.\n       */\n      createParagraphNear: () => ReturnType,\n    }\n  }\n}\n\nexport const createParagraphNear: RawCommands['createParagraphNear'] = () => ({ state, dispatch }) => {\n  return originalCreateParagraphNear(state, dispatch)\n}\n", "import { NodeType, Schema } from 'prosemirror-model'\n\nexport function getNodeType(nameOrType: string | NodeType, schema: Schema): NodeType {\n  if (typeof nameOrType === 'string') {\n    if (!schema.nodes[nameOrType]) {\n      throw Error(`There is no node type named '${nameOrType}'. Maybe you forgot to add the extension?`)\n    }\n\n    return schema.nodes[nameOrType]\n  }\n\n  return nameOrType\n}\n", "import { NodeType } from 'prosemirror-model'\nimport { getNodeType } from '../helpers/getNodeType'\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    deleteNode: {\n      /**\n       * Delete a node.\n       */\n      deleteNode: (typeOrName: string | NodeType) => ReturnType,\n    }\n  }\n}\n\nexport const deleteNode: RawCommands['deleteNode'] = typeOrName => ({ tr, state, dispatch }) => {\n  const type = getNodeType(typeOrName, state.schema)\n  const $pos = tr.selection.$anchor\n\n  for (let depth = $pos.depth; depth > 0; depth -= 1) {\n    const node = $pos.node(depth)\n\n    if (node.type === type) {\n      if (dispatch) {\n        const from = $pos.before(depth)\n        const to = $pos.after(depth)\n\n        tr.delete(from, to).scrollIntoView()\n      }\n\n      return true\n    }\n  }\n\n  return false\n}\n", "import { RawCommands, Range } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    deleteRange: {\n      /**\n       * Delete a given range.\n       */\n      deleteRange: (range: Range) => ReturnType,\n    }\n  }\n}\n\nexport const deleteRange: RawCommands['deleteRange'] = range => ({ tr, dispatch }) => {\n  const { from, to } = range\n\n  if (dispatch) {\n    tr.delete(from, to)\n  }\n\n  return true\n}\n", "import { deleteSelection as originalDeleteSelection } from 'prosemirror-commands'\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    deleteSelection: {\n      /**\n       * Delete the selection, if there is one.\n       */\n      deleteSelection: () => ReturnType,\n    }\n  }\n}\n\nexport const deleteSelection: RawCommands['deleteSelection'] = () => ({ state, dispatch }) => {\n  return originalDeleteSelection(state, dispatch)\n}\n", "import { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    enter: {\n      /**\n       * Trigger enter.\n       */\n      enter: () => ReturnType,\n    }\n  }\n}\n\nexport const enter: RawCommands['enter'] = () => ({ commands }) => {\n  return commands.keyboardShortcut('Enter')\n}\n", "import { exitCode as originalExitCode } from 'prosemirror-commands'\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    exitCode: {\n      /**\n       * Exit from a code block.\n       */\n      exitCode: () => ReturnType,\n    }\n  }\n}\n\nexport const exitCode: RawCommands['exitCode'] = () => ({ state, dispatch }) => {\n  return originalExitCode(state, dispatch)\n}\n", "import { MarkType, Schema } from 'prosemirror-model'\n\nexport function getMarkType(nameOrType: string | MarkType, schema: Schema): MarkType {\n  if (typeof nameOrType === 'string') {\n    if (!schema.marks[nameOrType]) {\n      throw Error(`There is no mark type named '${nameOrType}'. Maybe you forgot to add the extension?`)\n    }\n\n    return schema.marks[nameOrType]\n  }\n\n  return nameOrType\n}\n", "export function isRegExp(value: any): value is RegExp {\n  return Object.prototype.toString.call(value) === '[object RegExp]'\n}\n", "import { isRegExp } from './isRegExp'\n\n/**\n * Check if object1 includes object2\n * @param object1 Object\n * @param object2 Object\n */\nexport function objectIncludes(\n  object1: Record<string, any>,\n  object2: Record<string, any>,\n  options: { strict: boolean } = { strict: true },\n): boolean {\n  const keys = Object.keys(object2)\n\n  if (!keys.length) {\n    return true\n  }\n\n  return keys.every(key => {\n    if (options.strict) {\n      return object2[key] === object1[key]\n    }\n\n    if (isRegExp(object2[key])) {\n      return object2[key].test(object1[key])\n    }\n\n    return object2[key] === object1[key]\n  })\n}\n", "import { Mark as ProseMirrorMark, MarkType, ResolvedPos } from 'prosemirror-model'\nimport { objectIncludes } from '../utilities/objectIncludes'\nimport { Range } from '../types'\n\nfunction findMarkInSet(\n  marks: ProseMirrorMark[],\n  type: MarkType,\n  attributes: Record<string, any> = {},\n): ProseMirrorMark | undefined {\n  return marks.find(item => {\n    return item.type === type && objectIncludes(item.attrs, attributes)\n  })\n}\n\nfunction isMarkInSet(\n  marks: ProseMirrorMark[],\n  type: MarkType,\n  attributes: Record<string, any> = {},\n): boolean {\n  return !!findMarkInSet(marks, type, attributes)\n}\n\nexport function getMarkRange(\n  $pos: ResolvedPos,\n  type: MarkType,\n  attributes: Record<string, any> = {},\n): Range | void {\n  if (!$pos || !type) {\n    return\n  }\n\n  const start = $pos.parent.childAfter($pos.parentOffset)\n\n  if (!start.node) {\n    return\n  }\n\n  const mark = findMarkInSet(start.node.marks, type, attributes)\n\n  if (!mark) {\n    return\n  }\n\n  let startIndex = $pos.index()\n  let startPos = $pos.start() + start.offset\n  let endIndex = startIndex + 1\n  let endPos = startPos + start.node.nodeSize\n\n  findMarkInSet(start.node.marks, type, attributes)\n\n  while (startIndex > 0 && mark.isInSet($pos.parent.child(startIndex - 1).marks)) {\n    startIndex -= 1\n    startPos -= $pos.parent.child(startIndex).nodeSize\n  }\n\n  while (\n    endIndex < $pos.parent.childCount\n    && isMarkInSet($pos.parent.child(endIndex).marks, type, attributes)\n  ) {\n    endPos += $pos.parent.child(endIndex).nodeSize\n    endIndex += 1\n  }\n\n  return {\n    from: startPos,\n    to: endPos,\n  }\n}\n", "import { TextSelection } from 'prosemirror-state'\nimport { MarkType } from 'prosemirror-model'\nimport { RawCommands } from '../types'\nimport { getMarkType } from '../helpers/getMarkType'\nimport { getMarkRange } from '../helpers/getMarkRange'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    extendMarkRange: {\n      /**\n       * Extends the text selection to the current mark.\n       */\n      extendMarkRange: (typeOrName: string | MarkType, attributes?: Record<string, any>) => ReturnType,\n    }\n  }\n}\n\nexport const extendMarkRange: RawCommands['extendMarkRange'] = (typeOrName, attributes = {}) => ({ tr, state, dispatch }) => {\n  const type = getMarkType(typeOrName, state.schema)\n  const { doc, selection } = tr\n  const { $from, from, to } = selection\n\n  if (dispatch) {\n    const range = getMarkRange($from, type, attributes)\n\n    if (range && range.from <= from && range.to >= to) {\n      const newSelection = TextSelection.create(doc, range.from, range.to)\n\n      tr.setSelection(newSelection)\n    }\n  }\n\n  return true\n}\n", "import { Command, CommandProps, RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    first: {\n      /**\n       * Runs one command after the other and stops at the first which returns true.\n       */\n      first: (commands: Command[] | ((props: CommandProps) => Command[])) => ReturnType,\n    }\n  }\n}\n\nexport const first: RawCommands['first'] = commands => props => {\n  const items = typeof commands === 'function'\n    ? commands(props)\n    : commands\n\n  for (let i = 0; i < items.length; i += 1) {\n    if (items[i](props)) {\n      return true\n    }\n  }\n\n  return false\n}\n", "export function isClass(value: any): boolean {\n  if (value.constructor?.toString().substring(0, 5) !== 'class') {\n    return false\n  }\n\n  return true\n}\n", "import { isClass } from './isClass'\n\nexport function isObject(value: any): boolean {\n  return (\n    value\n    && typeof value === 'object'\n    && !Array.isArray(value)\n    && !isClass(value)\n  )\n}\n", "import { TextSelection } from 'prosemirror-state'\nimport { isObject } from '../utilities/isObject'\n\nexport function isTextSelection(value: unknown): value is TextSelection {\n  return isObject(value) && value instanceof TextSelection\n}\n", "export function isiOS(): boolean {\n  return [\n    'iPad Simulator',\n    'iPhone Simulator',\n    'iPod Simulator',\n    'iPad',\n    'iPhone',\n    'iPod',\n  ].includes(navigator.platform)\n  // iPad on iOS 13 detection\n  || (navigator.userAgent.includes('Mac') && 'ontouchend' in document)\n}\n", "export function minMax(value = 0, min = 0, max = 0): number {\n  return Math.min(Math.max(value, min), max)\n}\n", "import { Node as ProseMirrorNode } from 'prosemirror-model'\nimport { Selection, TextSelection } from 'prosemirror-state'\nimport { FocusPosition } from '../types'\nimport { minMax } from '../utilities/minMax'\n\nexport function resolveFocusPosition(\n  doc: ProseMirrorNode,\n  position: FocusPosition = null,\n): Selection | null {\n\n  if (!position) {\n    return null\n  }\n\n  const selectionAtStart = Selection.atStart(doc)\n  const selectionAtEnd = Selection.atEnd(doc)\n\n  if (position === 'start' || position === true) {\n    return selectionAtStart\n  }\n\n  if (position === 'end') {\n    return selectionAtEnd\n  }\n\n  const minPos = selectionAtStart.from\n  const maxPos = selectionAtEnd.to\n\n  if (position === 'all') {\n    return TextSelection.create(\n      doc,\n      minMax(0, minPos, maxPos),\n      minMax(doc.content.size, minPos, maxPos),\n    )\n  }\n\n  return TextSelection.create(\n    doc,\n    minMax(position, minPos, maxPos),\n    minMax(position, minPos, maxPos),\n  )\n}\n", "import { RawCommands, FocusPosition } from '../types'\nimport { isTextSelection } from '../helpers/isTextSelection'\nimport { isiOS } from '../utilities/isiOS'\nimport { resolveFocusPosition } from '../helpers/resolveFocusPosition'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    focus: {\n      /**\n       * Focus the editor at the given position.\n       */\n      focus: (\n        position?: FocusPosition,\n        options?: {\n          scrollIntoView?: boolean,\n        },\n      ) => ReturnType,\n    }\n  }\n}\n\nexport const focus: RawCommands['focus'] = (position = null, options) => ({\n  editor,\n  view,\n  tr,\n  dispatch,\n}) => {\n  options = {\n    scrollIntoView: true,\n    ...options,\n  }\n\n  const delayedFocus = () => {\n    // focus within `requestAnimationFrame` breaks focus on iOS\n    // so we have to call this\n    if (isiOS()) {\n      (view.dom as HTMLElement).focus()\n    }\n\n    // For React we have to focus asynchronously. Otherwise wild things happen.\n    // see: https://github.com/ueberdosis/tiptap/issues/1520\n    requestAnimationFrame(() => {\n      if (!editor.isDestroyed) {\n        view.focus()\n\n        if (options?.scrollIntoView) {\n          editor.commands.scrollIntoView()\n        }\n      }\n    })\n  }\n\n  if ((view.hasFocus() && position === null) || position === false) {\n    return true\n  }\n\n  // we don\u2019t try to resolve a NodeSelection or CellSelection\n  if (dispatch && position === null && !isTextSelection(editor.state.selection)) {\n    delayedFocus()\n    return true\n  }\n\n  const selection = resolveFocusPosition(editor.state.doc, position) || editor.state.selection\n  const isSameSelection = editor.state.selection.eq(selection)\n\n  if (dispatch) {\n    if (!isSameSelection) {\n      tr.setSelection(selection)\n    }\n\n    // `tr.setSelection` resets the stored marks\n    // so we\u2019ll restore them if the selection is the same as before\n    if (isSameSelection && tr.storedMarks) {\n      tr.setStoredMarks(tr.storedMarks)\n    }\n\n    delayedFocus()\n  }\n\n  return true\n}\n", "import { CommandProps, RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    forEach: {\n      /**\n       * Loop through an array of items.\n       */\n      forEach: <T>(\n        items: T[],\n        fn: (\n          item: T,\n          props: CommandProps & {\n            index: number,\n          },\n        ) => boolean,\n      ) => ReturnType,\n    }\n  }\n}\n\nexport const forEach: RawCommands['forEach'] = (items, fn) => props => {\n  return items.every((item, index) => fn(item, { ...props, index }))\n}\n", "import { ParseOptions } from 'prosemirror-model'\nimport { RawCommands, Content } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    insertContent: {\n      /**\n       * Insert a node or string of HTML at the current position.\n       */\n      insertContent: (\n        value: Content,\n        options?: {\n          parseOptions?: ParseOptions,\n          updateSelection?: boolean,\n        },\n      ) => ReturnType,\n    }\n  }\n}\n\nexport const insertContent: RawCommands['insertContent'] = (value, options) => ({ tr, commands }) => {\n  return commands.insertContentAt({ from: tr.selection.from, to: tr.selection.to }, value, options)\n}\n", "export function elementFromString(value: string): HTMLElement {\n  // add a wrapper to preserve leading and trailing whitespace\n  const wrappedValue = `<body>${value}</body>`\n\n  return new window.DOMParser().parseFromString(wrappedValue, 'text/html').body\n}\n", "import {\n  Schema,\n  DOMParser,\n  Node as ProseMirrorNode,\n  Fragment,\n  ParseOptions,\n} from 'prosemirror-model'\nimport { elementFromString } from '../utilities/elementFromString'\nimport { Content } from '../types'\n\nexport type CreateNodeFromContentOptions = {\n  slice?: boolean,\n  parseOptions?: ParseOptions,\n}\n\nexport function createNodeFromContent(\n  content: Content,\n  schema: Schema,\n  options?: CreateNodeFromContentOptions,\n): ProseMirrorNode | Fragment {\n  options = {\n    slice: true,\n    parseOptions: {},\n    ...options,\n  }\n\n  if (typeof content === 'object' && content !== null) {\n    try {\n      if (Array.isArray(content)) {\n        return Fragment.fromArray(content.map(item => schema.nodeFromJSON(item)))\n      }\n\n      return schema.nodeFromJSON(content)\n    } catch (error) {\n      console.warn(\n        '[tiptap warn]: Invalid content.',\n        'Passed value:',\n        content,\n        'Error:',\n        error,\n      )\n\n      return createNodeFromContent('', schema, options)\n    }\n  }\n\n  if (typeof content === 'string') {\n    const parser = DOMParser.fromSchema(schema)\n\n    return options.slice\n      ? parser.parseSlice(elementFromString(content), options.parseOptions).content\n      : parser.parse(elementFromString(content), options.parseOptions)\n  }\n\n  return createNodeFromContent('', schema, options)\n}\n", "import { Selection, Transaction } from 'prosemirror-state'\nimport { ReplaceStep, ReplaceAroundStep } from 'prosemirror-transform'\n\n// source: https://github.com/ProseMirror/prosemirror-state/blob/master/src/selection.js#L466\nexport function selectionToInsertionEnd(tr: Transaction, startLen: number, bias: number) {\n  const last = tr.steps.length - 1\n\n  if (last < startLen) {\n    return\n  }\n\n  const step = tr.steps[last]\n\n  if (!(step instanceof ReplaceStep || step instanceof ReplaceAroundStep)) {\n    return\n  }\n\n  const map = tr.mapping.maps[last]\n  let end = 0\n\n  map.forEach((_from, _to, _newFrom, newTo) => {\n    if (end === 0) {\n      end = newTo\n    }\n  })\n\n  tr.setSelection(Selection.near(tr.doc.resolve(end), bias))\n}\n", "import { Fragment, Node as ProseMirrorNode, ParseOptions } from 'prosemirror-model'\nimport { createNodeFromContent } from '../helpers/createNodeFromContent'\nimport { selectionToInsertionEnd } from '../helpers/selectionToInsertionEnd'\nimport {\n  RawCommands,\n  Content,\n  Range,\n} from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    insertContentAt: {\n      /**\n       * Insert a node or string of HTML at a specific position.\n       */\n      insertContentAt: (\n        position: number | Range,\n        value: Content,\n        options?: {\n          parseOptions?: ParseOptions,\n          updateSelection?: boolean,\n        },\n      ) => ReturnType,\n    }\n  }\n}\n\nconst isFragment = (nodeOrFragment: ProseMirrorNode | Fragment): nodeOrFragment is Fragment => {\n  return nodeOrFragment.toString().startsWith('<')\n}\n\nexport const insertContentAt: RawCommands['insertContentAt'] = (position, value, options) => ({ tr, dispatch, editor }) => {\n  if (dispatch) {\n    options = {\n      parseOptions: {},\n      updateSelection: true,\n      ...options,\n    }\n\n    const content = createNodeFromContent(value, editor.schema, {\n      parseOptions: {\n        preserveWhitespace: 'full',\n        ...options.parseOptions,\n      },\n    })\n\n    // don\u2019t dispatch an empty fragment because this can lead to strange errors\n    if (content.toString() === '<>') {\n      return true\n    }\n\n    let { from, to } = typeof position === 'number'\n      ? { from: position, to: position }\n      : position\n\n    let isOnlyTextContent = true\n    let isOnlyBlockContent = true\n    const nodes = isFragment(content)\n      ? content\n      : [content]\n\n    nodes.forEach(node => {\n      // check if added node is valid\n      node.check()\n\n      isOnlyTextContent = isOnlyTextContent\n        ? node.isText && node.marks.length === 0\n        : false\n\n      isOnlyBlockContent = isOnlyBlockContent\n        ? node.isBlock\n        : false\n    })\n\n    // check if we can replace the wrapping node by\n    // the newly inserted content\n    // example:\n    // replace an empty paragraph by an inserted image\n    // instead of inserting the image below the paragraph\n    if (from === to && isOnlyBlockContent) {\n      const { parent } = tr.doc.resolve(from)\n      const isEmptyTextBlock = parent.isTextblock\n        && !parent.type.spec.code\n        && !parent.childCount\n\n      if (isEmptyTextBlock) {\n        from -= 1\n        to += 1\n      }\n    }\n\n    // if there is only plain text we have to use `insertText`\n    // because this will keep the current marks\n    if (isOnlyTextContent) {\n      tr.insertText(value as string, from, to)\n    } else {\n      tr.replaceWith(from, to, content)\n    }\n\n    // set cursor at end of inserted content\n    if (options.updateSelection) {\n      selectionToInsertionEnd(tr, tr.steps.length - 1, -1)\n    }\n  }\n\n  return true\n}\n", "import { joinBackward as originalJoinBackward } from 'prosemirror-commands'\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    joinBackward: {\n      /**\n       * Join two nodes backward.\n       */\n      joinBackward: () => ReturnType,\n    }\n  }\n}\n\nexport const joinBackward: RawCommands['joinBackward'] = () => ({ state, dispatch }) => {\n  return originalJoinBackward(state, dispatch)\n}\n", "import { joinForward as originalJoinForward } from 'prosemirror-commands'\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    joinForward: {\n      /**\n       * Join two nodes forward.\n       */\n      joinForward: () => ReturnType,\n    }\n  }\n}\n\nexport const joinForward: RawCommands['joinForward'] = () => ({ state, dispatch }) => {\n  return originalJoinForward(state, dispatch)\n}\n", "export function isMacOS(): boolean {\n  return typeof navigator !== 'undefined'\n    ? /Mac/.test(navigator.platform)\n    : false\n}\n", "import { RawCommands } from '../types'\nimport { isiOS } from '../utilities/isiOS'\nimport { isMacOS } from '../utilities/isMacOS'\n\nfunction normalizeKeyName(name: string) {\n  const parts = name.split(/-(?!$)/)\n  let result = parts[parts.length - 1]\n\n  if (result === 'Space') {\n    result = ' '\n  }\n\n  let alt\n  let ctrl\n  let shift\n  let meta\n\n  for (let i = 0; i < parts.length - 1; i += 1) {\n    const mod = parts[i]\n\n    if (/^(cmd|meta|m)$/i.test(mod)) {\n      meta = true\n    } else if (/^a(lt)?$/i.test(mod)) {\n      alt = true\n    } else if (/^(c|ctrl|control)$/i.test(mod)) {\n      ctrl = true\n    } else if (/^s(hift)?$/i.test(mod)) {\n      shift = true\n    } else if (/^mod$/i.test(mod)) {\n      if (isiOS() || isMacOS()) {\n        meta = true\n      } else {\n        ctrl = true\n      }\n    } else {\n      throw new Error(`Unrecognized modifier name: ${mod}`)\n    }\n  }\n\n  if (alt) {\n    result = `Alt-${result}`\n  }\n\n  if (ctrl) {\n    result = `Ctrl-${result}`\n  }\n\n  if (meta) {\n    result = `Meta-${result}`\n  }\n\n  if (shift) {\n    result = `Shift-${result}`\n  }\n\n  return result\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    keyboardShortcut: {\n      /**\n       * Trigger a keyboard shortcut.\n       */\n      keyboardShortcut: (name: string) => ReturnType,\n    }\n  }\n}\n\nexport const keyboardShortcut: RawCommands['keyboardShortcut'] = name => ({\n  editor,\n  view,\n  tr,\n  dispatch,\n}) => {\n  const keys = normalizeKeyName(name).split(/-(?!$)/)\n  const key = keys.find(item => !['Alt', 'Ctrl', 'Meta', 'Shift'].includes(item))\n  const event = new KeyboardEvent('keydown', {\n    key: key === 'Space'\n      ? ' '\n      : key,\n    altKey: keys.includes('Alt'),\n    ctrlKey: keys.includes('Ctrl'),\n    metaKey: keys.includes('Meta'),\n    shiftKey: keys.includes('Shift'),\n    bubbles: true,\n    cancelable: true,\n  })\n\n  const capturedTransaction = editor.captureTransaction(() => {\n    view.someProp('handleKeyDown', f => f(view, event))\n  })\n\n  capturedTransaction?.steps.forEach(step => {\n    const newStep = step.map(tr.mapping)\n\n    if (newStep && dispatch) {\n      tr.maybeStep(newStep)\n    }\n  })\n\n  return true\n}\n", "import { EditorState } from 'prosemirror-state'\nimport { NodeType } from 'prosemirror-model'\nimport { objectIncludes } from '../utilities/objectIncludes'\nimport { getNodeType } from './getNodeType'\nimport { NodeRange } from '../types'\n\nexport function isNodeActive(\n  state: EditorState,\n  typeOrName: NodeType | string | null,\n  attributes: Record<string, any> = {},\n): boolean {\n  const { from, to, empty } = state.selection\n  const type = typeOrName\n    ? getNodeType(typeOrName, state.schema)\n    : null\n\n  const nodeRanges: NodeRange[] = []\n\n  state.doc.nodesBetween(from, to, (node, pos) => {\n    if (node.isText) {\n      return\n    }\n\n    const relativeFrom = Math.max(from, pos)\n    const relativeTo = Math.min(to, pos + node.nodeSize)\n\n    nodeRanges.push({\n      node,\n      from: relativeFrom,\n      to: relativeTo,\n    })\n  })\n\n  const selectionRange = to - from\n  const matchedNodeRanges = nodeRanges\n    .filter(nodeRange => {\n      if (!type) {\n        return true\n      }\n\n      return type.name === nodeRange.node.type.name\n    })\n    .filter(nodeRange => objectIncludes(nodeRange.node.attrs, attributes, { strict: false }))\n\n  if (empty) {\n    return !!matchedNodeRanges.length\n  }\n\n  const range = matchedNodeRanges\n    .reduce((sum, nodeRange) => sum + nodeRange.to - nodeRange.from, 0)\n\n  return range >= selectionRange\n}\n", "import { lift as originalLift } from 'prosemirror-commands'\nimport { NodeType } from 'prosemirror-model'\nimport { RawCommands } from '../types'\nimport { isNodeActive } from '../helpers/isNodeActive'\nimport { getNodeType } from '../helpers/getNodeType'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    lift: {\n      /**\n       * Removes an existing wrap.\n       */\n      lift: (typeOrName: string | NodeType, attributes?: Record<string, any>) => ReturnType,\n    }\n  }\n}\n\nexport const lift: RawCommands['lift'] = (typeOrName, attributes = {}) => ({ state, dispatch }) => {\n  const type = getNodeType(typeOrName, state.schema)\n  const isActive = isNodeActive(state, type, attributes)\n\n  if (!isActive) {\n    return false\n  }\n\n  return originalLift(state, dispatch)\n}\n", "import { liftEmptyBlock as originalLiftEmptyBlock } from 'prosemirror-commands'\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    liftEmptyBlock: {\n      /**\n       * Lift block if empty.\n       */\n      liftEmptyBlock: () => ReturnType,\n    }\n  }\n}\n\nexport const liftEmptyBlock: RawCommands['liftEmptyBlock'] = () => ({ state, dispatch }) => {\n  return originalLiftEmptyBlock(state, dispatch)\n}\n", "import { liftListItem as originalLiftListItem } from 'prosemirror-schema-list'\nimport { NodeType } from 'prosemirror-model'\nimport { RawCommands } from '../types'\nimport { getNodeType } from '../helpers/getNodeType'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    liftListItem: {\n      /**\n       * Lift the list item into a wrapping list.\n       */\n      liftListItem: (typeOrName: string | NodeType) => ReturnType,\n    }\n  }\n}\n\nexport const liftListItem: RawCommands['liftListItem'] = typeOrName => ({ state, dispatch }) => {\n  const type = getNodeType(typeOrName, state.schema)\n\n  return originalLiftListItem(type)(state, dispatch)\n}\n", "import { newlineInCode as originalNewlineInCode } from 'prosemirror-commands'\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    newlineInCode: {\n      /**\n       * Add a newline character in code.\n       */\n      newlineInCode: () => ReturnType,\n    }\n  }\n}\n\nexport const newlineInCode: RawCommands['newlineInCode'] = () => ({ state, dispatch }) => {\n  return originalNewlineInCode(state, dispatch)\n}\n", "import { Schema } from 'prosemirror-model'\n\nexport function getSchemaTypeNameByName(name: string, schema: Schema): 'node' | 'mark' | null {\n  if (schema.nodes[name]) {\n    return 'node'\n  }\n\n  if (schema.marks[name]) {\n    return 'mark'\n  }\n\n  return null\n}\n", "/**\n * Remove a property or an array of properties from an object\n * @param obj Object\n * @param key Key to remove\n */\nexport function deleteProps(obj: Record<string, any>, propOrProps: string | string[]): Record<string, any> {\n  const props = typeof propOrProps === 'string'\n    ? [propOrProps]\n    : propOrProps\n\n  return Object\n    .keys(obj)\n    .reduce((newObj: Record<string, any>, prop) => {\n      if (!props.includes(prop)) {\n        newObj[prop] = obj[prop]\n      }\n\n      return newObj\n    }, {})\n}\n", "import { NodeType, MarkType } from 'prosemirror-model'\nimport { getNodeType } from '../helpers/getNodeType'\nimport { getMarkType } from '../helpers/getMarkType'\nimport { getSchemaTypeNameByName } from '../helpers/getSchemaTypeNameByName'\nimport { deleteProps } from '../utilities/deleteProps'\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    resetAttributes: {\n      /**\n       * Resets some node attributes to the default value.\n       */\n      resetAttributes: (typeOrName: string | NodeType | MarkType, attributes: string | string[]) => ReturnType,\n    }\n  }\n}\n\nexport const resetAttributes: RawCommands['resetAttributes'] = (typeOrName, attributes) => ({ tr, state, dispatch }) => {\n  let nodeType: NodeType | null = null\n  let markType: MarkType | null = null\n\n  const schemaType = getSchemaTypeNameByName(\n    typeof typeOrName === 'string'\n      ? typeOrName\n      : typeOrName.name,\n    state.schema,\n  )\n\n  if (!schemaType) {\n    return false\n  }\n\n  if (schemaType === 'node') {\n    nodeType = getNodeType(typeOrName as NodeType, state.schema)\n  }\n\n  if (schemaType === 'mark') {\n    markType = getMarkType(typeOrName as MarkType, state.schema)\n  }\n\n  if (dispatch) {\n    tr.selection.ranges.forEach(range => {\n      state.doc.nodesBetween(range.$from.pos, range.$to.pos, (node, pos) => {\n        if (nodeType && nodeType === node.type) {\n          tr.setNodeMarkup(pos, undefined, deleteProps(node.attrs, attributes))\n        }\n\n        if (markType && node.marks.length) {\n          node.marks.forEach(mark => {\n            if (markType === mark.type) {\n              tr.addMark(pos, pos + node.nodeSize, markType.create(deleteProps(mark.attrs, attributes)))\n            }\n          })\n        }\n      })\n    })\n  }\n\n  return true\n}\n", "import { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    scrollIntoView: {\n      /**\n       * Scroll the selection into view.\n       */\n      scrollIntoView: () => ReturnType,\n    }\n  }\n}\n\nexport const scrollIntoView: RawCommands['scrollIntoView'] = () => ({ tr, dispatch }) => {\n  if (dispatch) {\n    tr.scrollIntoView()\n  }\n\n  return true\n}\n", "import { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    selectAll: {\n      /**\n       * Select the whole document.\n       */\n      selectAll: () => ReturnType,\n    }\n  }\n}\n\nexport const selectAll: RawCommands['selectAll'] = () => ({ tr, commands }) => {\n  return commands.setTextSelection({\n    from: 0,\n    to: tr.doc.content.size,\n  })\n}\n", "import { selectNodeBackward as originalSelectNodeBackward } from 'prosemirror-commands'\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    selectNodeBackward: {\n      /**\n       * Select a node backward.\n       */\n      selectNodeBackward: () => ReturnType,\n    }\n  }\n}\n\nexport const selectNodeBackward: RawCommands['selectNodeBackward'] = () => ({ state, dispatch }) => {\n  return originalSelectNodeBackward(state, dispatch)\n}\n", "import { selectNodeForward as originalSelectNodeForward } from 'prosemirror-commands'\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    selectNodeForward: {\n      /**\n       * Select a node forward.\n       */\n      selectNodeForward: () => ReturnType,\n    }\n  }\n}\n\nexport const selectNodeForward: RawCommands['selectNodeForward'] = () => ({ state, dispatch }) => {\n  return originalSelectNodeForward(state, dispatch)\n}\n", "import { selectParentNode as originalSelectParentNode } from 'prosemirror-commands'\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    selectParentNode: {\n      /**\n       * Select the parent node.\n       */\n      selectParentNode: () => ReturnType,\n    }\n  }\n}\n\nexport const selectParentNode: RawCommands['selectParentNode'] = () => ({ state, dispatch }) => {\n  return originalSelectParentNode(state, dispatch)\n}\n", "// @ts-ignore\n// TODO: add types to @types/prosemirror-commands\nimport { selectTextblockEnd as originalSelectTextblockEnd } from 'prosemirror-commands'\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    selectTextblockEnd: {\n      /**\n       * Moves the cursor to the end of current text block.\n       */\n      selectTextblockEnd: () => ReturnType,\n    }\n  }\n}\n\nexport const selectTextblockEnd: RawCommands['selectTextblockEnd'] = () => ({ state, dispatch }) => {\n  return originalSelectTextblockEnd(state, dispatch)\n}\n", "// @ts-ignore\n// TODO: add types to @types/prosemirror-commands\nimport { selectTextblockStart as originalSelectTextblockStart } from 'prosemirror-commands'\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    selectTextblockStart: {\n      /**\n       * Moves the cursor to the start of current text block.\n       */\n      selectTextblockStart: () => ReturnType,\n    }\n  }\n}\n\nexport const selectTextblockStart: RawCommands['selectTextblockStart'] = () => ({ state, dispatch }) => {\n  return originalSelectTextblockStart(state, dispatch)\n}\n", "import { Schema, Node as ProseMirrorNode, ParseOptions } from 'prosemirror-model'\nimport { Content } from '../types'\nimport { createNodeFromContent } from './createNodeFromContent'\n\nexport function createDocument(\n  content: Content,\n  schema: Schema,\n  parseOptions: ParseOptions = {},\n): ProseMirrorNode {\n  return createNodeFromContent(content, schema, { slice: false, parseOptions }) as ProseMirrorNode\n}\n", "import { TextSelection } from 'prosemirror-state'\nimport { ParseOptions } from 'prosemirror-model'\nimport { createDocument } from '../helpers/createDocument'\nimport { RawCommands, Content } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    setContent: {\n      /**\n       * Replace the whole document with new content.\n       */\n      setContent: (\n        content: Content,\n        emitUpdate?: boolean,\n        parseOptions?: ParseOptions,\n      ) => ReturnType,\n    }\n  }\n}\n\nexport const setContent: RawCommands['setContent'] = (content, emitUpdate = false, parseOptions = {}) => ({ tr, editor, dispatch }) => {\n  const { doc } = tr\n  const document = createDocument(content, editor.schema, parseOptions)\n  const selection = TextSelection.create(doc, 0, doc.content.size)\n\n  if (dispatch) {\n    tr.setSelection(selection)\n      .replaceSelectionWith(document, false)\n      .setMeta('preventUpdate', !emitUpdate)\n  }\n\n  return true\n}\n", "import { EditorState } from 'prosemirror-state'\nimport { Mark, MarkType } from 'prosemirror-model'\nimport { getMarkType } from './getMarkType'\n\nexport function getMarkAttributes(state: EditorState, typeOrName: string | MarkType): Record<string, any> {\n  const type = getMarkType(typeOrName, state.schema)\n  const { from, to, empty } = state.selection\n  const marks: Mark[] = []\n\n  if (empty) {\n    if (state.storedMarks) {\n      marks.push(...state.storedMarks)\n    }\n\n    marks.push(...state.selection.$head.marks())\n  } else {\n    state.doc.nodesBetween(from, to, node => {\n      marks.push(...node.marks)\n    })\n  }\n\n  const mark = marks.find(markItem => markItem.type.name === type.name)\n\n  if (!mark) {\n    return {}\n  }\n\n  return { ...mark.attrs }\n}\n", "import { MarkType } from 'prosemirror-model'\nimport { RawCommands } from '../types'\nimport { getMarkType } from '../helpers/getMarkType'\nimport { getMarkAttributes } from '../helpers/getMarkAttributes'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    setMark: {\n      /**\n       * Add a mark with new attributes.\n       */\n      setMark: (typeOrName: string | MarkType, attributes?: Record<string, any>) => ReturnType,\n    }\n  }\n}\n\nexport const setMark: RawCommands['setMark'] = (typeOrName, attributes = {}) => ({ tr, state, dispatch }) => {\n  const { selection } = tr\n  const { empty, ranges } = selection\n  const type = getMarkType(typeOrName, state.schema)\n\n  if (dispatch) {\n    if (empty) {\n      const oldAttributes = getMarkAttributes(state, type)\n\n      tr.addStoredMark(type.create({\n        ...oldAttributes,\n        ...attributes,\n      }))\n    } else {\n      ranges.forEach(range => {\n        const from = range.$from.pos\n        const to = range.$to.pos\n\n        state.doc.nodesBetween(from, to, (node, pos) => {\n          const trimmedFrom = Math.max(pos, from)\n          const trimmedTo = Math.min(pos + node.nodeSize, to)\n          const someHasMark = node.marks.find(mark => mark.type === type)\n\n          // if there is already a mark of this type\n          // we know that we have to merge its attributes\n          // otherwise we add a fresh new mark\n          if (someHasMark) {\n            node.marks.forEach(mark => {\n              if (type === mark.type) {\n                tr.addMark(trimmedFrom, trimmedTo, type.create({\n                  ...mark.attrs,\n                  ...attributes,\n                }))\n              }\n            })\n          } else {\n            tr.addMark(trimmedFrom, trimmedTo, type.create(attributes))\n          }\n        })\n      })\n    }\n  }\n\n  return true\n}\n", "import { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    setMeta: {\n      /**\n       * Store a metadata property in the current transaction.\n       */\n      setMeta: (key: string, value: any) => ReturnType,\n    }\n  }\n}\n\nexport const setMeta: RawCommands['setMeta'] = (key, value) => ({ tr }) => {\n  tr.setMeta(key, value)\n\n  return true\n}\n", "import { NodeType } from 'prosemirror-model'\nimport { setBlockType } from 'prosemirror-commands'\nimport { RawCommands } from '../types'\nimport { getNodeType } from '../helpers/getNodeType'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    setNode: {\n      /**\n       * Replace a given range with a node.\n       */\n      setNode: (typeOrName: string | NodeType, attributes?: Record<string, any>) => ReturnType,\n    }\n  }\n}\n\nexport const setNode: RawCommands['setNode'] = (typeOrName, attributes = {}) => ({ state, dispatch, chain }) => {\n  const type = getNodeType(typeOrName, state.schema)\n\n  // TODO: use a fallback like insertContent?\n  if (!type.isTextblock) {\n    console.warn('[tiptap warn]: Currently \"setNode()\" only supports text block nodes.')\n\n    return false\n  }\n\n  return chain()\n    // try to convert node to default node if needed\n    .command(({ commands }) => {\n      const canSetBlock = setBlockType(type, attributes)(state)\n\n      if (canSetBlock) {\n        return true\n      }\n\n      return commands.clearNodes()\n    })\n    .command(({ state: updatedState }) => {\n      return setBlockType(type, attributes)(updatedState, dispatch)\n    })\n    .run()\n}\n", "import { Selection, NodeSelection } from 'prosemirror-state'\nimport { minMax } from '../utilities/minMax'\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    setNodeSelection: {\n      /**\n       * Creates a NodeSelection.\n       */\n      setNodeSelection: (position: number) => ReturnType,\n    }\n  }\n}\n\nexport const setNodeSelection: RawCommands['setNodeSelection'] = position => ({ tr, dispatch }) => {\n  if (dispatch) {\n    const { doc } = tr\n    const minPos = Selection.atStart(doc).from\n    const maxPos = Selection.atEnd(doc).to\n    const resolvedPos = minMax(position, minPos, maxPos)\n    const selection = NodeSelection.create(doc, resolvedPos)\n\n    tr.setSelection(selection)\n  }\n\n  return true\n}\n", "import { TextSelection } from 'prosemirror-state'\nimport { minMax } from '../utilities/minMax'\nimport { RawCommands, Range } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    setTextSelection: {\n      /**\n       * Creates a TextSelection.\n       */\n      setTextSelection: (position: number | Range) => ReturnType,\n    }\n  }\n}\n\nexport const setTextSelection: RawCommands['setTextSelection'] = position => ({ tr, dispatch }) => {\n  if (dispatch) {\n    const { doc } = tr\n    const { from, to } = typeof position === 'number'\n      ? { from: position, to: position }\n      : position\n    const minPos = TextSelection.atStart(doc).from\n    const maxPos = TextSelection.atEnd(doc).to\n    const resolvedFrom = minMax(from, minPos, maxPos)\n    const resolvedEnd = minMax(to, minPos, maxPos)\n    const selection = TextSelection.create(doc, resolvedFrom, resolvedEnd)\n\n    tr.setSelection(selection)\n  }\n\n  return true\n}\n", "import { sinkListItem as originalSinkListItem } from 'prosemirror-schema-list'\nimport { NodeType } from 'prosemirror-model'\nimport { RawCommands } from '../types'\nimport { getNodeType } from '../helpers/getNodeType'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    sinkListItem: {\n      /**\n       * Sink the list item down into an inner list.\n       */\n      sinkListItem: (typeOrName: string | NodeType) => ReturnType,\n    }\n  }\n}\n\nexport const sinkListItem: RawCommands['sinkListItem'] = typeOrName => ({ state, dispatch }) => {\n  const type = getNodeType(typeOrName, state.schema)\n\n  return originalSinkListItem(type)(state, dispatch)\n}\n", "import { ExtensionAttribute } from '../types'\n\nexport function getSplittedAttributes(\n  extensionAttributes: ExtensionAttribute[],\n  typeName: string,\n  attributes: Record<string, any>,\n): Record<string, any> {\n  return Object.fromEntries(Object\n    .entries(attributes)\n    .filter(([name]) => {\n      const extensionAttribute = extensionAttributes.find(item => {\n        return item.type === typeName && item.name === name\n      })\n\n      if (!extensionAttribute) {\n        return false\n      }\n\n      return extensionAttribute.attribute.keepOnSplit\n    }))\n}\n", "import { canSplit } from 'prosemirror-transform'\nimport { ContentMatch } from 'prosemirror-model'\nimport { EditorState, NodeSelection, TextSelection } from 'prosemirror-state'\nimport { RawCommands } from '../types'\nimport { getSplittedAttributes } from '../helpers/getSplittedAttributes'\n\nfunction defaultBlockAt(match: ContentMatch) {\n  for (let i = 0; i < match.edgeCount; i += 1) {\n    const { type } = match.edge(i)\n\n    if (type.isTextblock && !type.hasRequiredAttrs()) {\n      return type\n    }\n  }\n  return null\n}\n\nfunction ensureMarks(state: EditorState, splittableMarks?: string[]) {\n  const marks = state.storedMarks\n    || (state.selection.$to.parentOffset && state.selection.$from.marks())\n\n  if (marks) {\n    const filteredMarks = marks.filter(mark => splittableMarks?.includes(mark.type.name))\n\n    state.tr.ensureMarks(filteredMarks)\n  }\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    splitBlock: {\n      /**\n       * Forks a new node from an existing node.\n       */\n      splitBlock: (options?: { keepMarks?: boolean }) => ReturnType,\n    }\n  }\n}\n\nexport const splitBlock: RawCommands['splitBlock'] = ({ keepMarks = true } = {}) => ({\n  tr,\n  state,\n  dispatch,\n  editor,\n}) => {\n  const { selection, doc } = tr\n  const { $from, $to } = selection\n  const extensionAttributes = editor.extensionManager.attributes\n  const newAttributes = getSplittedAttributes(\n    extensionAttributes,\n    $from.node().type.name,\n    $from.node().attrs,\n  )\n\n  if (selection instanceof NodeSelection && selection.node.isBlock) {\n    if (!$from.parentOffset || !canSplit(doc, $from.pos)) {\n      return false\n    }\n\n    if (dispatch) {\n      if (keepMarks) {\n        ensureMarks(state, editor.extensionManager.splittableMarks)\n      }\n\n      tr.split($from.pos).scrollIntoView()\n    }\n\n    return true\n  }\n\n  if (!$from.parent.isBlock) {\n    return false\n  }\n\n  if (dispatch) {\n    const atEnd = $to.parentOffset === $to.parent.content.size\n\n    if (selection instanceof TextSelection) {\n      tr.deleteSelection()\n    }\n\n    const deflt = $from.depth === 0\n      ? undefined\n      : defaultBlockAt($from.node(-1).contentMatchAt($from.indexAfter(-1)))\n\n    let types = atEnd && deflt\n      ? [{\n        type: deflt,\n        attrs: newAttributes,\n      }]\n      : undefined\n\n    let can = canSplit(tr.doc, tr.mapping.map($from.pos), 1, types)\n\n    if (\n      !types\n      && !can\n      && canSplit(tr.doc, tr.mapping.map($from.pos), 1, deflt ? [{ type: deflt }] : undefined)\n    ) {\n      can = true\n      types = deflt\n        ? [{\n          type: deflt,\n          attrs: newAttributes,\n        }]\n        : undefined\n    }\n\n    if (can) {\n      tr.split(tr.mapping.map($from.pos), 1, types)\n\n      if (\n        deflt\n        && !atEnd\n        && !$from.parentOffset\n        && $from.parent.type !== deflt\n      ) {\n        const first = tr.mapping.map($from.before())\n        const $first = tr.doc.resolve(first)\n\n        if ($from.node(-1).canReplaceWith($first.index(), $first.index() + 1, deflt)) {\n          tr.setNodeMarkup(tr.mapping.map($from.before()), deflt)\n        }\n      }\n    }\n\n    if (keepMarks) {\n      ensureMarks(state, editor.extensionManager.splittableMarks)\n    }\n\n    tr.scrollIntoView()\n  }\n\n  return true\n}\n", "import {\n  NodeType,\n  Node as ProseMirrorNode,\n  Fragment,\n  Slice,\n} from 'prosemirror-model'\nimport { canSplit } from 'prosemirror-transform'\nimport { TextSelection } from 'prosemirror-state'\nimport { RawCommands } from '../types'\nimport { getNodeType } from '../helpers/getNodeType'\nimport { getSplittedAttributes } from '../helpers/getSplittedAttributes'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    splitListItem: {\n      /**\n       * Splits one list item into two list items.\n       */\n      splitListItem: (typeOrName: string | NodeType) => ReturnType,\n    }\n  }\n}\n\nexport const splitListItem: RawCommands['splitListItem'] = typeOrName => ({\n  tr, state, dispatch, editor,\n}) => {\n  const type = getNodeType(typeOrName, state.schema)\n  const { $from, $to } = state.selection\n\n  // @ts-ignore\n  // eslint-disable-next-line\n  const node: ProseMirrorNode = state.selection.node\n\n  if ((node && node.isBlock) || $from.depth < 2 || !$from.sameParent($to)) {\n    return false\n  }\n\n  const grandParent = $from.node(-1)\n\n  if (grandParent.type !== type) {\n    return false\n  }\n\n  const extensionAttributes = editor.extensionManager.attributes\n\n  if ($from.parent.content.size === 0 && $from.node(-1).childCount === $from.indexAfter(-1)) {\n    // In an empty block. If this is a nested list, the wrapping\n    // list item should be split. Otherwise, bail out and let next\n    // command handle lifting.\n    if (\n      $from.depth === 2\n      || $from.node(-3).type !== type\n      || $from.index(-2) !== $from.node(-2).childCount - 1\n    ) {\n      return false\n    }\n\n    if (dispatch) {\n      let wrap = Fragment.empty\n      // eslint-disable-next-line\n      const depthBefore = $from.index(-1)\n        ? 1\n        : $from.index(-2)\n          ? 2\n          : 3\n\n      // Build a fragment containing empty versions of the structure\n      // from the outer list item to the parent node of the cursor\n      for (let d = $from.depth - depthBefore; d >= $from.depth - 3; d -= 1) {\n        wrap = Fragment.from($from.node(d).copy(wrap))\n      }\n\n      // eslint-disable-next-line\n      const depthAfter = $from.indexAfter(-1) < $from.node(-2).childCount\n        ? 1\n        : $from.indexAfter(-2) < $from.node(-3).childCount\n          ? 2\n          : 3\n\n      // Add a second list item with an empty default start node\n      const newNextTypeAttributes = getSplittedAttributes(\n        extensionAttributes,\n        $from.node().type.name,\n        $from.node().attrs,\n      )\n      const nextType = type.contentMatch.defaultType?.createAndFill(newNextTypeAttributes) || undefined\n\n      wrap = wrap.append(Fragment.from(type.createAndFill(null, nextType) || undefined))\n\n      const start = $from.before($from.depth - (depthBefore - 1))\n\n      tr.replace(start, $from.after(-depthAfter), new Slice(wrap, 4 - depthBefore, 0))\n\n      let sel = -1\n\n      tr.doc.nodesBetween(start, tr.doc.content.size, (n, pos) => {\n        if (sel > -1) {\n          return false\n        }\n\n        if (n.isTextblock && n.content.size === 0) {\n          sel = pos + 1\n        }\n      })\n\n      if (sel > -1) {\n        tr.setSelection(TextSelection.near(tr.doc.resolve(sel)))\n      }\n\n      tr.scrollIntoView()\n    }\n\n    return true\n  }\n\n  const nextType = $to.pos === $from.end()\n    ? grandParent.contentMatchAt(0).defaultType\n    : null\n\n  const newTypeAttributes = getSplittedAttributes(\n    extensionAttributes,\n    grandParent.type.name,\n    grandParent.attrs,\n  )\n  const newNextTypeAttributes = getSplittedAttributes(\n    extensionAttributes,\n    $from.node().type.name,\n    $from.node().attrs,\n  )\n\n  tr.delete($from.pos, $to.pos)\n\n  const types = nextType\n    ? [{ type, attrs: newTypeAttributes }, { type: nextType, attrs: newNextTypeAttributes }]\n    : [{ type, attrs: newTypeAttributes }]\n\n  if (!canSplit(tr.doc, $from.pos, 2)) {\n    return false\n  }\n\n  if (dispatch) {\n    tr.split($from.pos, 2, types).scrollIntoView()\n  }\n\n  return true\n}\n", "import { ResolvedPos, Node as ProseMirrorNode } from 'prosemirror-model'\nimport { Predicate } from '../types'\n\nexport function findParentNodeClosestToPos($pos: ResolvedPos, predicate: Predicate): ({\n  pos: number,\n  start: number,\n  depth: number,\n  node: ProseMirrorNode,\n} | undefined) {\n  for (let i = $pos.depth; i > 0; i -= 1) {\n    const node = $pos.node(i)\n\n    if (predicate(node)) {\n      return {\n        pos: i > 0 ? $pos.before(i) : 0,\n        start: $pos.start(i),\n        depth: i,\n        node,\n      }\n    }\n  }\n}\n", "import { Selection } from 'prosemirror-state'\nimport { findParentNodeClosestToPos } from './findParentNodeClosestToPos'\nimport { Predicate } from '../types'\n\nexport function findParentNode(predicate: Predicate) {\n  return (selection: Selection) => findParentNodeClosestToPos(selection.$from, predicate)\n}\n", "import { Extensions } from '../types'\nimport { Extension } from '../Extension'\nimport { Node } from '../Node'\nimport { Mark } from '../Mark'\n\nexport function splitExtensions(extensions: Extensions) {\n  const baseExtensions = extensions.filter(extension => extension.type === 'extension') as Extension[]\n  const nodeExtensions = extensions.filter(extension => extension.type === 'node') as Node[]\n  const markExtensions = extensions.filter(extension => extension.type === 'mark') as Mark[]\n\n  return {\n    baseExtensions,\n    nodeExtensions,\n    markExtensions,\n  }\n}\n", "import { Extensions } from '../types'\nimport { NodeConfig } from '..'\nimport { splitExtensions } from './splitExtensions'\nimport { callOrReturn } from '../utilities/callOrReturn'\nimport { getExtensionField } from '../helpers/getExtensionField'\n\nexport function isList(name: string, extensions: Extensions): boolean {\n  const { nodeExtensions } = splitExtensions(extensions)\n  const extension = nodeExtensions.find(item => item.name === name)\n\n  if (!extension) {\n    return false\n  }\n\n  const context = {\n    name: extension.name,\n    options: extension.options,\n    storage: extension.storage,\n  }\n  const group = callOrReturn(getExtensionField<NodeConfig['group']>(extension, 'group', context))\n\n  if (typeof group !== 'string') {\n    return false\n  }\n\n  return group.split(' ').includes('list')\n}\n", "import { NodeType } from 'prosemirror-model'\nimport { Transaction } from 'prosemirror-state'\nimport { canJoin } from 'prosemirror-transform'\nimport { RawCommands } from '../types'\nimport { getNodeType } from '../helpers/getNodeType'\nimport { findParentNode } from '../helpers/findParentNode'\nimport { isList } from '../helpers/isList'\n\nconst joinListBackwards = (tr: Transaction, listType: NodeType): boolean => {\n  const list = findParentNode(node => node.type === listType)(tr.selection)\n\n  if (!list) {\n    return true\n  }\n\n  const before = tr.doc.resolve(Math.max(0, list.pos - 1)).before(list.depth)\n\n  if (before === undefined) {\n    return true\n  }\n\n  const nodeBefore = tr.doc.nodeAt(before)\n  const canJoinBackwards = list.node.type === nodeBefore?.type\n    && canJoin(tr.doc, list.pos)\n\n  if (!canJoinBackwards) {\n    return true\n  }\n\n  tr.join(list.pos)\n\n  return true\n}\n\nconst joinListForwards = (tr: Transaction, listType: NodeType): boolean => {\n  const list = findParentNode(node => node.type === listType)(tr.selection)\n\n  if (!list) {\n    return true\n  }\n\n  const after = tr.doc.resolve(list.start).after(list.depth)\n\n  if (after === undefined) {\n    return true\n  }\n\n  const nodeAfter = tr.doc.nodeAt(after)\n  const canJoinForwards = list.node.type === nodeAfter?.type\n    && canJoin(tr.doc, after)\n\n  if (!canJoinForwards) {\n    return true\n  }\n\n  tr.join(after)\n\n  return true\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    toggleList: {\n      /**\n       * Toggle between different list types.\n       */\n      toggleList: (listTypeOrName: string | NodeType, itemTypeOrName: string | NodeType) => ReturnType,\n    }\n  }\n}\n\nexport const toggleList: RawCommands['toggleList'] = (listTypeOrName, itemTypeOrName) => ({\n  editor, tr, state, dispatch, chain, commands, can,\n}) => {\n  const { extensions } = editor.extensionManager\n  const listType = getNodeType(listTypeOrName, state.schema)\n  const itemType = getNodeType(itemTypeOrName, state.schema)\n  const { selection } = state\n  const { $from, $to } = selection\n  const range = $from.blockRange($to)\n\n  if (!range) {\n    return false\n  }\n\n  const parentList = findParentNode(node => isList(node.type.name, extensions))(selection)\n\n  if (range.depth >= 1 && parentList && range.depth - parentList.depth <= 1) {\n    // remove list\n    if (parentList.node.type === listType) {\n      return commands.liftListItem(itemType)\n    }\n\n    // change list type\n    if (\n      isList(parentList.node.type.name, extensions)\n      && listType.validContent(parentList.node.content)\n      && dispatch\n    ) {\n      return chain()\n        .command(() => {\n          tr.setNodeMarkup(parentList.pos, listType)\n\n          return true\n        })\n        .command(() => joinListBackwards(tr, listType))\n        .command(() => joinListForwards(tr, listType))\n        .run()\n    }\n  }\n\n  return chain()\n    // try to convert node to default node if needed\n    .command(() => {\n      const canWrapInList = can().wrapInList(listType)\n\n      if (canWrapInList) {\n        return true\n      }\n\n      return commands.clearNodes()\n    })\n    .wrapInList(listType)\n    .command(() => joinListBackwards(tr, listType))\n    .command(() => joinListForwards(tr, listType))\n    .run()\n}\n", "import { EditorState } from 'prosemirror-state'\nimport { MarkType } from 'prosemirror-model'\nimport { objectIncludes } from '../utilities/objectIncludes'\nimport { getMarkType } from './getMarkType'\nimport { MarkRange } from '../types'\n\nexport function isMarkActive(\n  state: EditorState,\n  typeOrName: MarkType | string | null,\n  attributes: Record<string, any> = {},\n): boolean {\n  const { empty, ranges } = state.selection\n  const type = typeOrName\n    ? getMarkType(typeOrName, state.schema)\n    : null\n\n  if (empty) {\n    return !!(state.storedMarks || state.selection.$from.marks())\n      .filter(mark => {\n        if (!type) {\n          return true\n        }\n\n        return type.name === mark.type.name\n      })\n      .find(mark => objectIncludes(mark.attrs, attributes, { strict: false }))\n  }\n\n  let selectionRange = 0\n  const markRanges: MarkRange[] = []\n\n  ranges.forEach(({ $from, $to }) => {\n    const from = $from.pos\n    const to = $to.pos\n\n    state.doc.nodesBetween(from, to, (node, pos) => {\n      if (!node.isText && !node.marks.length) {\n        return\n      }\n\n      const relativeFrom = Math.max(from, pos)\n      const relativeTo = Math.min(to, pos + node.nodeSize)\n      const range = relativeTo - relativeFrom\n\n      selectionRange += range\n\n      markRanges.push(...node.marks.map(mark => ({\n        mark,\n        from: relativeFrom,\n        to: relativeTo,\n      })))\n    })\n  })\n\n  if (selectionRange === 0) {\n    return false\n  }\n\n  // calculate range of matched mark\n  const matchedRange = markRanges\n    .filter(markRange => {\n      if (!type) {\n        return true\n      }\n\n      return type.name === markRange.mark.type.name\n    })\n    .filter(markRange => objectIncludes(markRange.mark.attrs, attributes, { strict: false }))\n    .reduce((sum, markRange) => sum + markRange.to - markRange.from, 0)\n\n  // calculate range of marks that excludes the searched mark\n  // for example `code` doesn\u2019t allow any other marks\n  const excludedRange = markRanges\n    .filter(markRange => {\n      if (!type) {\n        return true\n      }\n\n      return markRange.mark.type !== type\n        && markRange.mark.type.excludes(type)\n    })\n    .reduce((sum, markRange) => sum + markRange.to - markRange.from, 0)\n\n  // we only include the result of `excludedRange`\n  // if there is a match at all\n  const range = matchedRange > 0\n    ? matchedRange + excludedRange\n    : matchedRange\n\n  return range >= selectionRange\n}\n", "import { MarkType } from 'prosemirror-model'\nimport { RawCommands } from '../types'\nimport { getMarkType } from '../helpers/getMarkType'\nimport { isMarkActive } from '../helpers/isMarkActive'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    toggleMark: {\n      /**\n       * Toggle a mark on and off.\n       */\n      toggleMark: (\n        typeOrName: string | MarkType,\n        attributes?: Record<string, any>,\n        options?: {\n          /**\n           * Removes the mark even across the current selection. Defaults to `false`.\n           */\n          extendEmptyMarkRange?: boolean,\n        },\n      ) => ReturnType,\n    }\n  }\n}\n\nexport const toggleMark: RawCommands['toggleMark'] = (typeOrName, attributes = {}, options = {}) => ({ state, commands }) => {\n  const { extendEmptyMarkRange = false } = options\n  const type = getMarkType(typeOrName, state.schema)\n  const isActive = isMarkActive(state, type, attributes)\n\n  if (isActive) {\n    return commands.unsetMark(type, { extendEmptyMarkRange })\n  }\n\n  return commands.setMark(type, attributes)\n}\n", "import { NodeType } from 'prosemirror-model'\nimport { RawCommands } from '../types'\nimport { isNodeActive } from '../helpers/isNodeActive'\nimport { getNodeType } from '../helpers/getNodeType'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    toggleNode: {\n      /**\n       * Toggle a node with another node.\n       */\n      toggleNode: (typeOrName: string | NodeType, toggleTypeOrName: string | NodeType, attributes?: Record<string, any>) => ReturnType,\n    }\n  }\n}\n\nexport const toggleNode: RawCommands['toggleNode'] = (typeOrName, toggleTypeOrName, attributes = {}) => ({ state, commands }) => {\n  const type = getNodeType(typeOrName, state.schema)\n  const toggleType = getNodeType(toggleTypeOrName, state.schema)\n  const isActive = isNodeActive(state, type, attributes)\n\n  if (isActive) {\n    return commands.setNode(toggleType)\n  }\n\n  return commands.setNode(type, attributes)\n}\n", "import { NodeType } from 'prosemirror-model'\nimport { RawCommands } from '../types'\nimport { isNodeActive } from '../helpers/isNodeActive'\nimport { getNodeType } from '../helpers/getNodeType'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    toggleWrap: {\n      /**\n       * Wraps nodes in another node, or removes an existing wrap.\n       */\n      toggleWrap: (typeOrName: string | NodeType, attributes?: Record<string, any>) => ReturnType,\n    }\n  }\n}\n\nexport const toggleWrap: RawCommands['toggleWrap'] = (typeOrName, attributes = {}) => ({ state, commands }) => {\n  const type = getNodeType(typeOrName, state.schema)\n  const isActive = isNodeActive(state, type, attributes)\n\n  if (isActive) {\n    return commands.lift(type)\n  }\n\n  return commands.wrapIn(type, attributes)\n}\n", "import { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    undoInputRule: {\n      /**\n       * Undo an input rule.\n       */\n      undoInputRule: () => ReturnType,\n    }\n  }\n}\n\nexport const undoInputRule: RawCommands['undoInputRule'] = () => ({ state, dispatch }) => {\n  const plugins = state.plugins\n\n  for (let i = 0; i < plugins.length; i += 1) {\n    const plugin = plugins[i]\n    let undoable\n\n    // @ts-ignore\n    // eslint-disable-next-line\n    if (plugin.spec.isInputRules && (undoable = plugin.getState(state))) {\n      if (dispatch) {\n        const tr = state.tr\n        const toUndo = undoable.transform\n\n        for (let j = toUndo.steps.length - 1; j >= 0; j -= 1) {\n          tr.step(toUndo.steps[j].invert(toUndo.docs[j]))\n        }\n\n        if (undoable.text) {\n          const marks = tr.doc.resolve(undoable.from).marks()\n\n          tr.replaceWith(undoable.from, undoable.to, state.schema.text(undoable.text, marks))\n        } else {\n          tr.delete(undoable.from, undoable.to)\n        }\n      }\n\n      return true\n    }\n  }\n\n  return false\n}\n", "import { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    unsetAllMarks: {\n      /**\n       * Remove all marks in the current selection.\n       */\n      unsetAllMarks: () => ReturnType,\n    }\n  }\n}\n\nexport const unsetAllMarks: RawCommands['unsetAllMarks'] = () => ({ tr, dispatch }) => {\n  const { selection } = tr\n  const { empty, ranges } = selection\n\n  if (empty) {\n    return true\n  }\n\n  if (dispatch) {\n    ranges.forEach(range => {\n      tr.removeMark(range.$from.pos, range.$to.pos)\n    })\n  }\n\n  return true\n}\n", "import { MarkType } from 'prosemirror-model'\nimport { RawCommands } from '../types'\nimport { getMarkType } from '../helpers/getMarkType'\nimport { getMarkRange } from '../helpers/getMarkRange'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    unsetMark: {\n      /**\n       * Remove all marks in the current selection.\n       */\n      unsetMark: (\n        typeOrName: string | MarkType,\n        options?: {\n          /**\n           * Removes the mark even across the current selection. Defaults to `false`.\n           */\n          extendEmptyMarkRange?: boolean,\n        },\n      ) => ReturnType,\n    }\n  }\n}\n\nexport const unsetMark: RawCommands['unsetMark'] = (typeOrName, options = {}) => ({ tr, state, dispatch }) => {\n  const { extendEmptyMarkRange = false } = options\n  const { selection } = tr\n  const type = getMarkType(typeOrName, state.schema)\n  const { $from, empty, ranges } = selection\n\n  if (!dispatch) {\n    return true\n  }\n\n  if (empty && extendEmptyMarkRange) {\n    let { from, to } = selection\n    const attrs = $from.marks().find(mark => mark.type === type)?.attrs\n    const range = getMarkRange($from, type, attrs)\n\n    if (range) {\n      from = range.from\n      to = range.to\n    }\n\n    tr.removeMark(from, to, type)\n  } else {\n    ranges.forEach(range => {\n      tr.removeMark(range.$from.pos, range.$to.pos, type)\n    })\n  }\n\n  tr.removeStoredMark(type)\n\n  return true\n}\n", "import { NodeType, MarkType } from 'prosemirror-model'\nimport { getNodeType } from '../helpers/getNodeType'\nimport { getMarkType } from '../helpers/getMarkType'\nimport { getSchemaTypeNameByName } from '../helpers/getSchemaTypeNameByName'\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    updateAttributes: {\n      /**\n       * Update attributes of a node or mark.\n       */\n      updateAttributes: (typeOrName: string | NodeType | MarkType, attributes: Record<string, any>) => ReturnType,\n    }\n  }\n}\n\nexport const updateAttributes: RawCommands['updateAttributes'] = (typeOrName, attributes = {}) => ({ tr, state, dispatch }) => {\n  let nodeType: NodeType | null = null\n  let markType: MarkType | null = null\n\n  const schemaType = getSchemaTypeNameByName(\n    typeof typeOrName === 'string'\n      ? typeOrName\n      : typeOrName.name,\n    state.schema,\n  )\n\n  if (!schemaType) {\n    return false\n  }\n\n  if (schemaType === 'node') {\n    nodeType = getNodeType(typeOrName as NodeType, state.schema)\n  }\n\n  if (schemaType === 'mark') {\n    markType = getMarkType(typeOrName as MarkType, state.schema)\n  }\n\n  if (dispatch) {\n    tr.selection.ranges.forEach(range => {\n      const from = range.$from.pos\n      const to = range.$to.pos\n\n      state.doc.nodesBetween(from, to, (node, pos) => {\n        if (nodeType && nodeType === node.type) {\n          tr.setNodeMarkup(pos, undefined, {\n            ...node.attrs,\n            ...attributes,\n          })\n        }\n\n        if (markType && node.marks.length) {\n          node.marks.forEach(mark => {\n            if (markType === mark.type) {\n              const trimmedFrom = Math.max(pos, from)\n              const trimmedTo = Math.min(pos + node.nodeSize, to)\n\n              tr.addMark(trimmedFrom, trimmedTo, markType.create({\n                ...mark.attrs,\n                ...attributes,\n              }))\n            }\n          })\n        }\n      })\n    })\n  }\n\n  return true\n}\n", "import { wrapIn as originalWrapIn } from 'prosemirror-commands'\nimport { NodeType } from 'prosemirror-model'\nimport { RawCommands } from '../types'\nimport { getNodeType } from '../helpers/getNodeType'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    wrapIn: {\n      /**\n       * Wraps nodes in another node.\n       */\n      wrapIn: (typeOrName: string | NodeType, attributes?: Record<string, any>) => ReturnType,\n    }\n  }\n}\n\nexport const wrapIn: RawCommands['wrapIn'] = (typeOrName, attributes = {}) => ({ state, dispatch }) => {\n  const type = getNodeType(typeOrName, state.schema)\n\n  return originalWrapIn(type, attributes)(state, dispatch)\n}\n", "import { wrapInList as originalWrapInList } from 'prosemirror-schema-list'\nimport { NodeType } from 'prosemirror-model'\nimport { RawCommands } from '../types'\nimport { getNodeType } from '../helpers/getNodeType'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    wrapInList: {\n      /**\n       * Wrap a node in a list.\n       */\n      wrapInList: (typeOrName: string | NodeType, attributes?: Record<string, any>) => ReturnType,\n    }\n  }\n}\n\nexport const wrapInList: RawCommands['wrapInList'] = (typeOrName, attributes = {}) => ({ state, dispatch }) => {\n  const type = getNodeType(typeOrName, state.schema)\n\n  return originalWrapInList(type, attributes)(state, dispatch)\n}\n", "import { Extension } from '../Extension'\nimport * as blur from '../commands/blur'\nimport * as clearContent from '../commands/clearContent'\nimport * as clearNodes from '../commands/clearNodes'\nimport * as command from '../commands/command'\nimport * as createParagraphNear from '../commands/createParagraphNear'\nimport * as deleteNode from '../commands/deleteNode'\nimport * as deleteRange from '../commands/deleteRange'\nimport * as deleteSelection from '../commands/deleteSelection'\nimport * as enter from '../commands/enter'\nimport * as exitCode from '../commands/exitCode'\nimport * as extendMarkRange from '../commands/extendMarkRange'\nimport * as first from '../commands/first'\nimport * as focus from '../commands/focus'\nimport * as forEach from '../commands/forEach'\nimport * as insertContent from '../commands/insertContent'\nimport * as insertContentAt from '../commands/insertContentAt'\nimport * as joinBackward from '../commands/joinBackward'\nimport * as joinForward from '../commands/joinForward'\nimport * as keyboardShortcut from '../commands/keyboardShortcut'\nimport * as lift from '../commands/lift'\nimport * as liftEmptyBlock from '../commands/liftEmptyBlock'\nimport * as liftListItem from '../commands/liftListItem'\nimport * as newlineInCode from '../commands/newlineInCode'\nimport * as resetAttributes from '../commands/resetAttributes'\nimport * as scrollIntoView from '../commands/scrollIntoView'\nimport * as selectAll from '../commands/selectAll'\nimport * as selectNodeBackward from '../commands/selectNodeBackward'\nimport * as selectNodeForward from '../commands/selectNodeForward'\nimport * as selectParentNode from '../commands/selectParentNode'\nimport * as selectTextblockEnd from '../commands/selectTextblockEnd'\nimport * as selectTextblockStart from '../commands/selectTextblockStart'\nimport * as setContent from '../commands/setContent'\nimport * as setMark from '../commands/setMark'\nimport * as setMeta from '../commands/setMeta'\nimport * as setNode from '../commands/setNode'\nimport * as setNodeSelection from '../commands/setNodeSelection'\nimport * as setTextSelection from '../commands/setTextSelection'\nimport * as sinkListItem from '../commands/sinkListItem'\nimport * as splitBlock from '../commands/splitBlock'\nimport * as splitListItem from '../commands/splitListItem'\nimport * as toggleList from '../commands/toggleList'\nimport * as toggleMark from '../commands/toggleMark'\nimport * as toggleNode from '../commands/toggleNode'\nimport * as toggleWrap from '../commands/toggleWrap'\nimport * as undoInputRule from '../commands/undoInputRule'\nimport * as unsetAllMarks from '../commands/unsetAllMarks'\nimport * as unsetMark from '../commands/unsetMark'\nimport * as updateAttributes from '../commands/updateAttributes'\nimport * as wrapIn from '../commands/wrapIn'\nimport * as wrapInList from '../commands/wrapInList'\n\nexport { blur }\nexport { clearContent }\nexport { clearNodes }\nexport { command }\nexport { createParagraphNear }\nexport { deleteNode }\nexport { deleteRange }\nexport { deleteSelection }\nexport { enter }\nexport { exitCode }\nexport { extendMarkRange }\nexport { first }\nexport { focus }\nexport { forEach }\nexport { insertContent }\nexport { insertContentAt }\nexport { joinBackward }\nexport { joinForward }\nexport { keyboardShortcut }\nexport { lift }\nexport { liftEmptyBlock }\nexport { liftListItem }\nexport { newlineInCode }\nexport { resetAttributes }\nexport { scrollIntoView }\nexport { selectAll }\nexport { selectNodeBackward }\nexport { selectNodeForward }\nexport { selectParentNode }\nexport { selectTextblockEnd }\nexport { selectTextblockStart }\nexport { setContent }\nexport { setMark }\nexport { setMeta }\nexport { setNode }\nexport { setNodeSelection }\nexport { setTextSelection }\nexport { sinkListItem }\nexport { splitBlock }\nexport { splitListItem }\nexport { toggleList }\nexport { toggleMark }\nexport { toggleNode }\nexport { toggleWrap }\nexport { undoInputRule }\nexport { unsetAllMarks }\nexport { unsetMark }\nexport { updateAttributes }\nexport { wrapIn }\nexport { wrapInList }\n\nexport const Commands = Extension.create({\n  name: 'commands',\n\n  addCommands() {\n    return {\n      ...blur,\n      ...clearContent,\n      ...clearNodes,\n      ...command,\n      ...createParagraphNear,\n      ...deleteNode,\n      ...deleteRange,\n      ...deleteSelection,\n      ...enter,\n      ...exitCode,\n      ...extendMarkRange,\n      ...first,\n      ...focus,\n      ...forEach,\n      ...insertContent,\n      ...insertContentAt,\n      ...joinBackward,\n      ...joinForward,\n      ...keyboardShortcut,\n      ...lift,\n      ...liftEmptyBlock,\n      ...liftListItem,\n      ...newlineInCode,\n      ...resetAttributes,\n      ...scrollIntoView,\n      ...selectAll,\n      ...selectNodeBackward,\n      ...selectNodeForward,\n      ...selectParentNode,\n      ...selectTextblockEnd,\n      ...selectTextblockStart,\n      ...setContent,\n      ...setMark,\n      ...setMeta,\n      ...setNode,\n      ...setNodeSelection,\n      ...setTextSelection,\n      ...sinkListItem,\n      ...splitBlock,\n      ...splitListItem,\n      ...toggleList,\n      ...toggleMark,\n      ...toggleNode,\n      ...toggleWrap,\n      ...undoInputRule,\n      ...unsetAllMarks,\n      ...unsetMark,\n      ...updateAttributes,\n      ...wrapIn,\n      ...wrapInList,\n    }\n  },\n})\n", "import { Plugin, PluginKey } from 'prosemirror-state'\nimport { Extension } from '../Extension'\n\nexport const Editable = Extension.create({\n  name: 'editable',\n\n  addProseMirrorPlugins() {\n    return [\n      new Plugin({\n        key: new PluginKey('editable'),\n        props: {\n          editable: () => this.editor.options.editable,\n        },\n      }),\n    ]\n  },\n})\n", "import { Plugin, PluginKey } from 'prosemirror-state'\nimport { Extension } from '../Extension'\n\nexport const FocusEvents = Extension.create({\n  name: 'focusEvents',\n\n  addProseMirrorPlugins() {\n    const { editor } = this\n\n    return [\n      new Plugin({\n        key: new PluginKey('focusEvents'),\n        props: {\n          handleDOMEvents: {\n            focus: (view, event) => {\n              editor.isFocused = true\n\n              const transaction = editor.state.tr\n                .setMeta('focus', { event })\n                .setMeta('addToHistory', false)\n\n              view.dispatch(transaction)\n\n              return false\n            },\n            blur: (view, event) => {\n              editor.isFocused = false\n\n              const transaction = editor.state.tr\n                .setMeta('blur', { event })\n                .setMeta('addToHistory', false)\n\n              view.dispatch(transaction)\n\n              return false\n            },\n          },\n        },\n      }),\n    ]\n  },\n})\n", "import { EditorState, Transaction } from 'prosemirror-state'\n\nexport function createChainableState(config: {\n  transaction: Transaction,\n  state: EditorState,\n}): EditorState {\n  const { state, transaction } = config\n  let { selection } = transaction\n  let { doc } = transaction\n  let { storedMarks } = transaction\n\n  return {\n    ...state,\n    schema: state.schema,\n    plugins: state.plugins,\n    apply: state.apply.bind(state),\n    applyTransaction: state.applyTransaction.bind(state),\n    reconfigure: state.reconfigure.bind(state),\n    toJSON: state.toJSON.bind(state),\n    get storedMarks() {\n      return storedMarks\n    },\n    get selection() {\n      return selection\n    },\n    get doc() {\n      return doc\n    },\n    get tr() {\n      selection = transaction.selection\n      doc = transaction.doc\n      storedMarks = transaction.storedMarks\n\n      return transaction\n    },\n  }\n}\n", "import { EditorState, Transaction } from 'prosemirror-state'\nimport { Editor } from './Editor'\nimport { createChainableState } from './helpers/createChainableState'\nimport {\n  SingleCommands,\n  ChainedCommands,\n  CanCommands,\n  AnyCommands,\n  CommandProps,\n} from './types'\n\nexport class CommandManager {\n\n  editor: Editor\n\n  rawCommands: AnyCommands\n\n  customState?: EditorState\n\n  constructor(props: {\n    editor: Editor,\n    state?: EditorState,\n  }) {\n    this.editor = props.editor\n    this.rawCommands = this.editor.extensionManager.commands\n    this.customState = props.state\n  }\n\n  get hasCustomState(): boolean {\n    return !!this.customState\n  }\n\n  get state(): EditorState {\n    return this.customState || this.editor.state\n  }\n\n  get commands(): SingleCommands {\n    const { rawCommands, editor, state } = this\n    const { view } = editor\n    const { tr } = state\n    const props = this.buildProps(tr)\n\n    return Object.fromEntries(Object\n      .entries(rawCommands)\n      .map(([name, command]) => {\n        const method = (...args: any[]) => {\n          const callback = command(...args)(props)\n\n          if (!tr.getMeta('preventDispatch') && !this.hasCustomState) {\n            view.dispatch(tr)\n          }\n\n          return callback\n        }\n\n        return [name, method]\n      })) as unknown as SingleCommands\n  }\n\n  get chain(): () => ChainedCommands {\n    return () => this.createChain()\n  }\n\n  get can(): () => CanCommands {\n    return () => this.createCan()\n  }\n\n  public createChain(startTr?: Transaction, shouldDispatch = true): ChainedCommands {\n    const { rawCommands, editor, state } = this\n    const { view } = editor\n    const callbacks: boolean[] = []\n    const hasStartTransaction = !!startTr\n    const tr = startTr || state.tr\n\n    const run = () => {\n      if (\n        !hasStartTransaction\n        && shouldDispatch\n        && !tr.getMeta('preventDispatch')\n        && !this.hasCustomState\n      ) {\n        view.dispatch(tr)\n      }\n\n      return callbacks.every(callback => callback === true)\n    }\n\n    const chain = {\n      ...Object.fromEntries(Object.entries(rawCommands).map(([name, command]) => {\n        const chainedCommand = (...args: never[]) => {\n          const props = this.buildProps(tr, shouldDispatch)\n          const callback = command(...args)(props)\n\n          callbacks.push(callback)\n\n          return chain\n        }\n\n        return [name, chainedCommand]\n      })),\n      run,\n    } as unknown as ChainedCommands\n\n    return chain\n  }\n\n  public createCan(startTr?: Transaction): CanCommands {\n    const { rawCommands, state } = this\n    const dispatch = undefined\n    const tr = startTr || state.tr\n    const props = this.buildProps(tr, dispatch)\n    const formattedCommands = Object.fromEntries(Object\n      .entries(rawCommands)\n      .map(([name, command]) => {\n        return [name, (...args: never[]) => command(...args)({ ...props, dispatch })]\n      })) as unknown as SingleCommands\n\n    return {\n      ...formattedCommands,\n      chain: () => this.createChain(tr, dispatch),\n    } as CanCommands\n  }\n\n  public buildProps(tr: Transaction, shouldDispatch = true): CommandProps {\n    const { rawCommands, editor, state } = this\n    const { view } = editor\n\n    if (state.storedMarks) {\n      tr.setStoredMarks(state.storedMarks)\n    }\n\n    const props: CommandProps = {\n      tr,\n      editor,\n      view,\n      state: createChainableState({\n        state,\n        transaction: tr,\n      }),\n      dispatch: shouldDispatch\n        ? () => undefined\n        : undefined,\n      chain: () => this.createChain(tr),\n      can: () => this.createCan(tr),\n      get commands() {\n        return Object.fromEntries(Object\n          .entries(rawCommands)\n          .map(([name, command]) => {\n            return [name, (...args: never[]) => command(...args)(props)]\n          })) as unknown as SingleCommands\n      },\n    }\n\n    return props\n  }\n\n}\n", "import { Plugin, PluginKey, Selection } from 'prosemirror-state'\nimport { createChainableState } from '../helpers/createChainableState'\nimport { isiOS } from '../utilities/isiOS'\nimport { isMacOS } from '../utilities/isMacOS'\nimport { CommandManager } from '../CommandManager'\nimport { Extension } from '../Extension'\n\nexport const Keymap = Extension.create({\n  name: 'keymap',\n\n  addKeyboardShortcuts() {\n    const handleBackspace = () => this.editor.commands.first(({ commands }) => [\n      () => commands.undoInputRule(),\n      // maybe convert first text block node to default node\n      () => commands.command(({ tr }) => {\n        const { selection, doc } = tr\n        const { empty, $anchor } = selection\n        const { pos, parent } = $anchor\n        const isAtStart = Selection.atStart(doc).from === pos\n\n        if (\n          !empty\n          || !isAtStart\n          || !parent.type.isTextblock\n          || parent.textContent.length\n        ) {\n          return false\n        }\n\n        return commands.clearNodes()\n      }),\n      () => commands.deleteSelection(),\n      () => commands.joinBackward(),\n      () => commands.selectNodeBackward(),\n    ])\n\n    const handleDelete = () => this.editor.commands.first(({ commands }) => [\n      () => commands.deleteSelection(),\n      () => commands.joinForward(),\n      () => commands.selectNodeForward(),\n    ])\n\n    const handleEnter = () => this.editor.commands.first(({ commands }) => [\n      () => commands.newlineInCode(),\n      () => commands.createParagraphNear(),\n      () => commands.liftEmptyBlock(),\n      () => commands.splitBlock(),\n    ])\n\n    const baseKeymap = {\n      Enter: handleEnter,\n      'Mod-Enter': () => this.editor.commands.exitCode(),\n      Backspace: handleBackspace,\n      'Mod-Backspace': handleBackspace,\n      'Shift-Backspace': handleBackspace,\n      Delete: handleDelete,\n      'Mod-Delete': handleDelete,\n      'Mod-a': () => this.editor.commands.selectAll(),\n    }\n\n    const pcKeymap = {\n      ...baseKeymap,\n      Home: () => this.editor.commands.selectTextblockStart(),\n      End: () => this.editor.commands.selectTextblockEnd(),\n    }\n\n    const macKeymap = {\n      ...baseKeymap,\n      'Ctrl-h': handleBackspace,\n      'Alt-Backspace': handleBackspace,\n      'Ctrl-d': handleDelete,\n      'Ctrl-Alt-Backspace': handleDelete,\n      'Alt-Delete': handleDelete,\n      'Alt-d': handleDelete,\n      'Ctrl-a': () => this.editor.commands.selectTextblockStart(),\n      'Ctrl-e': () => this.editor.commands.selectTextblockEnd(),\n    }\n\n    if (isiOS() || isMacOS()) {\n      return macKeymap\n    }\n\n    return pcKeymap\n  },\n\n  addProseMirrorPlugins() {\n    return [\n      // With this plugin we check if the whole document was selected and deleted.\n      // In this case we will additionally call `clearNodes()` to convert e.g. a heading\n      // to a paragraph if necessary.\n      // This is an alternative to ProseMirror's `AllSelection`, which doesn\u2019t work well\n      // with many other commands.\n      new Plugin({\n        key: new PluginKey('clearDocument'),\n        appendTransaction: (transactions, oldState, newState) => {\n          const docChanges = transactions.some(transaction => transaction.docChanged)\n            && !oldState.doc.eq(newState.doc)\n\n          if (!docChanges) {\n            return\n          }\n\n          const { empty, from, to } = oldState.selection\n          const allFrom = Selection.atStart(oldState.doc).from\n          const allEnd = Selection.atEnd(oldState.doc).to\n          const allWasSelected = from === allFrom && to === allEnd\n          const isEmpty = newState.doc.textBetween(0, newState.doc.content.size, ' ', ' ').length === 0\n\n          if (empty || !allWasSelected || !isEmpty) {\n            return\n          }\n\n          const tr = newState.tr\n          const state = createChainableState({\n            state: newState,\n            transaction: tr,\n          })\n          const { commands } = new CommandManager({\n            editor: this.editor,\n            state,\n          })\n\n          commands.clearNodes()\n\n          if (!tr.steps.length) {\n            return\n          }\n\n          return tr\n        },\n      }),\n    ]\n  },\n})\n", "import { Plugin, PluginKey } from 'prosemirror-state'\nimport { Extension } from '../Extension'\n\nexport const Tabindex = Extension.create({\n  name: 'tabindex',\n\n  addProseMirrorPlugins() {\n    return [\n      new Plugin({\n        key: new PluginKey('tabindex'),\n        props: {\n          attributes: () => {\n            if (this.editor.isEditable) {\n              return {\n                tabindex: '0',\n              }\n            }\n          },\n        },\n      }),\n    ]\n  },\n})\n", "import { EditorState } from 'prosemirror-state'\nimport { Node, NodeType } from 'prosemirror-model'\nimport { getNodeType } from './getNodeType'\n\nexport function getNodeAttributes(state: EditorState, typeOrName: string | NodeType): Record<string, any> {\n  const type = getNodeType(typeOrName, state.schema)\n  const { from, to } = state.selection\n  const nodes: Node[] = []\n\n  state.doc.nodesBetween(from, to, node => {\n    nodes.push(node)\n  })\n\n  const node = nodes\n    .reverse()\n    .find(nodeItem => nodeItem.type.name === type.name)\n\n  if (!node) {\n    return {}\n  }\n\n  return { ...node.attrs }\n}\n", "import { MarkType, NodeType } from 'prosemirror-model'\nimport { EditorState } from 'prosemirror-state'\nimport { getSchemaTypeNameByName } from './getSchemaTypeNameByName'\nimport { getNodeAttributes } from './getNodeAttributes'\nimport { getMarkAttributes } from './getMarkAttributes'\n\nexport function getAttributes(\n  state: EditorState,\n  typeOrName: string | NodeType | MarkType,\n): Record<string, any> {\n  const schemaType = getSchemaTypeNameByName(\n    typeof typeOrName === 'string'\n      ? typeOrName\n      : typeOrName.name,\n    state.schema,\n  )\n\n  if (schemaType === 'node') {\n    return getNodeAttributes(state, typeOrName as NodeType)\n  }\n\n  if (schemaType === 'mark') {\n    return getMarkAttributes(state, typeOrName as MarkType)\n  }\n\n  return {}\n}\n", "import { EditorState } from 'prosemirror-state'\nimport { isNodeActive } from './isNodeActive'\nimport { isMarkActive } from './isMarkActive'\nimport { getSchemaTypeNameByName } from './getSchemaTypeNameByName'\n\nexport function isActive(state: EditorState, name: string | null, attributes: Record<string, any> = {}): boolean {\n  if (!name) {\n    return isNodeActive(state, null, attributes) || isMarkActive(state, null, attributes)\n  }\n\n  const schemaType = getSchemaTypeNameByName(name, state.schema)\n\n  if (schemaType === 'node') {\n    return isNodeActive(state, name, attributes)\n  }\n\n  if (schemaType === 'mark') {\n    return isMarkActive(state, name, attributes)\n  }\n\n  return false\n}\n", "import { DOMSerializer, Schema, Fragment } from 'prosemirror-model'\n\nexport function getHTMLFromFragment(fragment: Fragment, schema: Schema): string {\n  const documentFragment = DOMSerializer\n    .fromSchema(schema)\n    .serializeFragment(fragment)\n\n  const temporaryDocument = document.implementation.createHTMLDocument()\n  const container = temporaryDocument.createElement('div')\n\n  container.appendChild(documentFragment)\n\n  return container.innerHTML\n}\n", "import { TextSerializer } from '../types'\nimport { Node as ProseMirrorNode } from 'prosemirror-model'\nimport { getTextBetween } from './getTextBetween'\n\nexport function getText(\n  node: ProseMirrorNode,\n  options?: {\n    blockSeparator?: string,\n    textSerializers?: Record<string, TextSerializer>,\n  },\n) {\n  const range = {\n    from: 0,\n    to: node.content.size,\n  }\n\n  return getTextBetween(node, range, options)\n}\n", "import { Node as ProseMirrorNode } from 'prosemirror-model'\n\nexport function isNodeEmpty(node: ProseMirrorNode): boolean {\n  const defaultContent = node.type.createAndFill()?.toJSON()\n  const content = node.toJSON()\n\n  return JSON.stringify(defaultContent) === JSON.stringify(content)\n}\n", "export function createStyleTag(style: string): HTMLStyleElement {\n  const tipTapStyleTag = (<HTMLStyleElement>document.querySelector('style[data-tiptap-style]'))\n\n  if (tipTapStyleTag !== null) {\n    return tipTapStyleTag\n  }\n\n  const styleNode = document.createElement('style')\n\n  styleNode.setAttribute('data-tiptap-style', '')\n  styleNode.innerHTML = style\n  document.getElementsByTagName('head')[0].appendChild(styleNode)\n\n  return styleNode\n}\n", "import { EditorState, Plugin, TextSelection } from 'prosemirror-state'\nimport { Editor } from './Editor'\nimport { CommandManager } from './CommandManager'\nimport { createChainableState } from './helpers/createChainableState'\nimport { isRegExp } from './utilities/isRegExp'\nimport {\n  Range,\n  ExtendedRegExpMatchArray,\n  SingleCommands,\n  ChainedCommands,\n  CanCommands,\n} from './types'\n\nexport type InputRuleMatch = {\n  index: number,\n  text: string,\n  replaceWith?: string,\n  match?: RegExpMatchArray,\n  data?: Record<string, any>,\n}\n\nexport type InputRuleFinder =\n  | RegExp\n  | ((text: string) => InputRuleMatch | null)\n\nexport class InputRule {\n  find: InputRuleFinder\n\n  handler: (props: {\n    state: EditorState,\n    range: Range,\n    match: ExtendedRegExpMatchArray,\n    commands: SingleCommands,\n    chain: () => ChainedCommands,\n    can: () => CanCommands,\n  }) => void | null\n\n  constructor(config: {\n    find: InputRuleFinder,\n    handler: (props: {\n      state: EditorState,\n      range: Range,\n      match: ExtendedRegExpMatchArray,\n      commands: SingleCommands,\n      chain: () => ChainedCommands,\n      can: () => CanCommands,\n    }) => void | null,\n  }) {\n    this.find = config.find\n    this.handler = config.handler\n  }\n}\n\nconst inputRuleMatcherHandler = (text: string, find: InputRuleFinder): ExtendedRegExpMatchArray | null => {\n  if (isRegExp(find)) {\n    return find.exec(text)\n  }\n\n  const inputRuleMatch = find(text)\n\n  if (!inputRuleMatch) {\n    return null\n  }\n\n  const result: ExtendedRegExpMatchArray = []\n\n  result.push(inputRuleMatch.text)\n  result.index = inputRuleMatch.index\n  result.input = text\n  result.data = inputRuleMatch.data\n\n  if (inputRuleMatch.replaceWith) {\n    if (!inputRuleMatch.text.includes(inputRuleMatch.replaceWith)) {\n      console.warn('[tiptap warn]: \"inputRuleMatch.replaceWith\" must be part of \"inputRuleMatch.text\".')\n    }\n\n    result.push(inputRuleMatch.replaceWith)\n  }\n\n  return result\n}\n\nfunction run(config: {\n  editor: Editor,\n  from: number,\n  to: number,\n  text: string,\n  rules: InputRule[],\n  plugin: Plugin,\n}): boolean {\n  const {\n    editor,\n    from,\n    to,\n    text,\n    rules,\n    plugin,\n  } = config\n  const { view } = editor\n\n  if (view.composing) {\n    return false\n  }\n\n  const $from = view.state.doc.resolve(from)\n\n  if (\n    // check for code node\n    $from.parent.type.spec.code\n    // check for code mark\n    || !!($from.nodeBefore || $from.nodeAfter)?.marks.find(mark => mark.type.spec.code)\n  ) {\n    return false\n  }\n\n  let matched = false\n  const maxMatch = 500\n  const textBefore = $from.parent.textBetween(\n    Math.max(0, $from.parentOffset - maxMatch),\n    $from.parentOffset,\n    undefined,\n    ' ',\n  ) + text\n\n  rules.forEach(rule => {\n    if (matched) {\n      return\n    }\n\n    const match = inputRuleMatcherHandler(textBefore, rule.find)\n\n    if (!match) {\n      return\n    }\n\n    const tr = view.state.tr\n    const state = createChainableState({\n      state: view.state,\n      transaction: tr,\n    })\n    const range = {\n      from: from - (match[0].length - text.length),\n      to,\n    }\n\n    const { commands, chain, can } = new CommandManager({\n      editor,\n      state,\n    })\n\n    const handler = rule.handler({\n      state,\n      range,\n      match,\n      commands,\n      chain,\n      can,\n    })\n\n    // stop if there are no changes\n    if (handler === null || !tr.steps.length) {\n      return\n    }\n\n    // store transform as meta data\n    // so we can undo input rules within the `undoInputRules` command\n    tr.setMeta(plugin, {\n      transform: tr,\n      from,\n      to,\n      text,\n    })\n\n    view.dispatch(tr)\n    matched = true\n  })\n\n  return matched\n}\n\n/**\n * Create an input rules plugin. When enabled, it will cause text\n * input that matches any of the given rules to trigger the rule\u2019s\n * action.\n */\nexport function inputRulesPlugin(props: { editor: Editor, rules: InputRule[] }): Plugin {\n  const { editor, rules } = props\n  const plugin = new Plugin({\n    state: {\n      init() {\n        return null\n      },\n      apply(tr, prev) {\n        const stored = tr.getMeta(this)\n\n        if (stored) {\n          return stored\n        }\n\n        return tr.selectionSet || tr.docChanged\n          ? null\n          : prev\n      },\n    },\n\n    props: {\n      handleTextInput(view, from, to, text) {\n        return run({\n          editor,\n          from,\n          to,\n          text,\n          rules,\n          plugin,\n        })\n      },\n\n      handleDOMEvents: {\n        compositionend: view => {\n          setTimeout(() => {\n            const { $cursor } = view.state.selection as TextSelection\n\n            if ($cursor) {\n              run({\n                editor,\n                from: $cursor.pos,\n                to: $cursor.pos,\n                text: '',\n                rules,\n                plugin,\n              })\n            }\n          })\n\n          return false\n        },\n      },\n\n      // add support for input rules to trigger on enter\n      // this is useful for example for code blocks\n      handleKeyDown(view, event) {\n        if (event.key !== 'Enter') {\n          return false\n        }\n\n        const { $cursor } = view.state.selection as TextSelection\n\n        if ($cursor) {\n          return run({\n            editor,\n            from: $cursor.pos,\n            to: $cursor.pos,\n            text: '\\n',\n            rules,\n            plugin,\n          })\n        }\n\n        return false\n      },\n    },\n\n    // @ts-ignore\n    isInputRules: true,\n  }) as Plugin\n\n  return plugin\n}\n", "export function isNumber(value: any): value is number {\n  return typeof value === 'number'\n}\n", "import { EditorState, Plugin } from 'prosemirror-state'\nimport { Editor } from './Editor'\nimport { CommandManager } from './CommandManager'\nimport { createChainableState } from './helpers/createChainableState'\nimport { isRegExp } from './utilities/isRegExp'\nimport { isNumber } from './utilities/isNumber'\nimport {\n  Range,\n  ExtendedRegExpMatchArray,\n  SingleCommands,\n  ChainedCommands,\n  CanCommands,\n} from './types'\n\nexport type PasteRuleMatch = {\n  index: number,\n  text: string,\n  replaceWith?: string,\n  match?: RegExpMatchArray,\n  data?: Record<string, any>,\n}\n\nexport type PasteRuleFinder =\n  | RegExp\n  | ((text: string) => PasteRuleMatch[] | null | undefined)\n\nexport class PasteRule {\n  find: PasteRuleFinder\n\n  handler: (props: {\n    state: EditorState,\n    range: Range,\n    match: ExtendedRegExpMatchArray,\n    commands: SingleCommands,\n    chain: () => ChainedCommands,\n    can: () => CanCommands,\n  }) => void | null\n\n  constructor(config: {\n    find: PasteRuleFinder,\n    handler: (props: {\n      state: EditorState,\n      range: Range,\n      match: ExtendedRegExpMatchArray,\n      commands: SingleCommands,\n      chain: () => ChainedCommands,\n      can: () => CanCommands,\n    }) => void | null,\n  }) {\n    this.find = config.find\n    this.handler = config.handler\n  }\n}\n\nconst pasteRuleMatcherHandler = (text: string, find: PasteRuleFinder): ExtendedRegExpMatchArray[] => {\n  if (isRegExp(find)) {\n    return [...text.matchAll(find)]\n  }\n\n  const matches = find(text)\n\n  if (!matches) {\n    return []\n  }\n\n  return matches.map(pasteRuleMatch => {\n    const result: ExtendedRegExpMatchArray = []\n\n    result.push(pasteRuleMatch.text)\n    result.index = pasteRuleMatch.index\n    result.input = text\n    result.data = pasteRuleMatch.data\n\n    if (pasteRuleMatch.replaceWith) {\n      if (!pasteRuleMatch.text.includes(pasteRuleMatch.replaceWith)) {\n        console.warn('[tiptap warn]: \"pasteRuleMatch.replaceWith\" must be part of \"pasteRuleMatch.text\".')\n      }\n\n      result.push(pasteRuleMatch.replaceWith)\n    }\n\n    return result\n  })\n}\n\nfunction run(config: {\n  editor: Editor,\n  state: EditorState,\n  from: number,\n  to: number,\n  rule: PasteRule,\n}): boolean {\n  const {\n    editor,\n    state,\n    from,\n    to,\n    rule,\n  } = config\n\n  const { commands, chain, can } = new CommandManager({\n    editor,\n    state,\n  })\n\n  const handlers: (void | null)[] = []\n\n  state.doc.nodesBetween(from, to, (node, pos) => {\n    if (!node.isTextblock || node.type.spec.code) {\n      return\n    }\n\n    const resolvedFrom = Math.max(from, pos)\n    const resolvedTo = Math.min(to, pos + node.content.size)\n    const textToMatch = node.textBetween(\n      resolvedFrom - pos,\n      resolvedTo - pos,\n      undefined,\n      '\\ufffc',\n    )\n\n    const matches = pasteRuleMatcherHandler(textToMatch, rule.find)\n\n    matches.forEach(match => {\n      if (match.index === undefined) {\n        return\n      }\n\n      const start = resolvedFrom + match.index + 1\n      const end = start + match[0].length\n      const range = {\n        from: state.tr.mapping.map(start),\n        to: state.tr.mapping.map(end),\n      }\n\n      const handler = rule.handler({\n        state,\n        range,\n        match,\n        commands,\n        chain,\n        can,\n      })\n\n      handlers.push(handler)\n    })\n  })\n\n  const success = handlers.every(handler => handler !== null)\n\n  return success\n}\n\n/**\n * Create an paste rules plugin. When enabled, it will cause pasted\n * text that matches any of the given rules to trigger the rule\u2019s\n * action.\n */\nexport function pasteRulesPlugin(props: { editor: Editor, rules: PasteRule[] }): Plugin[] {\n  const { editor, rules } = props\n  let dragSourceElement: Element | null = null\n  let isPastedFromProseMirror = false\n  let isDroppedFromProseMirror = false\n\n  const plugins = rules.map(rule => {\n    return new Plugin({\n      // we register a global drag handler to track the current drag source element\n      view(view) {\n        const handleDragstart = (event: DragEvent) => {\n          dragSourceElement = view.dom.parentElement?.contains(event.target as Element)\n            ? view.dom.parentElement\n            : null\n        }\n\n        window.addEventListener('dragstart', handleDragstart)\n\n        return {\n          destroy() {\n            window.removeEventListener('dragstart', handleDragstart)\n          },\n        }\n      },\n\n      props: {\n        handleDOMEvents: {\n          drop: view => {\n            isDroppedFromProseMirror = dragSourceElement === view.dom.parentElement\n\n            return false\n          },\n\n          paste: (view, event) => {\n            const html = event.clipboardData?.getData('text/html')\n\n            isPastedFromProseMirror = !!html?.includes('data-pm-slice')\n\n            return false\n          },\n        },\n      },\n\n      appendTransaction: (transactions, oldState, state) => {\n        const transaction = transactions[0]\n        const isPaste = transaction.getMeta('uiEvent') === 'paste' && !isPastedFromProseMirror\n        const isDrop = transaction.getMeta('uiEvent') === 'drop' && !isDroppedFromProseMirror\n\n        if (!isPaste && !isDrop) {\n          return\n        }\n\n        // stop if there is no changed range\n        const from = oldState.doc.content.findDiffStart(state.doc.content)\n        const to = oldState.doc.content.findDiffEnd(state.doc.content)\n\n        if (!isNumber(from) || !to || from === to.b) {\n          return\n        }\n\n        // build a chainable state\n        // so we can use a single transaction for all paste rules\n        const tr = state.tr\n        const chainableState = createChainableState({\n          state,\n          transaction: tr,\n        })\n\n        const handler = run({\n          editor,\n          state: chainableState,\n          from: Math.max(from - 1, 0),\n          to: to.b,\n          rule,\n        })\n\n        // stop if there are no changes\n        if (!handler || !tr.steps.length) {\n          return\n        }\n\n        return tr\n      },\n    })\n  })\n\n  return plugins\n}\n", "import { splitExtensions } from './splitExtensions'\nimport { getExtensionField } from './getExtensionField'\nimport {\n  Extensions,\n  GlobalAttributes,\n  Attributes,\n  Attribute,\n  ExtensionAttribute,\n  AnyConfig,\n} from '../types'\nimport { NodeConfig, MarkConfig } from '..'\n\n/**\n * Get a list of all extension attributes defined in `addAttribute` and `addGlobalAttribute`.\n * @param extensions List of extensions\n */\nexport function getAttributesFromExtensions(extensions: Extensions): ExtensionAttribute[] {\n  const extensionAttributes: ExtensionAttribute[] = []\n  const { nodeExtensions, markExtensions } = splitExtensions(extensions)\n  const nodeAndMarkExtensions = [...nodeExtensions, ...markExtensions]\n  const defaultAttribute: Required<Attribute> = {\n    default: null,\n    rendered: true,\n    renderHTML: null,\n    parseHTML: null,\n    keepOnSplit: true,\n  }\n\n  extensions.forEach(extension => {\n    const context = {\n      name: extension.name,\n      options: extension.options,\n      storage: extension.storage,\n    }\n\n    const addGlobalAttributes = getExtensionField<AnyConfig['addGlobalAttributes']>(\n      extension,\n      'addGlobalAttributes',\n      context,\n    )\n\n    if (!addGlobalAttributes) {\n      return\n    }\n\n    // TODO: remove `as GlobalAttributes`\n    const globalAttributes = addGlobalAttributes() as GlobalAttributes\n\n    globalAttributes.forEach(globalAttribute => {\n      globalAttribute.types.forEach(type => {\n        Object\n          .entries(globalAttribute.attributes)\n          .forEach(([name, attribute]) => {\n            extensionAttributes.push({\n              type,\n              name,\n              attribute: {\n                ...defaultAttribute,\n                ...attribute,\n              },\n            })\n          })\n      })\n    })\n  })\n\n  nodeAndMarkExtensions.forEach(extension => {\n    const context = {\n      name: extension.name,\n      options: extension.options,\n      storage: extension.storage,\n    }\n\n    const addAttributes = getExtensionField<NodeConfig['addAttributes'] | MarkConfig['addAttributes']>(\n      extension,\n      'addAttributes',\n      context,\n    )\n\n    if (!addAttributes) {\n      return\n    }\n\n    // TODO: remove `as Attributes`\n    const attributes = addAttributes() as Attributes\n\n    Object\n      .entries(attributes)\n      .forEach(([name, attribute]) => {\n        extensionAttributes.push({\n          type: extension.name,\n          name,\n          attribute: {\n            ...defaultAttribute,\n            ...attribute,\n          },\n        })\n      })\n  })\n\n  return extensionAttributes\n}\n", "export function mergeAttributes(...objects: Record<string, any>[]): Record<string, any> {\n  return objects\n    .filter(item => !!item)\n    .reduce((items, item) => {\n      const mergedAttributes = { ...items }\n\n      Object.entries(item).forEach(([key, value]) => {\n        const exists = mergedAttributes[key]\n\n        if (!exists) {\n          mergedAttributes[key] = value\n\n          return\n        }\n\n        if (key === 'class') {\n          mergedAttributes[key] = [mergedAttributes[key], value].join(' ')\n        } else if (key === 'style') {\n          mergedAttributes[key] = [mergedAttributes[key], value].join('; ')\n        } else {\n          mergedAttributes[key] = value\n        }\n      })\n\n      return mergedAttributes\n    }, {})\n}\n", "import { Node, Mark } from 'prosemirror-model'\nimport { ExtensionAttribute } from '../types'\nimport { mergeAttributes } from '../utilities/mergeAttributes'\n\nexport function getRenderedAttributes(nodeOrMark: Node | Mark, extensionAttributes: ExtensionAttribute[]): Record<string, any> {\n  return extensionAttributes\n    .filter(item => item.attribute.rendered)\n    .map(item => {\n      if (!item.attribute.renderHTML) {\n        return {\n          [item.name]: nodeOrMark.attrs[item.name],\n        }\n      }\n\n      return item.attribute.renderHTML(nodeOrMark.attrs) || {}\n    })\n    .reduce((attributes, attribute) => mergeAttributes(attributes, attribute), {})\n}\n", "export function isEmptyObject(value = {}): boolean {\n  return Object.keys(value).length === 0 && value.constructor === Object\n}\n", "export function fromString(value: any): any {\n  if (typeof value !== 'string') {\n    return value\n  }\n\n  if (value.match(/^[+-]?(?:\\d*\\.)?\\d+$/)) {\n    return Number(value)\n  }\n\n  if (value === 'true') {\n    return true\n  }\n\n  if (value === 'false') {\n    return false\n  }\n\n  return value\n}\n", "import { ParseRule } from 'prosemirror-model'\nimport { ExtensionAttribute } from '../types'\nimport { fromString } from '../utilities/fromString'\n\n/**\n * This function merges extension attributes into parserule attributes (`attrs` or `getAttrs`).\n * Cancels when `getAttrs` returned `false`.\n * @param parseRule ProseMirror ParseRule\n * @param extensionAttributes List of attributes to inject\n */\nexport function injectExtensionAttributesToParseRule(parseRule: ParseRule, extensionAttributes: ExtensionAttribute[]): ParseRule {\n  if (parseRule.style) {\n    return parseRule\n  }\n\n  return {\n    ...parseRule,\n    getAttrs: node => {\n      const oldAttributes = parseRule.getAttrs\n        ? parseRule.getAttrs(node)\n        : parseRule.attrs\n\n      if (oldAttributes === false) {\n        return false\n      }\n\n      const newAttributes = extensionAttributes.reduce((items, item) => {\n        const value = item.attribute.parseHTML\n          ? item.attribute.parseHTML(node as HTMLElement)\n          : fromString((node as HTMLElement).getAttribute(item.name))\n\n        if (value === null || value === undefined) {\n          return items\n        }\n\n        return {\n          ...items,\n          [item.name]: value,\n        }\n      }, {})\n\n      return { ...oldAttributes, ...newAttributes }\n    },\n  }\n}\n", "import { NodeSpec, MarkSpec, Schema } from 'prosemirror-model'\nimport { AnyConfig, Extensions } from '../types'\nimport { NodeConfig, MarkConfig } from '..'\nimport { splitExtensions } from './splitExtensions'\nimport { getAttributesFromExtensions } from './getAttributesFromExtensions'\nimport { getRenderedAttributes } from './getRenderedAttributes'\nimport { isEmptyObject } from '../utilities/isEmptyObject'\nimport { injectExtensionAttributesToParseRule } from './injectExtensionAttributesToParseRule'\nimport { callOrReturn } from '../utilities/callOrReturn'\nimport { getExtensionField } from './getExtensionField'\n\nfunction cleanUpSchemaItem<T>(data: T) {\n  return Object.fromEntries(Object.entries(data).filter(([key, value]) => {\n    if (key === 'attrs' && isEmptyObject(value)) {\n      return false\n    }\n\n    return value !== null && value !== undefined\n  })) as T\n}\n\nexport function getSchemaByResolvedExtensions(extensions: Extensions): Schema {\n  const allAttributes = getAttributesFromExtensions(extensions)\n  const { nodeExtensions, markExtensions } = splitExtensions(extensions)\n  const topNode = nodeExtensions.find(extension => getExtensionField(extension, 'topNode'))?.name\n\n  const nodes = Object.fromEntries(nodeExtensions.map(extension => {\n    const extensionAttributes = allAttributes.filter(attribute => attribute.type === extension.name)\n    const context = {\n      name: extension.name,\n      options: extension.options,\n      storage: extension.storage,\n    }\n\n    const extraNodeFields = extensions.reduce((fields, e) => {\n      const extendNodeSchema = getExtensionField<AnyConfig['extendNodeSchema']>(\n        e,\n        'extendNodeSchema',\n        context,\n      )\n\n      return {\n        ...fields,\n        ...(extendNodeSchema ? extendNodeSchema(extension) : {}),\n      }\n    }, {})\n\n    const schema: NodeSpec = cleanUpSchemaItem({\n      ...extraNodeFields,\n      content: callOrReturn(getExtensionField<NodeConfig['content']>(extension, 'content', context)),\n      marks: callOrReturn(getExtensionField<NodeConfig['marks']>(extension, 'marks', context)),\n      group: callOrReturn(getExtensionField<NodeConfig['group']>(extension, 'group', context)),\n      inline: callOrReturn(getExtensionField<NodeConfig['inline']>(extension, 'inline', context)),\n      atom: callOrReturn(getExtensionField<NodeConfig['atom']>(extension, 'atom', context)),\n      selectable: callOrReturn(getExtensionField<NodeConfig['selectable']>(extension, 'selectable', context)),\n      draggable: callOrReturn(getExtensionField<NodeConfig['draggable']>(extension, 'draggable', context)),\n      code: callOrReturn(getExtensionField<NodeConfig['code']>(extension, 'code', context)),\n      defining: callOrReturn(getExtensionField<NodeConfig['defining']>(extension, 'defining', context)),\n      isolating: callOrReturn(getExtensionField<NodeConfig['isolating']>(extension, 'isolating', context)),\n      attrs: Object.fromEntries(extensionAttributes.map(extensionAttribute => {\n        return [extensionAttribute.name, { default: extensionAttribute?.attribute?.default }]\n      })),\n    })\n\n    const parseHTML = callOrReturn(getExtensionField<NodeConfig['parseHTML']>(extension, 'parseHTML', context))\n\n    if (parseHTML) {\n      schema.parseDOM = parseHTML\n        .map(parseRule => injectExtensionAttributesToParseRule(parseRule, extensionAttributes))\n    }\n\n    const renderHTML = getExtensionField<NodeConfig['renderHTML']>(extension, 'renderHTML', context)\n\n    if (renderHTML) {\n      schema.toDOM = node => renderHTML({\n        node,\n        HTMLAttributes: getRenderedAttributes(node, extensionAttributes),\n      })\n    }\n\n    const renderText = getExtensionField<NodeConfig['renderText']>(extension, 'renderText', context)\n\n    if (renderText) {\n      schema.toText = renderText\n    }\n\n    return [extension.name, schema]\n  }))\n\n  const marks = Object.fromEntries(markExtensions.map(extension => {\n    const extensionAttributes = allAttributes.filter(attribute => attribute.type === extension.name)\n    const context = {\n      name: extension.name,\n      options: extension.options,\n      storage: extension.storage,\n    }\n\n    const extraMarkFields = extensions.reduce((fields, e) => {\n      const extendMarkSchema = getExtensionField<AnyConfig['extendMarkSchema']>(\n        e,\n        'extendMarkSchema',\n        context,\n      )\n\n      return {\n        ...fields,\n        ...(extendMarkSchema ? extendMarkSchema(extension) : {}),\n      }\n    }, {})\n\n    const schema: MarkSpec = cleanUpSchemaItem({\n      ...extraMarkFields,\n      inclusive: callOrReturn(getExtensionField<MarkConfig['inclusive']>(extension, 'inclusive', context)),\n      excludes: callOrReturn(getExtensionField<MarkConfig['excludes']>(extension, 'excludes', context)),\n      group: callOrReturn(getExtensionField<MarkConfig['group']>(extension, 'group', context)),\n      spanning: callOrReturn(getExtensionField<MarkConfig['spanning']>(extension, 'spanning', context)),\n      code: callOrReturn(getExtensionField<MarkConfig['code']>(extension, 'code', context)),\n      attrs: Object.fromEntries(extensionAttributes.map(extensionAttribute => {\n        return [extensionAttribute.name, { default: extensionAttribute?.attribute?.default }]\n      })),\n    })\n\n    const parseHTML = callOrReturn(getExtensionField<MarkConfig['parseHTML']>(extension, 'parseHTML', context))\n\n    if (parseHTML) {\n      schema.parseDOM = parseHTML\n        .map(parseRule => injectExtensionAttributesToParseRule(parseRule, extensionAttributes))\n    }\n\n    const renderHTML = getExtensionField<MarkConfig['renderHTML']>(extension, 'renderHTML', context)\n\n    if (renderHTML) {\n      schema.toDOM = mark => renderHTML({\n        mark,\n        HTMLAttributes: getRenderedAttributes(mark, extensionAttributes),\n      })\n    }\n\n    return [extension.name, schema]\n  }))\n\n  return new Schema({\n    topNode,\n    nodes,\n    marks,\n  })\n}\n", "import { MarkType, NodeType, Schema } from 'prosemirror-model'\n\nexport function getSchemaTypeByName(name: string, schema: Schema): NodeType | MarkType | null {\n  return schema.nodes[name] || schema.marks[name] || null\n}\n", "import { AnyExtension, EnableRules } from '../types'\n\nexport function isExtensionRulesEnabled(extension: AnyExtension, enabled: EnableRules): boolean {\n  if (Array.isArray(enabled)) {\n    return enabled.some(enabledExtension => {\n      const name = typeof enabledExtension === 'string'\n        ? enabledExtension\n        : enabledExtension.name\n\n      return name === extension.name\n    })\n  }\n\n  return enabled\n}\n", "export function findDuplicates(items: any[]): any[] {\n  const filtered = items.filter((el, index) => items.indexOf(el) !== index)\n\n  return [...new Set(filtered)]\n}\n", "import { keymap } from 'prosemirror-keymap'\nimport { Schema, Node as ProsemirrorNode } from 'prosemirror-model'\nimport { inputRulesPlugin } from './InputRule'\nimport { pasteRulesPlugin } from './PasteRule'\nimport { EditorView, Decoration } from 'prosemirror-view'\nimport { Plugin } from 'prosemirror-state'\nimport { Editor } from './Editor'\nimport { Extensions, RawCommands, AnyConfig } from './types'\nimport { getExtensionField } from './helpers/getExtensionField'\nimport { getSchemaByResolvedExtensions } from './helpers/getSchemaByResolvedExtensions'\nimport { getSchemaTypeByName } from './helpers/getSchemaTypeByName'\nimport { getNodeType } from './helpers/getNodeType'\nimport { splitExtensions } from './helpers/splitExtensions'\nimport { getAttributesFromExtensions } from './helpers/getAttributesFromExtensions'\nimport { getRenderedAttributes } from './helpers/getRenderedAttributes'\nimport { isExtensionRulesEnabled } from './helpers/isExtensionRulesEnabled'\nimport { callOrReturn } from './utilities/callOrReturn'\nimport { findDuplicates } from './utilities/findDuplicates'\nimport { NodeConfig } from '.'\n\nexport class ExtensionManager {\n\n  editor: Editor\n\n  schema: Schema\n\n  extensions: Extensions\n\n  splittableMarks: string[] = []\n\n  constructor(extensions: Extensions, editor: Editor) {\n    this.editor = editor\n    this.extensions = ExtensionManager.resolve(extensions)\n    this.schema = getSchemaByResolvedExtensions(this.extensions)\n\n    this.extensions.forEach(extension => {\n      // store extension storage in editor\n      this.editor.extensionStorage[extension.name] = extension.storage\n\n      const context = {\n        name: extension.name,\n        options: extension.options,\n        storage: extension.storage,\n        editor: this.editor,\n        type: getSchemaTypeByName(extension.name, this.schema),\n      }\n\n      if (extension.type === 'mark') {\n        const keepOnSplit = callOrReturn(getExtensionField(extension, 'keepOnSplit', context)) ?? true\n\n        if (keepOnSplit) {\n          this.splittableMarks.push(extension.name)\n        }\n      }\n\n      const onBeforeCreate = getExtensionField<AnyConfig['onBeforeCreate']>(\n        extension,\n        'onBeforeCreate',\n        context,\n      )\n\n      if (onBeforeCreate) {\n        this.editor.on('beforeCreate', onBeforeCreate)\n      }\n\n      const onCreate = getExtensionField<AnyConfig['onCreate']>(\n        extension,\n        'onCreate',\n        context,\n      )\n\n      if (onCreate) {\n        this.editor.on('create', onCreate)\n      }\n\n      const onUpdate = getExtensionField<AnyConfig['onUpdate']>(\n        extension,\n        'onUpdate',\n        context,\n      )\n\n      if (onUpdate) {\n        this.editor.on('update', onUpdate)\n      }\n\n      const onSelectionUpdate = getExtensionField<AnyConfig['onSelectionUpdate']>(\n        extension,\n        'onSelectionUpdate',\n        context,\n      )\n\n      if (onSelectionUpdate) {\n        this.editor.on('selectionUpdate', onSelectionUpdate)\n      }\n\n      const onTransaction = getExtensionField<AnyConfig['onTransaction']>(\n        extension,\n        'onTransaction',\n        context,\n      )\n\n      if (onTransaction) {\n        this.editor.on('transaction', onTransaction)\n      }\n\n      const onFocus = getExtensionField<AnyConfig['onFocus']>(\n        extension,\n        'onFocus',\n        context,\n      )\n\n      if (onFocus) {\n        this.editor.on('focus', onFocus)\n      }\n\n      const onBlur = getExtensionField<AnyConfig['onBlur']>(\n        extension,\n        'onBlur',\n        context,\n      )\n\n      if (onBlur) {\n        this.editor.on('blur', onBlur)\n      }\n\n      const onDestroy = getExtensionField<AnyConfig['onDestroy']>(\n        extension,\n        'onDestroy',\n        context,\n      )\n\n      if (onDestroy) {\n        this.editor.on('destroy', onDestroy)\n      }\n    })\n  }\n\n  static resolve(extensions: Extensions): Extensions {\n    const resolvedExtensions = ExtensionManager.sort(ExtensionManager.flatten(extensions))\n    const duplicatedNames = findDuplicates(resolvedExtensions.map(extension => extension.name))\n\n    if (duplicatedNames.length) {\n      console.warn(`[tiptap warn]: Duplicate extension names found: [${duplicatedNames.map(item => `'${item}'`).join(', ')}]. This can lead to issues.`)\n    }\n\n    return resolvedExtensions\n  }\n\n  static flatten(extensions: Extensions): Extensions {\n    return extensions\n      .map(extension => {\n        const context = {\n          name: extension.name,\n          options: extension.options,\n          storage: extension.storage,\n        }\n\n        const addExtensions = getExtensionField<AnyConfig['addExtensions']>(\n          extension,\n          'addExtensions',\n          context,\n        )\n\n        if (addExtensions) {\n          return [\n            extension,\n            ...this.flatten(addExtensions()),\n          ]\n        }\n\n        return extension\n      })\n      // `Infinity` will break TypeScript so we set a number that is probably high enough\n      .flat(10)\n  }\n\n  static sort(extensions: Extensions): Extensions {\n    const defaultPriority = 100\n\n    return extensions.sort((a, b) => {\n      const priorityA = getExtensionField<AnyConfig['priority']>(a, 'priority') || defaultPriority\n      const priorityB = getExtensionField<AnyConfig['priority']>(b, 'priority') || defaultPriority\n\n      if (priorityA > priorityB) {\n        return -1\n      }\n\n      if (priorityA < priorityB) {\n        return 1\n      }\n\n      return 0\n    })\n  }\n\n  get commands(): RawCommands {\n    return this.extensions.reduce((commands, extension) => {\n      const context = {\n        name: extension.name,\n        options: extension.options,\n        storage: extension.storage,\n        editor: this.editor,\n        type: getSchemaTypeByName(extension.name, this.schema),\n      }\n\n      const addCommands = getExtensionField<AnyConfig['addCommands']>(\n        extension,\n        'addCommands',\n        context,\n      )\n\n      if (!addCommands) {\n        return commands\n      }\n\n      return {\n        ...commands,\n        ...addCommands(),\n      }\n    }, {} as RawCommands)\n  }\n\n  get plugins(): Plugin[] {\n    const { editor } = this\n\n    // With ProseMirror, first plugins within an array are executed first.\n    // In tiptap, we provide the ability to override plugins,\n    // so it feels more natural to run plugins at the end of an array first.\n    // That\u2019s why we have to reverse the `extensions` array and sort again\n    // based on the `priority` option.\n    const extensions = ExtensionManager.sort([...this.extensions].reverse())\n\n    const inputRules: any[] = []\n    const pasteRules: any[] = []\n\n    const allPlugins = extensions\n      .map(extension => {\n        const context = {\n          name: extension.name,\n          options: extension.options,\n          storage: extension.storage,\n          editor,\n          type: getSchemaTypeByName(extension.name, this.schema),\n        }\n\n        const plugins: Plugin[] = []\n\n        const addKeyboardShortcuts = getExtensionField<AnyConfig['addKeyboardShortcuts']>(\n          extension,\n          'addKeyboardShortcuts',\n          context,\n        )\n\n        if (addKeyboardShortcuts) {\n          const bindings = Object.fromEntries(\n            Object\n              .entries(addKeyboardShortcuts())\n              .map(([shortcut, method]) => {\n                return [shortcut, () => method({ editor })]\n              }),\n          )\n\n          const keyMapPlugin = keymap(bindings)\n\n          plugins.push(keyMapPlugin)\n        }\n\n        const addInputRules = getExtensionField<AnyConfig['addInputRules']>(\n          extension,\n          'addInputRules',\n          context,\n        )\n\n        if (isExtensionRulesEnabled(extension, editor.options.enableInputRules) && addInputRules) {\n          inputRules.push(...addInputRules())\n        }\n\n        const addPasteRules = getExtensionField<AnyConfig['addPasteRules']>(\n          extension,\n          'addPasteRules',\n          context,\n        )\n\n        if (isExtensionRulesEnabled(extension, editor.options.enablePasteRules) && addPasteRules) {\n          pasteRules.push(...addPasteRules())\n        }\n\n        const addProseMirrorPlugins = getExtensionField<AnyConfig['addProseMirrorPlugins']>(\n          extension,\n          'addProseMirrorPlugins',\n          context,\n        )\n\n        if (addProseMirrorPlugins) {\n          const proseMirrorPlugins = addProseMirrorPlugins()\n\n          plugins.push(...proseMirrorPlugins)\n        }\n\n        return plugins\n      })\n      .flat()\n\n    return [\n      inputRulesPlugin({\n        editor,\n        rules: inputRules,\n      }),\n      ...pasteRulesPlugin({\n        editor,\n        rules: pasteRules,\n      }),\n      ...allPlugins,\n    ]\n  }\n\n  get attributes() {\n    return getAttributesFromExtensions(this.extensions)\n  }\n\n  get nodeViews() {\n    const { editor } = this\n    const { nodeExtensions } = splitExtensions(this.extensions)\n\n    return Object.fromEntries(nodeExtensions\n      .filter(extension => !!getExtensionField(extension, 'addNodeView'))\n      .map(extension => {\n        const extensionAttributes = this.attributes.filter(attribute => attribute.type === extension.name)\n        const context = {\n          name: extension.name,\n          options: extension.options,\n          storage: extension.storage,\n          editor,\n          type: getNodeType(extension.name, this.schema),\n        }\n        const addNodeView = getExtensionField<NodeConfig['addNodeView']>(\n          extension,\n          'addNodeView',\n          context,\n        )\n\n        if (!addNodeView) {\n          return []\n        }\n\n        const nodeview = (\n          node: ProsemirrorNode,\n          view: EditorView,\n          getPos: (() => number) | boolean,\n          decorations: Decoration[],\n        ) => {\n          const HTMLAttributes = getRenderedAttributes(node, extensionAttributes)\n\n          return addNodeView()({\n            editor,\n            node,\n            getPos,\n            decorations,\n            HTMLAttributes,\n            extension,\n          })\n        }\n\n        return [extension.name, nodeview]\n      }))\n  }\n}\n", "type StringKeyOf<T> = Extract<keyof T, string>\ntype CallbackType<\n  T extends Record<string, any>,\n  EventName extends StringKeyOf<T>,\n> = T[EventName] extends any[] ? T[EventName] : [T[EventName]]\ntype CallbackFunction<\n  T extends Record<string, any>,\n  EventName extends StringKeyOf<T>,\n> = (...props: CallbackType<T, EventName>) => any\n\nexport class EventEmitter<T extends Record<string, any>> {\n\n  private callbacks: { [key: string]: Function[] } = {}\n\n  public on<EventName extends StringKeyOf<T>>(event: EventName, fn: CallbackFunction<T, EventName>): this {\n    if (!this.callbacks[event]) {\n      this.callbacks[event] = []\n    }\n\n    this.callbacks[event].push(fn)\n\n    return this\n  }\n\n  protected emit<EventName extends StringKeyOf<T>>(event: EventName, ...args: CallbackType<T, EventName>): this {\n    const callbacks = this.callbacks[event]\n\n    if (callbacks) {\n      callbacks.forEach(callback => callback.apply(this, args))\n    }\n\n    return this\n  }\n\n  public off<EventName extends StringKeyOf<T>>(event: EventName, fn?: CallbackFunction<T, EventName>): this {\n    const callbacks = this.callbacks[event]\n\n    if (callbacks) {\n      if (fn) {\n        this.callbacks[event] = callbacks.filter(callback => callback !== fn)\n      } else {\n        delete this.callbacks[event]\n      }\n    }\n\n    return this\n  }\n\n  protected removeAllListeners(): void {\n    this.callbacks = {}\n  }\n}\n", "export const style = `.ProseMirror {\n  position: relative;\n}\n\n.ProseMirror {\n  word-wrap: break-word;\n  white-space: pre-wrap;\n  white-space: break-spaces;\n  -webkit-font-variant-ligatures: none;\n  font-variant-ligatures: none;\n  font-feature-settings: \"liga\" 0; /* the above doesn't seem to work in Edge */\n}\n\n.ProseMirror [contenteditable=\"false\"] {\n  white-space: normal;\n}\n\n.ProseMirror [contenteditable=\"false\"] [contenteditable=\"true\"] {\n  white-space: pre-wrap;\n}\n\n.ProseMirror pre {\n  white-space: pre-wrap;\n}\n\nimg.ProseMirror-separator {\n  display: inline !important;\n  border: none !important;\n  margin: 0 !important;\n  width: 1px !important;\n  height: 1px !important;\n}\n\n.ProseMirror-gapcursor {\n  display: none;\n  pointer-events: none;\n  position: absolute;\n  margin: 0;\n}\n\n.ProseMirror-gapcursor:after {\n  content: \"\";\n  display: block;\n  position: absolute;\n  top: -2px;\n  width: 20px;\n  border-top: 1px solid black;\n  animation: ProseMirror-cursor-blink 1.1s steps(2, start) infinite;\n}\n\n@keyframes ProseMirror-cursor-blink {\n  to {\n    visibility: hidden;\n  }\n}\n\n.ProseMirror-hideselection *::selection {\n  background: transparent;\n}\n\n.ProseMirror-hideselection *::-moz-selection {\n  background: transparent;\n}\n\n.ProseMirror-hideselection * {\n  caret-color: transparent;\n}\n\n.ProseMirror-focused .ProseMirror-gapcursor {\n  display: block;\n}\n\n.tippy-box[data-animation=fade][data-state=hidden] {\n  opacity: 0\n}`\n", "import {\n  EditorState,\n  Plugin,\n  PluginKey,\n  Transaction,\n} from 'prosemirror-state'\nimport { EditorView } from 'prosemirror-view'\nimport { Schema, MarkType, NodeType } from 'prosemirror-model'\nimport { getAttributes } from './helpers/getAttributes'\nimport { isActive } from './helpers/isActive'\nimport { createDocument } from './helpers/createDocument'\nimport { getHTMLFromFragment } from './helpers/getHTMLFromFragment'\nimport { getText } from './helpers/getText'\nimport { isNodeEmpty } from './helpers/isNodeEmpty'\nimport { resolveFocusPosition } from './helpers/resolveFocusPosition'\nimport { getTextSeralizersFromSchema } from './helpers/getTextSeralizersFromSchema'\nimport { createStyleTag } from './utilities/createStyleTag'\nimport { isFunction } from './utilities/isFunction'\nimport { CommandManager } from './CommandManager'\nimport { ExtensionManager } from './ExtensionManager'\nimport { EventEmitter } from './EventEmitter'\nimport {\n  EditorOptions,\n  CanCommands,\n  ChainedCommands,\n  JSONContent,\n  SingleCommands,\n  TextSerializer,\n  EditorEvents,\n} from './types'\nimport * as extensions from './extensions'\nimport { style } from './style'\n\nexport { extensions }\n\nexport interface HTMLElement {\n  editor?: Editor\n}\n\nexport class Editor extends EventEmitter<EditorEvents> {\n\n  private commandManager!: CommandManager\n\n  public extensionManager!: ExtensionManager\n\n  private css!: HTMLStyleElement\n\n  public schema!: Schema\n\n  public view!: EditorView\n\n  public isFocused = false\n\n  public extensionStorage: Record<string, any> = {}\n\n  public options: EditorOptions = {\n    element: document.createElement('div'),\n    content: '',\n    injectCSS: true,\n    extensions: [],\n    autofocus: false,\n    editable: true,\n    editorProps: {},\n    parseOptions: {},\n    enableInputRules: true,\n    enablePasteRules: true,\n    enableCoreExtensions: true,\n    onBeforeCreate: () => null,\n    onCreate: () => null,\n    onUpdate: () => null,\n    onSelectionUpdate: () => null,\n    onTransaction: () => null,\n    onFocus: () => null,\n    onBlur: () => null,\n    onDestroy: () => null,\n  }\n\n  constructor(options: Partial<EditorOptions> = {}) {\n    super()\n    this.setOptions(options)\n    this.createExtensionManager()\n    this.createCommandManager()\n    this.createSchema()\n    this.on('beforeCreate', this.options.onBeforeCreate)\n    this.emit('beforeCreate', { editor: this })\n    this.createView()\n    this.injectCSS()\n    this.on('create', this.options.onCreate)\n    this.on('update', this.options.onUpdate)\n    this.on('selectionUpdate', this.options.onSelectionUpdate)\n    this.on('transaction', this.options.onTransaction)\n    this.on('focus', this.options.onFocus)\n    this.on('blur', this.options.onBlur)\n    this.on('destroy', this.options.onDestroy)\n\n    window.setTimeout(() => {\n      if (this.isDestroyed) {\n        return\n      }\n\n      this.commands.focus(this.options.autofocus)\n      this.emit('create', { editor: this })\n    }, 0)\n  }\n\n  /**\n   * Returns the editor storage.\n   */\n  public get storage(): Record<string, any> {\n    return this.extensionStorage\n  }\n\n  /**\n   * An object of all registered commands.\n   */\n  public get commands(): SingleCommands {\n    return this.commandManager.commands\n  }\n\n  /**\n   * Create a command chain to call multiple commands at once.\n   */\n  public chain(): ChainedCommands {\n    return this.commandManager.chain()\n  }\n\n  /**\n   * Check if a command or a command chain can be executed. Without executing it.\n   */\n  public can(): CanCommands {\n    return this.commandManager.can()\n  }\n\n  /**\n   * Inject CSS styles.\n   */\n  private injectCSS(): void {\n    if (this.options.injectCSS && document) {\n      this.css = createStyleTag(style)\n    }\n  }\n\n  /**\n   * Update editor options.\n   *\n   * @param options A list of options\n   */\n  public setOptions(options: Partial<EditorOptions> = {}): void {\n    this.options = {\n      ...this.options,\n      ...options,\n    }\n\n    if (!this.view || !this.state || this.isDestroyed) {\n      return\n    }\n\n    if (this.options.editorProps) {\n      this.view.setProps(this.options.editorProps)\n    }\n\n    this.view.updateState(this.state)\n  }\n\n  /**\n   * Update editable state of the editor.\n   */\n  public setEditable(editable: boolean): void {\n    this.setOptions({ editable })\n  }\n\n  /**\n   * Returns whether the editor is editable.\n   */\n  public get isEditable(): boolean {\n    // since plugins are applied after creating the view\n    // `editable` is always `true` for one tick.\n    // that\u2019s why we also have to check for `options.editable`\n    return this.options.editable\n      && this.view\n      && this.view.editable\n  }\n\n  /**\n   * Returns the editor state.\n   */\n  public get state(): EditorState {\n    return this.view.state\n  }\n\n  /**\n   * Register a ProseMirror plugin.\n   *\n   * @param plugin A ProseMirror plugin\n   * @param handlePlugins Control how to merge the plugin into the existing plugins.\n   */\n  public registerPlugin(plugin: Plugin, handlePlugins?: (newPlugin: Plugin, plugins: Plugin[]) => Plugin[]): void {\n    const plugins = isFunction(handlePlugins)\n      ? handlePlugins(plugin, this.state.plugins)\n      : [...this.state.plugins, plugin]\n\n    const state = this.state.reconfigure({ plugins })\n\n    this.view.updateState(state)\n  }\n\n  /**\n   * Unregister a ProseMirror plugin.\n   *\n   * @param nameOrPluginKey The plugins name\n   */\n  public unregisterPlugin(nameOrPluginKey: string | PluginKey): void {\n    if (this.isDestroyed) {\n      return\n    }\n\n    const name = typeof nameOrPluginKey === 'string'\n      ? `${nameOrPluginKey}$`\n      // @ts-ignore\n      : nameOrPluginKey.key\n\n    const state = this.state.reconfigure({\n      // @ts-ignore\n      plugins: this.state.plugins.filter(plugin => !plugin.key.startsWith(name)),\n    })\n\n    this.view.updateState(state)\n  }\n\n  /**\n   * Creates an extension manager.\n   */\n  private createExtensionManager(): void {\n    const coreExtensions = this.options.enableCoreExtensions\n      ? Object.values(extensions)\n      : []\n    const allExtensions = [...coreExtensions, ...this.options.extensions].filter(extension => {\n      return ['extension', 'node', 'mark'].includes(extension?.type)\n    })\n\n    this.extensionManager = new ExtensionManager(allExtensions, this)\n  }\n\n  /**\n   * Creates an command manager.\n   */\n  private createCommandManager(): void {\n    this.commandManager = new CommandManager({\n      editor: this,\n    })\n  }\n\n  /**\n   * Creates a ProseMirror schema.\n   */\n  private createSchema(): void {\n    this.schema = this.extensionManager.schema\n  }\n\n  /**\n   * Creates a ProseMirror view.\n   */\n  private createView(): void {\n    const doc = createDocument(this.options.content, this.schema, this.options.parseOptions)\n    const selection = resolveFocusPosition(doc, this.options.autofocus)\n\n    this.view = new EditorView(this.options.element, {\n      ...this.options.editorProps,\n      dispatchTransaction: this.dispatchTransaction.bind(this),\n      state: EditorState.create({\n        doc,\n        selection,\n      }),\n    })\n\n    // `editor.view` is not yet available at this time.\n    // Therefore we will add all plugins and node views directly afterwards.\n    const newState = this.state.reconfigure({\n      plugins: this.extensionManager.plugins,\n    })\n\n    this.view.updateState(newState)\n\n    this.createNodeViews()\n\n    // Let\u2019s store the editor instance in the DOM element.\n    // So we\u2019ll have access to it for tests.\n    const dom = this.view.dom as HTMLElement\n\n    dom.editor = this\n  }\n\n  /**\n   * Creates all node views.\n   */\n  public createNodeViews(): void {\n    this.view.setProps({\n      nodeViews: this.extensionManager.nodeViews,\n    })\n  }\n\n  public isCapturingTransaction = false\n\n  private capturedTransaction: Transaction | null = null\n\n  public captureTransaction(fn: Function) {\n    this.isCapturingTransaction = true\n    fn()\n    this.isCapturingTransaction = false\n\n    const tr = this.capturedTransaction\n\n    this.capturedTransaction = null\n\n    return tr\n  }\n\n  /**\n   * The callback over which to send transactions (state updates) produced by the view.\n   *\n   * @param transaction An editor state transaction\n   */\n  private dispatchTransaction(transaction: Transaction): void {\n    if (this.isCapturingTransaction) {\n      if (!this.capturedTransaction) {\n        this.capturedTransaction = transaction\n\n        return\n      }\n\n      transaction.steps.forEach(step => this.capturedTransaction?.step(step))\n\n      return\n    }\n\n    const state = this.state.apply(transaction)\n    const selectionHasChanged = !this.state.selection.eq(state.selection)\n\n    this.view.updateState(state)\n    this.emit('transaction', {\n      editor: this,\n      transaction,\n    })\n\n    if (selectionHasChanged) {\n      this.emit('selectionUpdate', {\n        editor: this,\n        transaction,\n      })\n    }\n\n    const focus = transaction.getMeta('focus')\n    const blur = transaction.getMeta('blur')\n\n    if (focus) {\n      this.emit('focus', {\n        editor: this,\n        event: focus.event,\n        transaction,\n      })\n    }\n\n    if (blur) {\n      this.emit('blur', {\n        editor: this,\n        event: blur.event,\n        transaction,\n      })\n    }\n\n    if (!transaction.docChanged || transaction.getMeta('preventUpdate')) {\n      return\n    }\n\n    this.emit('update', {\n      editor: this,\n      transaction,\n    })\n  }\n\n  /**\n   * Get attributes of the currently selected node or mark.\n   */\n  public getAttributes(nameOrType: string | NodeType | MarkType): Record<string, any> {\n    return getAttributes(this.state, nameOrType)\n  }\n\n  /**\n   * Returns if the currently selected node or mark is active.\n   *\n   * @param name Name of the node or mark\n   * @param attributes Attributes of the node or mark\n   */\n  public isActive(name: string, attributes?: {}): boolean;\n  public isActive(attributes: {}): boolean;\n  public isActive(nameOrAttributes: string, attributesOrUndefined?: {}): boolean {\n    const name = typeof nameOrAttributes === 'string'\n      ? nameOrAttributes\n      : null\n\n    const attributes = typeof nameOrAttributes === 'string'\n      ? attributesOrUndefined\n      : nameOrAttributes\n\n    return isActive(this.state, name, attributes)\n  }\n\n  /**\n   * Get the document as JSON.\n   */\n  public getJSON(): JSONContent {\n    return this.state.doc.toJSON()\n  }\n\n  /**\n   * Get the document as HTML.\n   */\n  public getHTML(): string {\n    return getHTMLFromFragment(this.state.doc.content, this.schema)\n  }\n\n  /**\n   * Get the document as text.\n   */\n  public getText(options?: {\n    blockSeparator?: string,\n    textSerializers?: Record<string, TextSerializer>,\n  }): string {\n    const {\n      blockSeparator = '\\n\\n',\n      textSerializers = {},\n    } = options || {}\n\n    return getText(this.state.doc, {\n      blockSeparator,\n      textSerializers: {\n        ...textSerializers,\n        ...getTextSeralizersFromSchema(this.schema),\n      },\n    })\n  }\n\n  /**\n   * Check if there is no content.\n   */\n  public get isEmpty(): boolean {\n    return isNodeEmpty(this.state.doc)\n  }\n\n  /**\n   * Get the number of characters for the current document.\n   *\n   * @deprecated\n   */\n  public getCharacterCount(): number {\n    console.warn('[tiptap warn]: \"editor.getCharacterCount()\" is deprecated. Please use \"editor.storage.characterCount.characters()\" instead.')\n\n    return this.state.doc.content.size - 2\n  }\n\n  /**\n   * Destroy the editor.\n   */\n  public destroy(): void {\n    this.emit('destroy')\n\n    if (this.view) {\n      this.view.destroy()\n    }\n\n    this.removeAllListeners()\n  }\n\n  /**\n   * Check if the editor is already destroyed.\n   */\n  public get isDestroyed(): boolean {\n    // @ts-ignore\n    return !this.view?.docView\n  }\n\n}\n", "import {\n  DOMOutputSpec,\n  NodeSpec,\n  Node as ProseMirrorNode,\n  NodeType,\n} from 'prosemirror-model'\nimport { Plugin, Transaction } from 'prosemirror-state'\nimport { InputRule } from './InputRule'\nimport { PasteRule } from './PasteRule'\nimport { mergeDeep } from './utilities/mergeDeep'\nimport { callOrReturn } from './utilities/callOrReturn'\nimport { getExtensionField } from './helpers/getExtensionField'\nimport {\n  AnyConfig,\n  Extensions,\n  Attributes,\n  NodeViewRenderer,\n  GlobalAttributes,\n  RawCommands,\n  ParentConfig,\n  KeyboardShortcutCommand,\n} from './types'\nimport { NodeConfig } from '.'\nimport { Editor } from './Editor'\n\ndeclare module '@tiptap/core' {\n  interface NodeConfig<Options = any, Storage = any> {\n    [key: string]: any;\n\n    /**\n     * Name\n     */\n    name: string,\n\n    /**\n     * Priority\n     */\n    priority?: number,\n\n    /**\n     * Default options\n     */\n    defaultOptions?: Options,\n\n    /**\n     * Default Options\n     */\n    addOptions?: (this: {\n      name: string,\n      parent: Exclude<ParentConfig<NodeConfig<Options, Storage>>['addOptions'], undefined>,\n    }) => Options,\n\n    /**\n     * Default Storage\n     */\n    addStorage?: (this: {\n      name: string,\n      options: Options,\n      parent: Exclude<ParentConfig<NodeConfig<Options, Storage>>['addStorage'], undefined>,\n    }) => Storage,\n\n    /**\n     * Global attributes\n     */\n    addGlobalAttributes?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['addGlobalAttributes'],\n    }) => GlobalAttributes | {},\n\n    /**\n     * Raw\n     */\n    addCommands?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: NodeType,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['addCommands'],\n    }) => Partial<RawCommands>,\n\n    /**\n     * Keyboard shortcuts\n     */\n    addKeyboardShortcuts?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: NodeType,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['addKeyboardShortcuts'],\n    }) => {\n      [key: string]: KeyboardShortcutCommand,\n    },\n\n    /**\n     * Input rules\n     */\n    addInputRules?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: NodeType,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['addInputRules'],\n    }) => InputRule[],\n\n    /**\n     * Paste rules\n     */\n    addPasteRules?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: NodeType,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['addPasteRules'],\n    }) => PasteRule[],\n\n    /**\n     * ProseMirror plugins\n     */\n    addProseMirrorPlugins?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: NodeType,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['addProseMirrorPlugins'],\n    }) => Plugin[],\n\n    /**\n     * Extensions\n     */\n    addExtensions?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['addExtensions'],\n    }) => Extensions,\n\n    /**\n     * Extend Node Schema\n     */\n    extendNodeSchema?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        parent: ParentConfig<NodeConfig<Options, Storage>>['extendNodeSchema'],\n      },\n      extension: Node,\n    ) => Record<string, any>) | null,\n\n    /**\n     * Extend Mark Schema\n     */\n    extendMarkSchema?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        parent: ParentConfig<NodeConfig<Options, Storage>>['extendMarkSchema'],\n      },\n      extension: Node,\n    ) => Record<string, any>) | null,\n\n    /**\n     * The editor is not ready yet.\n     */\n    onBeforeCreate?: ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: NodeType,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['onBeforeCreate'],\n    }) => void) | null,\n\n    /**\n     * The editor is ready.\n     */\n    onCreate?: ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: NodeType,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['onCreate'],\n    }) => void) | null,\n\n    /**\n     * The content has changed.\n     */\n    onUpdate?: ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: NodeType,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['onUpdate'],\n    }) => void) | null,\n\n    /**\n     * The selection has changed.\n     */\n    onSelectionUpdate?: ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: NodeType,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['onSelectionUpdate'],\n    }) => void) | null,\n\n    /**\n     * The editor state has changed.\n     */\n    onTransaction?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        editor: Editor,\n        type: NodeType,\n        parent: ParentConfig<NodeConfig<Options, Storage>>['onTransaction'],\n      },\n      props: {\n        transaction: Transaction,\n      },\n    ) => void) | null,\n\n    /**\n     * The editor is focused.\n     */\n    onFocus?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        editor: Editor,\n        type: NodeType,\n        parent: ParentConfig<NodeConfig<Options, Storage>>['onFocus'],\n      },\n      props: {\n        event: FocusEvent,\n      },\n    ) => void) | null,\n\n    /**\n     * The editor isn\u2019t focused anymore.\n     */\n    onBlur?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        editor: Editor,\n        type: NodeType,\n        parent: ParentConfig<NodeConfig<Options, Storage>>['onBlur'],\n      },\n      props: {\n        event: FocusEvent,\n      },\n    ) => void) | null,\n\n    /**\n     * The editor is destroyed.\n     */\n    onDestroy?: ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: NodeType,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['onDestroy'],\n    }) => void) | null,\n\n    /**\n     * Node View\n     */\n    addNodeView?: ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: NodeType,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['addNodeView'],\n    }) => NodeViewRenderer) | null,\n\n    /**\n     * TopNode\n     */\n    topNode?: boolean,\n\n    /**\n     * Content\n     */\n    content?: NodeSpec['content'] | ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['content'],\n    }) => NodeSpec['content']),\n\n    /**\n     * Marks\n     */\n    marks?: NodeSpec['marks'] | ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['marks'],\n    }) => NodeSpec['marks']),\n\n    /**\n     * Group\n     */\n    group?: NodeSpec['group'] | ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['group'],\n    }) => NodeSpec['group']),\n\n    /**\n     * Inline\n     */\n    inline?: NodeSpec['inline'] | ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['inline'],\n    }) => NodeSpec['inline']),\n\n    /**\n     * Atom\n     */\n    atom?: NodeSpec['atom'] | ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['atom'],\n    }) => NodeSpec['atom']),\n\n    /**\n     * Selectable\n     */\n    selectable?: NodeSpec['selectable'] | ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['selectable'],\n    }) => NodeSpec['selectable']),\n\n    /**\n     * Draggable\n     */\n    draggable?: NodeSpec['draggable'] | ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['draggable'],\n    }) => NodeSpec['draggable']),\n\n    /**\n     * Code\n     */\n    code?: NodeSpec['code'] | ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['code'],\n    }) => NodeSpec['code']),\n\n    /**\n     * Whitespace\n     */\n    whitespace?: NodeSpec['whitespace'] | ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['whitespace'],\n    }) => NodeSpec['whitespace']),\n\n    /**\n     * Defining\n     */\n    defining?: NodeSpec['defining'] | ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['defining'],\n    }) => NodeSpec['defining']),\n\n    /**\n     * Isolating\n     */\n    isolating?: NodeSpec['isolating'] | ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['isolating'],\n    }) => NodeSpec['isolating']),\n\n    /**\n     * Parse HTML\n     */\n    parseHTML?: (\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        parent: ParentConfig<NodeConfig<Options, Storage>>['parseHTML'],\n      },\n    ) => NodeSpec['parseDOM'],\n\n    /**\n     * Render HTML\n     */\n    renderHTML?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        parent: ParentConfig<NodeConfig<Options, Storage>>['renderHTML'],\n      },\n      props: {\n        node: ProseMirrorNode,\n        HTMLAttributes: Record<string, any>,\n      }\n    ) => DOMOutputSpec) | null,\n\n    /**\n     * Render Text\n     */\n    renderText?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        parent: ParentConfig<NodeConfig<Options, Storage>>['renderText'],\n      },\n      props: {\n        node: ProseMirrorNode,\n        pos: number,\n        parent: ProseMirrorNode,\n        index: number,\n      }\n    ) => string) | null,\n\n    /**\n     * Add Attributes\n     */\n    addAttributes?: (\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        parent: ParentConfig<NodeConfig<Options, Storage>>['addAttributes'],\n      },\n    ) => Attributes | {},\n  }\n}\n\nexport class Node<Options = any, Storage = any> {\n  type = 'node'\n\n  name = 'node'\n\n  parent: Node | null = null\n\n  child: Node | null = null\n\n  options: Options\n\n  storage: Storage\n\n  config: NodeConfig = {\n    name: this.name,\n    defaultOptions: {},\n  }\n\n  constructor(config: Partial<NodeConfig<Options, Storage>> = {}) {\n    this.config = {\n      ...this.config,\n      ...config,\n    }\n\n    this.name = this.config.name\n\n    if (config.defaultOptions) {\n      console.warn(`[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${this.name}\".`)\n    }\n\n    // TODO: remove `addOptions` fallback\n    this.options = this.config.defaultOptions\n\n    if (this.config.addOptions) {\n      this.options = callOrReturn(getExtensionField<AnyConfig['addOptions']>(\n        this,\n        'addOptions',\n        {\n          name: this.name,\n        },\n      ))\n    }\n\n    this.storage = callOrReturn(getExtensionField<AnyConfig['addStorage']>(\n      this,\n      'addStorage',\n      {\n        name: this.name,\n        options: this.options,\n      },\n    )) || {}\n  }\n\n  static create<O = any, S = any>(config: Partial<NodeConfig<O, S>> = {}) {\n    return new Node<O, S>(config)\n  }\n\n  configure(options: Partial<Options> = {}) {\n    // return a new instance so we can use the same extension\n    // with different calls of `configure`\n    const extension = this.extend()\n\n    extension.options = mergeDeep(this.options, options) as Options\n\n    extension.storage = callOrReturn(getExtensionField<AnyConfig['addStorage']>(\n      extension,\n      'addStorage',\n      {\n        name: extension.name,\n        options: extension.options,\n      },\n    ))\n\n    return extension\n  }\n\n  extend<ExtendedOptions = Options, ExtendedStorage = Storage>(extendedConfig: Partial<NodeConfig<ExtendedOptions, ExtendedStorage>> = {}) {\n    const extension = new Node<ExtendedOptions, ExtendedStorage>(extendedConfig)\n\n    extension.parent = this\n\n    this.child = extension\n\n    extension.name = extendedConfig.name\n      ? extendedConfig.name\n      : extension.parent.name\n\n    if (extendedConfig.defaultOptions) {\n      console.warn(`[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${extension.name}\".`)\n    }\n\n    extension.options = callOrReturn(getExtensionField<AnyConfig['addOptions']>(\n      extension,\n      'addOptions',\n      {\n        name: extension.name,\n      },\n    ))\n\n    extension.storage = callOrReturn(getExtensionField<AnyConfig['addStorage']>(\n      extension,\n      'addStorage',\n      {\n        name: extension.name,\n        options: extension.options,\n      },\n    ))\n\n    return extension\n  }\n}\n", "import {\n  DOMOutputSpec,\n  MarkSpec,\n  Mark as ProseMirrorMark,\n  MarkType,\n} from 'prosemirror-model'\nimport { Plugin, Transaction } from 'prosemirror-state'\nimport { InputRule } from './InputRule'\nimport { PasteRule } from './PasteRule'\nimport { mergeDeep } from './utilities/mergeDeep'\nimport { callOrReturn } from './utilities/callOrReturn'\nimport { getExtensionField } from './helpers/getExtensionField'\nimport {\n  AnyConfig,\n  Extensions,\n  Attributes,\n  RawCommands,\n  GlobalAttributes,\n  ParentConfig,\n  KeyboardShortcutCommand,\n} from './types'\nimport { Node } from './Node'\nimport { MarkConfig } from '.'\nimport { Editor } from './Editor'\n\ndeclare module '@tiptap/core' {\n  export interface MarkConfig<Options = any, Storage = any> {\n    [key: string]: any;\n\n    /**\n     * Name\n     */\n    name: string,\n\n    /**\n     * Priority\n     */\n    priority?: number,\n\n    /**\n     * Default options\n     */\n    defaultOptions?: Options,\n\n    /**\n     * Default Options\n     */\n    addOptions?: (this: {\n      name: string,\n      parent: Exclude<ParentConfig<MarkConfig<Options, Storage>>['addOptions'], undefined>,\n    }) => Options,\n\n    /**\n     * Default Storage\n     */\n    addStorage?: (this: {\n      name: string,\n      options: Options,\n      parent: Exclude<ParentConfig<MarkConfig<Options, Storage>>['addStorage'], undefined>,\n    }) => Storage,\n\n    /**\n     * Global attributes\n     */\n    addGlobalAttributes?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['addGlobalAttributes'],\n    }) => GlobalAttributes | {},\n\n    /**\n     * Raw\n     */\n    addCommands?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: MarkType,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['addCommands'],\n    }) => Partial<RawCommands>,\n\n    /**\n     * Keyboard shortcuts\n     */\n    addKeyboardShortcuts?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: MarkType,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['addKeyboardShortcuts'],\n    }) => {\n      [key: string]: KeyboardShortcutCommand,\n    },\n\n    /**\n     * Input rules\n     */\n    addInputRules?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: MarkType,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['addInputRules'],\n    }) => InputRule[],\n\n    /**\n     * Paste rules\n     */\n    addPasteRules?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: MarkType,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['addPasteRules'],\n    }) => PasteRule[],\n\n    /**\n     * ProseMirror plugins\n     */\n    addProseMirrorPlugins?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: MarkType,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['addProseMirrorPlugins'],\n    }) => Plugin[],\n\n    /**\n     * Extensions\n     */\n    addExtensions?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['addExtensions'],\n    }) => Extensions,\n\n    /**\n     * Extend Node Schema\n     */\n    extendNodeSchema?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        parent: ParentConfig<MarkConfig<Options, Storage>>['extendNodeSchema'],\n      },\n      extension: Node,\n    ) => Record<string, any>) | null,\n\n    /**\n     * Extend Mark Schema\n     */\n    extendMarkSchema?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        parent: ParentConfig<MarkConfig<Options, Storage>>['extendMarkSchema'],\n      },\n      extension: Mark,\n    ) => Record<string, any>) | null,\n\n    /**\n     * The editor is not ready yet.\n     */\n    onBeforeCreate?: ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: MarkType,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['onBeforeCreate'],\n    }) => void) | null,\n\n    /**\n     * The editor is ready.\n     */\n    onCreate?: ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: MarkType,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['onCreate'],\n    }) => void) | null,\n\n    /**\n     * The content has changed.\n     */\n    onUpdate?: ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: MarkType,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['onUpdate'],\n    }) => void) | null,\n\n    /**\n     * The selection has changed.\n     */\n    onSelectionUpdate?: ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: MarkType,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['onSelectionUpdate'],\n    }) => void) | null,\n\n    /**\n     * The editor state has changed.\n     */\n    onTransaction?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        editor: Editor,\n        type: MarkType,\n        parent: ParentConfig<MarkConfig<Options, Storage>>['onTransaction'],\n      },\n      props: {\n        transaction: Transaction,\n      },\n    ) => void) | null,\n\n    /**\n     * The editor is focused.\n     */\n    onFocus?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        editor: Editor,\n        type: MarkType,\n        parent: ParentConfig<MarkConfig<Options, Storage>>['onFocus'],\n      },\n      props: {\n        event: FocusEvent,\n      },\n    ) => void) | null,\n\n    /**\n     * The editor isn\u2019t focused anymore.\n     */\n    onBlur?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        editor: Editor,\n        type: MarkType,\n        parent: ParentConfig<MarkConfig<Options, Storage>>['onBlur'],\n      },\n      props: {\n        event: FocusEvent,\n      },\n    ) => void) | null,\n\n    /**\n     * The editor is destroyed.\n     */\n    onDestroy?: ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: MarkType,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['onDestroy'],\n    }) => void) | null,\n\n    /**\n     * Keep mark after split node\n     */\n    keepOnSplit?: boolean | (() => boolean),\n\n    /**\n     * Inclusive\n     */\n    inclusive?: MarkSpec['inclusive'] | ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['inclusive'],\n    }) => MarkSpec['inclusive']),\n\n    /**\n     * Excludes\n     */\n    excludes?: MarkSpec['excludes'] | ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['excludes'],\n    }) => MarkSpec['excludes']),\n\n    /**\n     * Group\n     */\n    group?: MarkSpec['group'] | ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['group'],\n    }) => MarkSpec['group']),\n\n    /**\n     * Spanning\n     */\n    spanning?: MarkSpec['spanning'] | ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['spanning'],\n    }) => MarkSpec['spanning']),\n\n    /**\n     * Code\n     */\n    code?: boolean | ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['code'],\n    }) => boolean),\n\n    /**\n     * Parse HTML\n     */\n    parseHTML?: (\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        parent: ParentConfig<MarkConfig<Options, Storage>>['parseHTML'],\n      },\n    ) => MarkSpec['parseDOM'],\n\n    /**\n     * Render HTML\n     */\n    renderHTML?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        parent: ParentConfig<MarkConfig<Options, Storage>>['renderHTML'],\n      },\n      props: {\n        mark: ProseMirrorMark,\n        HTMLAttributes: Record<string, any>,\n      },\n    ) => DOMOutputSpec) | null,\n\n    /**\n     * Attributes\n     */\n    addAttributes?: (\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        parent: ParentConfig<MarkConfig<Options, Storage>>['addAttributes'],\n      },\n    ) => Attributes | {},\n  }\n}\n\nexport class Mark<Options = any, Storage = any> {\n  type = 'mark'\n\n  name = 'mark'\n\n  parent: Mark | null = null\n\n  child: Mark | null = null\n\n  options: Options\n\n  storage: Storage\n\n  config: MarkConfig = {\n    name: this.name,\n    defaultOptions: {},\n  }\n\n  constructor(config: Partial<MarkConfig<Options, Storage>> = {}) {\n    this.config = {\n      ...this.config,\n      ...config,\n    }\n\n    this.name = this.config.name\n\n    if (config.defaultOptions) {\n      console.warn(`[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${this.name}\".`)\n    }\n\n    // TODO: remove `addOptions` fallback\n    this.options = this.config.defaultOptions\n\n    if (this.config.addOptions) {\n      this.options = callOrReturn(getExtensionField<AnyConfig['addOptions']>(\n        this,\n        'addOptions',\n        {\n          name: this.name,\n        },\n      ))\n    }\n\n    this.storage = callOrReturn(getExtensionField<AnyConfig['addStorage']>(\n      this,\n      'addStorage',\n      {\n        name: this.name,\n        options: this.options,\n      },\n    )) || {}\n  }\n\n  static create<O = any, S = any>(config: Partial<MarkConfig<O, S>> = {}) {\n    return new Mark<O, S>(config)\n  }\n\n  configure(options: Partial<Options> = {}) {\n    // return a new instance so we can use the same extension\n    // with different calls of `configure`\n    const extension = this.extend()\n\n    extension.options = mergeDeep(this.options, options) as Options\n\n    extension.storage = callOrReturn(getExtensionField<AnyConfig['addStorage']>(\n      extension,\n      'addStorage',\n      {\n        name: extension.name,\n        options: extension.options,\n      },\n    ))\n\n    return extension\n  }\n\n  extend<ExtendedOptions = Options, ExtendedStorage = Storage>(extendedConfig: Partial<MarkConfig<ExtendedOptions, ExtendedStorage>> = {}) {\n    const extension = new Mark<ExtendedOptions, ExtendedStorage>(extendedConfig)\n\n    extension.parent = this\n\n    this.child = extension\n\n    extension.name = extendedConfig.name\n      ? extendedConfig.name\n      : extension.parent.name\n\n    if (extendedConfig.defaultOptions) {\n      console.warn(`[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${extension.name}\".`)\n    }\n\n    extension.options = callOrReturn(getExtensionField<AnyConfig['addOptions']>(\n      extension,\n      'addOptions',\n      {\n        name: extension.name,\n      },\n    ))\n\n    extension.storage = callOrReturn(getExtensionField<AnyConfig['addStorage']>(\n      extension,\n      'addStorage',\n      {\n        name: extension.name,\n        options: extension.options,\n      },\n    ))\n\n    return extension\n  }\n}\n", "import { Decoration, NodeView as ProseMirrorNodeView } from 'prosemirror-view'\nimport { NodeSelection } from 'prosemirror-state'\nimport { Node as ProseMirrorNode } from 'prosemirror-model'\nimport { Editor as CoreEditor } from './Editor'\nimport { Node } from './Node'\nimport { isiOS } from './utilities/isiOS'\nimport { NodeViewRendererProps, NodeViewRendererOptions } from './types'\n\nexport class NodeView<\n  Component,\n  Editor extends CoreEditor = CoreEditor,\n  Options extends NodeViewRendererOptions = NodeViewRendererOptions,\n> implements ProseMirrorNodeView {\n\n  component: Component\n\n  editor: Editor\n\n  options: Options\n\n  extension: Node\n\n  node: ProseMirrorNode\n\n  decorations: Decoration[]\n\n  getPos: any\n\n  isDragging = false\n\n  constructor(component: Component, props: NodeViewRendererProps, options?: Partial<Options>) {\n    this.component = component\n    this.editor = props.editor as Editor\n    this.options = {\n      stopEvent: null,\n      ignoreMutation: null,\n      ...options,\n    } as Options\n    this.extension = props.extension\n    this.node = props.node\n    this.decorations = props.decorations\n    this.getPos = props.getPos\n    this.mount()\n  }\n\n  mount() {\n    // eslint-disable-next-line\n    return\n  }\n\n  get dom(): Element | null {\n    return null\n  }\n\n  get contentDOM(): Element | null {\n    return null\n  }\n\n  onDragStart(event: DragEvent) {\n    const { view } = this.editor\n    const target = (event.target as HTMLElement)\n\n    // get the drag handle element\n    // `closest` is not available for text nodes so we may have to use its parent\n    const dragHandle = target.nodeType === 3\n      ? target.parentElement?.closest('[data-drag-handle]')\n      : target.closest('[data-drag-handle]')\n\n    if (\n      !this.dom\n      || this.contentDOM?.contains(target)\n      || !dragHandle\n    ) {\n      return\n    }\n\n    let x = 0\n    let y = 0\n\n    // calculate offset for drag element if we use a different drag handle element\n    if (this.dom !== dragHandle) {\n      const domBox = this.dom.getBoundingClientRect()\n      const handleBox = dragHandle.getBoundingClientRect()\n\n      x = handleBox.x - domBox.x + event.offsetX\n      y = handleBox.y - domBox.y + event.offsetY\n    }\n\n    event.dataTransfer?.setDragImage(this.dom, x, y)\n\n    // we need to tell ProseMirror that we want to move the whole node\n    // so we create a NodeSelection\n    const selection = NodeSelection.create(view.state.doc, this.getPos())\n    const transaction = view.state.tr.setSelection(selection)\n\n    view.dispatch(transaction)\n  }\n\n  stopEvent(event: Event) {\n    if (!this.dom) {\n      return false\n    }\n\n    if (typeof this.options.stopEvent === 'function') {\n      return this.options.stopEvent({ event })\n    }\n\n    const target = (event.target as HTMLElement)\n    const isInElement = this.dom.contains(target) && !this.contentDOM?.contains(target)\n\n    // any event from child nodes should be handled by ProseMirror\n    if (!isInElement) {\n      return false\n    }\n\n    const isDropEvent = event.type === 'drop'\n    const isInput = ['INPUT', 'BUTTON', 'SELECT', 'TEXTAREA'].includes(target.tagName)\n      || target.isContentEditable\n\n    // any input event within node views should be ignored by ProseMirror\n    if (isInput && !isDropEvent) {\n      return true\n    }\n\n    const { isEditable } = this.editor\n    const { isDragging } = this\n    const isDraggable = !!this.node.type.spec.draggable\n    const isSelectable = NodeSelection.isSelectable(this.node)\n    const isCopyEvent = event.type === 'copy'\n    const isPasteEvent = event.type === 'paste'\n    const isCutEvent = event.type === 'cut'\n    const isClickEvent = event.type === 'mousedown'\n    const isDragEvent = event.type.startsWith('drag')\n\n    // ProseMirror tries to drag selectable nodes\n    // even if `draggable` is set to `false`\n    // this fix prevents that\n    if (!isDraggable && isSelectable && isDragEvent) {\n      event.preventDefault()\n    }\n\n    if (isDraggable && isDragEvent && !isDragging) {\n      event.preventDefault()\n      return false\n    }\n\n    // we have to store that dragging started\n    if (isDraggable && isEditable && !isDragging && isClickEvent) {\n      const dragHandle = target.closest('[data-drag-handle]')\n      const isValidDragHandle = dragHandle\n        && (this.dom === dragHandle || (this.dom.contains(dragHandle)))\n\n      if (isValidDragHandle) {\n        this.isDragging = true\n\n        document.addEventListener('dragend', () => {\n          this.isDragging = false\n        }, { once: true })\n\n        document.addEventListener('mouseup', () => {\n          this.isDragging = false\n        }, { once: true })\n      }\n    }\n\n    // these events are handled by prosemirror\n    if (\n      isDragging\n      || isDropEvent\n      || isCopyEvent\n      || isPasteEvent\n      || isCutEvent\n      || (isClickEvent && isSelectable)\n    ) {\n      return false\n    }\n\n    return true\n  }\n\n  ignoreMutation(mutation: MutationRecord | { type: 'selection', target: Element }) {\n    if (!this.dom || !this.contentDOM) {\n      return true\n    }\n\n    if (typeof this.options.ignoreMutation === 'function') {\n      return this.options.ignoreMutation({ mutation })\n    }\n\n    // a leaf/atom node is like a black box for ProseMirror\n    // and should be fully handled by the node view\n    if (this.node.isLeaf || this.node.isAtom) {\n      return true\n    }\n\n    // ProseMirror should handle any selections\n    if (mutation.type === 'selection') {\n      return false\n    }\n\n    // try to prevent a bug on iOS that will break node views on enter\n    // this is because ProseMirror can\u2019t preventDispatch on enter\n    // this will lead to a re-render of the node view on enter\n    // see: https://github.com/ueberdosis/tiptap/issues/1214\n    if (\n      this.dom.contains(mutation.target)\n      && mutation.type === 'childList'\n      && isiOS()\n      && this.editor.isFocused\n    ) {\n      const changedNodes = [\n        ...Array.from(mutation.addedNodes),\n        ...Array.from(mutation.removedNodes),\n      ] as HTMLElement[]\n\n      // we\u2019ll check if every changed node is contentEditable\n      // to make sure it\u2019s probably mutated by ProseMirror\n      if (changedNodes.every(node => node.isContentEditable)) {\n        return false\n      }\n    }\n\n    // we will allow mutation contentDOM with attributes\n    // so we can for example adding classes within our node view\n    if (this.contentDOM === mutation.target && mutation.type === 'attributes') {\n      return true\n    }\n\n    // ProseMirror should handle any changes within contentDOM\n    if (this.contentDOM.contains(mutation.target)) {\n      return false\n    }\n\n    return true\n  }\n\n  updateAttributes(attributes: {}) {\n    this.editor.commands.command(({ tr }) => {\n      const pos = this.getPos()\n\n      tr.setNodeMarkup(pos, undefined, {\n        ...this.node.attrs,\n        ...attributes,\n      })\n\n      return true\n    })\n  }\n\n  deleteNode(): void {\n    const from = this.getPos()\n    const to = from + this.node.nodeSize\n\n    this.editor.commands.deleteRange({ from, to })\n  }\n}\n", "import { Transaction } from 'prosemirror-state'\n\nexport interface TrackerResult {\n  position: number,\n  deleted: boolean,\n}\n\nexport class Tracker {\n\n  transaction: Transaction\n\n  currentStep: number\n\n  constructor(transaction: Transaction) {\n    this.transaction = transaction\n    this.currentStep = this.transaction.steps.length\n  }\n\n  map(position: number): TrackerResult {\n    let deleted = false\n\n    const mappedPosition = this.transaction.steps\n      .slice(this.currentStep)\n      .reduce((newPosition, step) => {\n        const mapResult = step\n          .getMap()\n          .mapResult(newPosition)\n\n        if (mapResult.deleted) {\n          deleted = true\n        }\n\n        return mapResult.pos\n      }, position)\n\n    return {\n      position: mappedPosition,\n      deleted,\n    }\n  }\n\n}\n", "import { NodeType } from 'prosemirror-model'\nimport { InputRule, InputRuleFinder } from '../InputRule'\nimport { ExtendedRegExpMatchArray } from '../types'\nimport { callOrReturn } from '../utilities/callOrReturn'\n\n/**\n * Build an input rule that adds a node when the\n * matched text is typed into it.\n */\nexport function nodeInputRule(config: {\n  find: InputRuleFinder,\n  type: NodeType,\n  getAttributes?:\n    | Record<string, any>\n    | ((match: ExtendedRegExpMatchArray) => Record<string, any>)\n    | false\n    | null\n  ,\n}) {\n  return new InputRule({\n    find: config.find,\n    handler: ({ state, range, match }) => {\n      const attributes = callOrReturn(config.getAttributes, undefined, match) || {}\n      const { tr } = state\n      const start = range.from\n      let end = range.to\n\n      if (match[1]) {\n        const offset = match[0].lastIndexOf(match[1])\n        let matchStart = start + offset\n\n        if (matchStart > end) {\n          matchStart = end\n        } else {\n          end = matchStart + match[1].length\n        }\n\n        // insert last typed character\n        const lastChar = match[0][match[0].length - 1]\n\n        tr.insertText(lastChar, start + match[0].length - 1)\n\n        // insert node from input rule\n        tr.replaceWith(matchStart, end, config.type.create(attributes))\n      } else if (match[0]) {\n        tr.replaceWith(start, end, config.type.create(attributes))\n      }\n    },\n  })\n}\n", "import { Node as ProseMirrorNode } from 'prosemirror-model'\nimport { MarkRange } from '../types'\nimport { getMarkRange } from './getMarkRange'\n\nexport function getMarksBetween(from: number, to: number, doc: ProseMirrorNode): MarkRange[] {\n  const marks: MarkRange[] = []\n\n  // get all inclusive marks on empty selection\n  if (from === to) {\n    doc\n      .resolve(from)\n      .marks()\n      .forEach(mark => {\n        const $pos = doc.resolve(from - 1)\n        const range = getMarkRange($pos, mark.type)\n\n        if (!range) {\n          return\n        }\n\n        marks.push({\n          mark,\n          ...range,\n        })\n      })\n  } else {\n    doc.nodesBetween(from, to, (node, pos) => {\n      marks.push(...node.marks.map(mark => ({\n        from: pos,\n        to: pos + node.nodeSize,\n        mark,\n      })))\n    })\n  }\n\n  return marks\n}\n", "import { InputRule, InputRuleFinder } from '../InputRule'\nimport { MarkType } from 'prosemirror-model'\nimport { getMarksBetween } from '../helpers/getMarksBetween'\nimport { callOrReturn } from '../utilities/callOrReturn'\nimport { ExtendedRegExpMatchArray } from '../types'\n\n/**\n * Build an input rule that adds a mark when the\n * matched text is typed into it.\n */\nexport function markInputRule(config: {\n  find: InputRuleFinder,\n  type: MarkType,\n  getAttributes?:\n    | Record<string, any>\n    | ((match: ExtendedRegExpMatchArray) => Record<string, any>)\n    | false\n    | null\n  ,\n}) {\n  return new InputRule({\n    find: config.find,\n    handler: ({ state, range, match }) => {\n      const attributes = callOrReturn(config.getAttributes, undefined, match)\n\n      if (attributes === false || attributes === null) {\n        return null\n      }\n\n      const { tr } = state\n      const captureGroup = match[match.length - 1]\n      const fullMatch = match[0]\n      let markEnd = range.to\n\n      if (captureGroup) {\n        const startSpaces = fullMatch.search(/\\S/)\n        const textStart = range.from + fullMatch.indexOf(captureGroup)\n        const textEnd = textStart + captureGroup.length\n\n        const excludedMarks = getMarksBetween(range.from, range.to, state.doc)\n          .filter(item => {\n            // @ts-ignore\n            const excluded = item.mark.type.excluded as MarkType[]\n\n            return excluded.find(type => type === config.type && type !== item.mark.type)\n          })\n          .filter(item => item.to > textStart)\n\n        if (excludedMarks.length) {\n          return null\n        }\n\n        if (textEnd < range.to) {\n          tr.delete(textEnd, range.to)\n        }\n\n        if (textStart > range.from) {\n          tr.delete(range.from + startSpaces, textStart)\n        }\n\n        markEnd = range.from + startSpaces + captureGroup.length\n\n        tr.addMark(range.from + startSpaces, markEnd, config.type.create(attributes || {}))\n\n        tr.removeStoredMark(config.type)\n      }\n    },\n  })\n}\n", "import { InputRule, InputRuleFinder } from '../InputRule'\nimport { NodeType } from 'prosemirror-model'\nimport { ExtendedRegExpMatchArray } from '../types'\nimport { callOrReturn } from '../utilities/callOrReturn'\n\n/**\n * Build an input rule that changes the type of a textblock when the\n * matched text is typed into it. When using a regular expresion you\u2019ll\n * probably want the regexp to start with `^`, so that the pattern can\n * only occur at the start of a textblock.\n */\nexport function textblockTypeInputRule(config: {\n  find: InputRuleFinder,\n  type: NodeType,\n  getAttributes?:\n    | Record<string, any>\n    | ((match: ExtendedRegExpMatchArray) => Record<string, any>)\n    | false\n    | null\n  ,\n}) {\n  return new InputRule({\n    find: config.find,\n    handler: ({ state, range, match }) => {\n      const $start = state.doc.resolve(range.from)\n      const attributes = callOrReturn(config.getAttributes, undefined, match) || {}\n\n      if (!$start.node(-1).canReplaceWith($start.index(-1), $start.indexAfter(-1), config.type)) {\n        return null\n      }\n\n      state.tr\n        .delete(range.from, range.to)\n        .setBlockType(range.from, range.from, config.type, attributes)\n    },\n  })\n}\n", "import { InputRule, InputRuleFinder } from '../InputRule'\n\n/**\n * Build an input rule that replaces text when the\n * matched text is typed into it.\n */\nexport function textInputRule(config: {\n  find: InputRuleFinder,\n  replace: string,\n}) {\n  return new InputRule({\n    find: config.find,\n    handler: ({ state, range, match }) => {\n      let insert = config.replace\n      let start = range.from\n      const end = range.to\n\n      if (match[1]) {\n        const offset = match[0].lastIndexOf(match[1])\n\n        insert += match[0].slice(offset + match[1].length)\n        start += offset\n\n        const cutOff = start - end\n\n        if (cutOff > 0) {\n          insert = match[0].slice(offset - cutOff, offset) + insert\n          start = end\n        }\n      }\n\n      state.tr.insertText(insert, start, end)\n    },\n  })\n}\n", "import { InputRule, InputRuleFinder } from '../InputRule'\nimport { NodeType, Node as ProseMirrorNode } from 'prosemirror-model'\nimport { findWrapping, canJoin } from 'prosemirror-transform'\nimport { ExtendedRegExpMatchArray } from '../types'\nimport { callOrReturn } from '../utilities/callOrReturn'\n\n/**\n * Build an input rule for automatically wrapping a textblock when a\n * given string is typed. When using a regular expresion you\u2019ll\n * probably want the regexp to start with `^`, so that the pattern can\n * only occur at the start of a textblock.\n *\n * `type` is the type of node to wrap in.\n *\n * By default, if there\u2019s a node with the same type above the newly\n * wrapped node, the rule will try to join those\n * two nodes. You can pass a join predicate, which takes a regular\n * expression match and the node before the wrapped node, and can\n * return a boolean to indicate whether a join should happen.\n */\nexport function wrappingInputRule(config: {\n  find: InputRuleFinder,\n  type: NodeType,\n  getAttributes?:\n    | Record<string, any>\n    | ((match: ExtendedRegExpMatchArray) => Record<string, any>)\n    | false\n    | null\n  ,\n  joinPredicate?: (match: ExtendedRegExpMatchArray, node: ProseMirrorNode) => boolean,\n}) {\n  return new InputRule({\n    find: config.find,\n    handler: ({ state, range, match }) => {\n      const attributes = callOrReturn(config.getAttributes, undefined, match) || {}\n      const tr = state.tr.delete(range.from, range.to)\n      const $start = tr.doc.resolve(range.from)\n      const blockRange = $start.blockRange()\n      const wrapping = blockRange && findWrapping(blockRange, config.type, attributes)\n\n      if (!wrapping) {\n        return null\n      }\n\n      tr.wrap(blockRange, wrapping)\n\n      const before = tr.doc.resolve(range.from - 1).nodeBefore\n\n      if (\n        before\n        && before.type === config.type\n        && canJoin(tr.doc, range.from - 1)\n        && (!config.joinPredicate || config.joinPredicate(match, before))\n      ) {\n        tr.join(range.from - 1)\n      }\n    },\n  })\n}\n", "import { PasteRule, PasteRuleFinder } from '../PasteRule'\nimport { MarkType } from 'prosemirror-model'\nimport { getMarksBetween } from '../helpers/getMarksBetween'\nimport { callOrReturn } from '../utilities/callOrReturn'\nimport { ExtendedRegExpMatchArray } from '../types'\n\n/**\n * Build an paste rule that adds a mark when the\n * matched text is pasted into it.\n */\nexport function markPasteRule(config: {\n  find: PasteRuleFinder,\n  type: MarkType,\n  getAttributes?:\n    | Record<string, any>\n    | ((match: ExtendedRegExpMatchArray) => Record<string, any>)\n    | false\n    | null\n  ,\n}) {\n  return new PasteRule({\n    find: config.find,\n    handler: ({ state, range, match }) => {\n      const attributes = callOrReturn(config.getAttributes, undefined, match)\n\n      if (attributes === false || attributes === null) {\n        return null\n      }\n\n      const { tr } = state\n      const captureGroup = match[match.length - 1]\n      const fullMatch = match[0]\n      let markEnd = range.to\n\n      if (captureGroup) {\n        const startSpaces = fullMatch.search(/\\S/)\n        const textStart = range.from + fullMatch.indexOf(captureGroup)\n        const textEnd = textStart + captureGroup.length\n\n        const excludedMarks = getMarksBetween(range.from, range.to, state.doc)\n          .filter(item => {\n            // @ts-ignore\n            const excluded = item.mark.type.excluded as MarkType[]\n\n            return excluded.find(type => type === config.type && type !== item.mark.type)\n          })\n          .filter(item => item.to > textStart)\n\n        if (excludedMarks.length) {\n          return null\n        }\n\n        if (textEnd < range.to) {\n          tr.delete(textEnd, range.to)\n        }\n\n        if (textStart > range.from) {\n          tr.delete(range.from + startSpaces, textStart)\n        }\n\n        markEnd = range.from + startSpaces + captureGroup.length\n\n        tr.addMark(range.from + startSpaces, markEnd, config.type.create(attributes || {}))\n\n        tr.removeStoredMark(config.type)\n      }\n    },\n  })\n}\n", "import { PasteRule, PasteRuleFinder } from '../PasteRule'\n\n/**\n * Build an paste rule that replaces text when the\n * matched text is pasted into it.\n */\nexport function textPasteRule(config: {\n  find: PasteRuleFinder,\n  replace: string,\n}) {\n  return new PasteRule({\n    find: config.find,\n    handler: ({ state, range, match }) => {\n      let insert = config.replace\n      let start = range.from\n      const end = range.to\n\n      if (match[1]) {\n        const offset = match[0].lastIndexOf(match[1])\n\n        insert += match[0].slice(offset + match[1].length)\n        start += offset\n\n        const cutOff = start - end\n\n        if (cutOff > 0) {\n          insert = match[0].slice(offset - cutOff, offset) + insert\n          start = end\n        }\n      }\n\n      state.tr.insertText(insert, start, end)\n    },\n  })\n}\n", "// source: https://stackoverflow.com/a/6969486\nexport function escapeForRegEx(string: string): string {\n  return string.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&')\n}\n", "import { Node as ProseMirrorNode } from 'prosemirror-model'\nimport { Transaction } from 'prosemirror-state'\nimport { Transform } from 'prosemirror-transform'\n\n/**\n * Returns a new `Transform` based on all steps of the passed transactions.\n */\nexport function combineTransactionSteps(oldDoc: ProseMirrorNode, transactions: Transaction[]): Transform {\n  const transform = new Transform(oldDoc)\n\n  transactions.forEach(transaction => {\n    transaction.steps.forEach(step => {\n      transform.step(step)\n    })\n  })\n\n  return transform\n}\n", "import { ContentMatch, NodeType } from 'prosemirror-model'\n\nexport function defaultBlockAt(match: ContentMatch): NodeType | null {\n  for (let i = 0; i < match.edgeCount; i += 1) {\n    const { type } = match.edge(i)\n\n    if (type.isTextblock && !type.hasRequiredAttrs()) {\n      return type\n    }\n  }\n\n  return null\n}\n", "import { Node as ProseMirrorNode } from 'prosemirror-model'\nimport { Predicate, NodeWithPos } from '../types'\n\nexport function findChildren(node: ProseMirrorNode, predicate: Predicate): NodeWithPos[] {\n  const nodesWithPos: NodeWithPos[] = []\n\n  node.descendants((child, pos) => {\n    if (predicate(child)) {\n      nodesWithPos.push({\n        node: child,\n        pos,\n      })\n    }\n  })\n\n  return nodesWithPos\n}\n", "import { Node as ProseMirrorNode } from 'prosemirror-model'\nimport { Predicate, Range, NodeWithPos } from '../types'\n\n/**\n * Same as `findChildren` but searches only within a `range`.\n */\nexport function findChildrenInRange(node: ProseMirrorNode, range: Range, predicate: Predicate): NodeWithPos[] {\n  const nodesWithPos: NodeWithPos[] = []\n\n  // if (range.from === range.to) {\n  //   const nodeAt = node.nodeAt(range.from)\n\n  //   if (nodeAt) {\n  //     nodesWithPos.push({\n  //       node: nodeAt,\n  //       pos: range.from,\n  //     })\n  //   }\n  // }\n\n  node.nodesBetween(range.from, range.to, (child, pos) => {\n    if (predicate(child)) {\n      nodesWithPos.push({\n        node: child,\n        pos,\n      })\n    }\n  })\n\n  return nodesWithPos\n}\n", "import { Schema } from 'prosemirror-model'\nimport { getSchemaByResolvedExtensions } from './getSchemaByResolvedExtensions'\nimport { ExtensionManager } from '../ExtensionManager'\nimport { Extensions } from '../types'\n\nexport function getSchema(extensions: Extensions): Schema {\n  const resolvedExtensions = ExtensionManager.resolve(extensions)\n\n  return getSchemaByResolvedExtensions(resolvedExtensions)\n}\n", "import { Node } from 'prosemirror-model'\nimport { getSchema } from './getSchema'\nimport { getHTMLFromFragment } from './getHTMLFromFragment'\nimport { Extensions, JSONContent } from '../types'\n\nexport function generateHTML(doc: JSONContent, extensions: Extensions): string {\n  const schema = getSchema(extensions)\n  const contentNode = Node.fromJSON(schema, doc)\n\n  return getHTMLFromFragment(contentNode.content, schema)\n}\n", "import { DOMParser } from 'prosemirror-model'\nimport { getSchema } from './getSchema'\nimport { elementFromString } from '../utilities/elementFromString'\nimport { Extensions } from '../types'\n\nexport function generateJSON(html: string, extensions: Extensions): Record<string, any> {\n  const schema = getSchema(extensions)\n  const dom = elementFromString(html)\n\n  return DOMParser.fromSchema(schema)\n    .parse(dom)\n    .toJSON()\n}\n", "import { Node } from 'prosemirror-model'\nimport { getSchema } from './getSchema'\nimport { Extensions, JSONContent, TextSerializer } from '../types'\nimport { getTextSeralizersFromSchema } from './getTextSeralizersFromSchema'\nimport { getText } from './getText'\n\nexport function generateText(\n  doc: JSONContent,\n  extensions: Extensions,\n  options?: {\n    blockSeparator?: string,\n    textSerializers?: Record<string, TextSerializer>,\n  },\n): string {\n  const {\n    blockSeparator = '\\n\\n',\n    textSerializers = {},\n  } = options || {}\n  const schema = getSchema(extensions)\n  const contentNode = Node.fromJSON(schema, doc)\n\n  return getText(contentNode, {\n    blockSeparator,\n    textSerializers: {\n      ...textSerializers,\n      ...getTextSeralizersFromSchema(schema),\n    },\n  })\n}\n", "/**\n * Removes duplicated values within an array.\n * Supports numbers, strings and objects.\n */\nexport function removeDuplicates<T>(array: T[], by = JSON.stringify): T[] {\n  const seen: Record<any, any> = {}\n\n  return array.filter(item => {\n    const key = by(item)\n\n    return Object.prototype.hasOwnProperty.call(seen, key)\n      ? false\n      : (seen[key] = true)\n  })\n}\n", "import { Transform, Step } from 'prosemirror-transform'\nimport { Range } from '../types'\nimport { removeDuplicates } from '../utilities/removeDuplicates'\n\nexport type ChangedRange = {\n  oldRange: Range,\n  newRange: Range,\n}\n\n/**\n * Removes duplicated ranges and ranges that are\n * fully captured by other ranges.\n */\nfunction simplifyChangedRanges(changes: ChangedRange[]): ChangedRange[] {\n  const uniqueChanges = removeDuplicates(changes)\n\n  return uniqueChanges.length === 1\n    ? uniqueChanges\n    : uniqueChanges.filter((change, index) => {\n      const rest = uniqueChanges.filter((_, i) => i !== index)\n\n      return !rest.some(otherChange => {\n        return change.oldRange.from >= otherChange.oldRange.from\n          && change.oldRange.to <= otherChange.oldRange.to\n          && change.newRange.from >= otherChange.newRange.from\n          && change.newRange.to <= otherChange.newRange.to\n      })\n    })\n}\n\n/**\n * Returns a list of changed ranges\n * based on the first and last state of all steps.\n */\nexport function getChangedRanges(transform: Transform): ChangedRange[] {\n  const { mapping, steps } = transform\n  const changes: ChangedRange[] = []\n\n  mapping.maps.forEach((stepMap, index) => {\n    const ranges: Range[] = []\n\n    // This accounts for step changes where no range was actually altered\n    // e.g. when setting a mark, node attribute, etc.\n    // @ts-ignore\n    if (!stepMap.ranges.length) {\n      const { from, to } = steps[index] as Step & {\n        from?: number,\n        to?: number,\n      }\n\n      if (from === undefined || to === undefined) {\n        return\n      }\n\n      ranges.push({ from, to })\n    } else {\n      stepMap.forEach((from, to) => {\n        ranges.push({ from, to })\n      })\n    }\n\n    ranges.forEach(({ from, to }) => {\n      const newStart = mapping.slice(index).map(from, -1)\n      const newEnd = mapping.slice(index).map(to)\n      const oldStart = mapping.invert().map(newStart, -1)\n      const oldEnd = mapping.invert().map(newEnd)\n\n      changes.push({\n        oldRange: {\n          from: oldStart,\n          to: oldEnd,\n        },\n        newRange: {\n          from: newStart,\n          to: newEnd,\n        },\n      })\n    })\n  })\n\n  return simplifyChangedRanges(changes)\n}\n", "import { Node as ProseMirrorNode } from 'prosemirror-model'\nimport { JSONContent } from '../types'\n\ninterface DebugJSONContent extends JSONContent {\n  from: number,\n  to: number,\n}\n\nexport function getDebugJSON(node: ProseMirrorNode, startOffset = 0): DebugJSONContent {\n  const isTopNode = node.type === node.type.schema.topNodeType\n  const increment = isTopNode ? 0 : 1\n  const from = startOffset\n  const to = from + node.nodeSize\n  const marks = node.marks.map(mark => {\n    const output: { type: string, attrs?: Record<string, any> } = {\n      type: mark.type.name,\n    }\n\n    if (Object.keys(mark.attrs).length) {\n      output.attrs = { ...mark.attrs }\n    }\n\n    return output\n  })\n  const attrs = { ...node.attrs }\n  const output: DebugJSONContent = {\n    type: node.type.name,\n    from,\n    to,\n  }\n\n  if (Object.keys(attrs).length) {\n    output.attrs = attrs\n  }\n\n  if (marks.length) {\n    output.marks = marks\n  }\n\n  if (node.content.childCount) {\n    output.content = []\n\n    node.forEach((child, offset) => {\n      output.content?.push(getDebugJSON(child, startOffset + offset + increment))\n    })\n  }\n\n  if (node.text) {\n    output.text = node.text\n  }\n\n  return output\n}\n", "import { NodeSelection } from 'prosemirror-state'\nimport { isObject } from '../utilities/isObject'\n\nexport function isNodeSelection(value: unknown): value is NodeSelection {\n  return isObject(value) && value instanceof NodeSelection\n}\n", "import { EditorView } from 'prosemirror-view'\nimport { minMax } from '../utilities/minMax'\n\nexport function posToDOMRect(view: EditorView, from: number, to: number): DOMRect {\n  const minPos = 0\n  const maxPos = view.state.doc.content.size\n  const resolvedFrom = minMax(from, minPos, maxPos)\n  const resolvedEnd = minMax(to, minPos, maxPos)\n  const start = view.coordsAtPos(resolvedFrom)\n  const end = view.coordsAtPos(resolvedEnd, -1)\n  const top = Math.min(start.top, end.top)\n  const bottom = Math.max(start.bottom, end.bottom)\n  const left = Math.min(start.left, end.left)\n  const right = Math.max(start.right, end.right)\n  const width = right - left\n  const height = bottom - top\n  const x = left\n  const y = top\n  const data = {\n    top,\n    bottom,\n    left,\n    right,\n    width,\n    height,\n    x,\n    y,\n  }\n\n  return {\n    ...data,\n    toJSON: () => data,\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
