{
  "version": 3,
  "sources": ["../@tiptap/extension-highlight/src/highlight.ts", "dep:@tiptap_extension-highlight"],
  "sourcesContent": ["import {\n  Mark,\n  markInputRule,\n  markPasteRule,\n  mergeAttributes,\n} from '@tiptap/core'\n\nexport interface HighlightOptions {\n  multicolor: boolean,\n  HTMLAttributes: Record<string, any>,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    highlight: {\n      /**\n       * Set a highlight mark\n       */\n      setHighlight: (attributes?: { color: string }) => ReturnType,\n      /**\n       * Toggle a highlight mark\n       */\n      toggleHighlight: (attributes?: { color: string }) => ReturnType,\n      /**\n       * Unset a highlight mark\n       */\n      unsetHighlight: () => ReturnType,\n    }\n  }\n}\n\nexport const inputRegex = /(?:^|\\s)((?:==)((?:[^~=]+))(?:==))$/\nexport const pasteRegex = /(?:^|\\s)((?:==)((?:[^~=]+))(?:==))/g\n\nexport const Highlight = Mark.create<HighlightOptions>({\n  name: 'highlight',\n\n  addOptions() {\n    return {\n      multicolor: false,\n      HTMLAttributes: {},\n    }\n  },\n\n  addAttributes() {\n    if (!this.options.multicolor) {\n      return {}\n    }\n\n    return {\n      color: {\n        default: null,\n        parseHTML: element => element.getAttribute('data-color') || element.style.backgroundColor,\n        renderHTML: attributes => {\n          if (!attributes.color) {\n            return {}\n          }\n\n          return {\n            'data-color': attributes.color,\n            style: `background-color: ${attributes.color}`,\n          }\n        },\n      },\n    }\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: 'mark',\n      },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['mark', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      setHighlight: attributes => ({ commands }) => {\n        return commands.setMark(this.name, attributes)\n      },\n      toggleHighlight: attributes => ({ commands }) => {\n        return commands.toggleMark(this.name, attributes)\n      },\n      unsetHighlight: () => ({ commands }) => {\n        return commands.unsetMark(this.name)\n      },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Shift-h': () => this.editor.commands.toggleHighlight(),\n    }\n  },\n\n  addInputRules() {\n    return [\n      markInputRule({\n        find: inputRegex,\n        type: this.type,\n      }),\n    ]\n  },\n\n  addPasteRules() {\n    return [\n      markPasteRule({\n        find: pasteRegex,\n        type: this.type,\n      }),\n    ]\n  },\n})\n", "import d from \"./node_modules/@tiptap/extension-highlight/dist/tiptap-extension-highlight.esm.js\";export default d;\nexport * from \"./node_modules/@tiptap/extension-highlight/dist/tiptap-extension-highlight.esm.js\""],
  "mappings": ";;;;;;;;;IA+Ba,aAAa;IACb,aAAa;IAEb,YAAY,KAAK,OAAyB;EACrD,MAAM;EAEN,aAAU;AACR,WAAO;MACL,YAAY;MACZ,gBAAgB;;;EAIpB,gBAAa;AACX,QAAI,CAAC,KAAK,QAAQ,YAAY;AAC5B,aAAO;;AAGT,WAAO;MACL,OAAO;QACL,SAAS;QACT,WAAW,aAAW,QAAQ,aAAa,iBAAiB,QAAQ,MAAM;QAC1E,YAAY,gBAAU;AACpB,cAAI,CAAC,WAAW,OAAO;AACrB,mBAAO;;AAGT,iBAAO;YACL,cAAc,WAAW;YACzB,OAAO,qBAAqB,WAAW;;;;;;EAOjD,YAAS;AACP,WAAO;MACL;QACE,KAAK;;;;EAKX,WAAW,EAAE,kBAAgB;AAC3B,WAAO,CAAC,QAAQ,gBAAgB,KAAK,QAAQ,gBAAgB,iBAAiB;;EAGhF,cAAW;AACT,WAAO;MACL,cAAc,gBAAc,CAAC,EAAE,eAAU;AACvC,eAAO,SAAS,QAAQ,KAAK,MAAM;;MAErC,iBAAiB,gBAAc,CAAC,EAAE,eAAU;AAC1C,eAAO,SAAS,WAAW,KAAK,MAAM;;MAExC,gBAAgB,MAAM,CAAC,EAAE,eAAU;AACjC,eAAO,SAAS,UAAU,KAAK;;;;EAKrC,uBAAoB;AAClB,WAAO;MACL,eAAe,MAAM,KAAK,OAAO,SAAS;;;EAI9C,gBAAa;AACX,WAAO;MACL,cAAc;QACZ,MAAM;QACN,MAAM,KAAK;;;;EAKjB,gBAAa;AACX,WAAO;MACL,cAAc;QACZ,MAAM;QACN,MAAM,KAAK;;;;;;;AChH+E,IAAO,qCAAQ;",
  "names": []
}
